<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Win32</name>
    </assembly>
    <members>
        <member name="T:Win32.IO.FileAccess">
            <summary>
            Defines the specific access rights to files and directories. See <see cref="T:Win32.ACCESS_MASK"/> for more information.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_READ_DATA">
            <summary>
            For a file object, the right to read the corresponding file data.
            For a directory object, the right to read the corresponding directory data.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_LIST_DIRECTORY">
            <summary>
            For a directory, the right to list the contents of the directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_WRITE_DATA">
            <summary>
            For a file object, the right to write data to the file.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_ADD_FILE">
            <summary>
            For a directory, the right to create a file in the directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_APPEND_DATA">
            <summary>
            For a file object, the right to append data to the file.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_ADD_SUBDIRECTORY">
            <summary>
            For a directory, the right to create a subdirectory.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_CREATE_PIPE_INSTANCE">
            <summary>
            For a named pipe, the right to create a pipe.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_READ_EA">
            <summary>
            The right to read extended file attributes.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_WRITE_EA">
            <summary>
            The right to write extended file attributes.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_EXECUTE">
            <summary>
            For a native code file, the right to execute the file. This access
            right given to scripts may cause the script to be executable,
            depending on the script interpreter.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_TRAVERSE">
            <summary>
            For a directory, the right to traverse the directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_DELETE_CHILD">
            <summary>
            For a directory, the right to delete a directory and all
            the files it contains, including read-only files.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_READ_ATTRIBUTES">
            <summary>
            The right to read file attributes.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_WRITE_ATTRIBUTES">
            <summary>
            The right to write file attributes.
            </summary>
        </member>
        <member name="F:Win32.IO.FileAccess.FILE_ALL_ACCESS">
            <summary>
            All possible access rights for a file.
            </summary>
        </member>
        <member name="T:Win32.IO.FilePointerMoveMethod">
            <summary>
            Defines the starting points for the file pointer move operations.
            </summary>
        </member>
        <member name="F:Win32.IO.FilePointerMoveMethod.FILE_BEGIN">
            <summary>
            The starting point is zero or the beginning of the file.
            </summary>
        </member>
        <member name="F:Win32.IO.FilePointerMoveMethod.FILE_CURRENT">
            <summary>
            The starting point is the current value of the file pointer.
            </summary>
        </member>
        <member name="F:Win32.IO.FilePointerMoveMethod.FILE_END">
            <summary>
            The starting point is the current end-of-file position.
            </summary>
        </member>
        <member name="T:Win32.IO.FILE_ACTION">
            <summary>
            Defined the type of change that can occur in directories.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ACTION.ADDED">
            <summary>
            A file was added to the directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ACTION.REMOVED">
            <summary>
            A file was removed from the directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ACTION.MODIFIED">
            <summary>
            A file was modified. This can be a change in the time stamp or attributes.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ACTION.RENAMED_OLD_NAME">
            <summary>
            The file was renamed, since an action notification report carries only one
            file name, two reports transport the information. This is the old name.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ACTION.RENAMED_NEW_NAME">
            <summary>
            The file was renamed, since an action notification report carries only one
            file name, two reports transport the information. This is the new name.
            </summary>
        </member>
        <member name="T:Win32.IO.FILE_GENERIC">
            <summary>
            Defines how the generic access right for files and directories are made up,
            using specific and standard access rights. Use either these values or
            <see cref="T:Win32.GENERIC">GENERIC.*</see> or <see cref="T:Win32.ACCESS_MASK">
            ACCESS_MASK.GENERIC_*</see>. See <see cref="T:Win32.ACCESS_MASK"/> for more information.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_GENERIC.FILE_GENERIC_READ">
            <summary>
            Collects the specific and standard access rights, that are set for <see cref="F:Win32.GENERIC.READ">GENERIC_READ</see>.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_GENERIC.FILE_GENERIC_WRITE">
            <summary>
            Collects the specific and standard access rights, that are set for <see cref="F:Win32.GENERIC.READ">GENERIC_WRITE</see>.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_GENERIC.FILE_GENERIC_EXECUTE">
            <summary>
            Collects the specific and standard access rights, that are set for <see cref="F:Win32.GENERIC.EXECUTE">GENERIC_EXECUTE</see>.
            </summary>
        </member>
        <member name="T:Win32.IO.FILE_NOTIFY_CHANGE">
            <summary>
            Defines filters for directory change notification.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.FILE_NAME">
            <summary>
            Return on any file name change, or on creating or deleting of a file.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.DIR_NAME">
            <summary>
            Return on any directory name change, or on creating or deleting of a directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.ATTRIBUTES">
            <summary>
            Return on any attribute change.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.SIZE">
            <summary>
            Return on any size change.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.LAST_WRITE">
            <summary>
            Return on any change on the last write time of a file.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.LAST_ACCESS">
            <summary>
            Return on any change on the last access time of a file.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.CREATION">
            <summary>
            Return on any change on the creation time of a file.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_NOTIFY_CHANGE.SECURITY">
            <summary>
            Return on any change on the security-descriptor in the watch directory.
            </summary>
        </member>
        <member name="T:Win32.IO.FileOperations">
            <summary>
            Class for file operations.
            </summary>
        </member>
        <member name="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE">
            <summary>
            Is returns by some file operations, denoting an error has occurred.
            </summary>
        </member>
        <member name="F:Win32.IO.FileOperations.INVALID_SET_FILE_POINTER">
            <summary>
            If <see cref="O:SetFilePointer"/> returns this value and <see cref="M:Win32.WinKernel.GetLastError"/>
            returns NO_ERROR (0), it is the position of the file pointer, and not an error.
            </summary>
        </member>
        <member name="F:Win32.IO.FileOperations.INVALID_FILE_SIZE">
            <summary>
            If <see cref="O:GetFileSize"/> returns this value and <see cref="M:Win32.WinKernel.GetLastError"/>
            returns NO_ERROR (0), it is the position of the file pointer, and not an error.
            </summary>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,System.IntPtr,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure. Can be null (IntPtr.Zero).</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_ATTRIBUTE,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FILE_FLAG,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.SECURITY,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,Win32.IO.FileFlagsAndAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FileAccess,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.IO.FILE_GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.GENERIC,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.STANDARD_RIGHTS,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,Win32.ACCESS_MASK,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CreateFile(System.String,System.UInt32,Win32.IO.FILE_SHARE,Win32.SECURITY_ATTRIBUTES@,Win32.IO.FileMode,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file and I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="lpSecurityAttributes">A <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the <see cref="F:Win32.GENERIC.READ"/> access right. Can be null (IntPtr.Zero).</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file or device. If the function fails,
            the return value is <see cref="F:Win32.IO.FileOperations.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:Win32.WinKernel.GetLastError"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.CloseHandle(System.IntPtr)">
            <summary>
            Closes an file or I/O device.
            </summary>
            <param name="hFile">The handle to the file or device.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.GetFileSize(System.IntPtr,System.IntPtr)">
            <summary>
            Retrieves the size of the specified file, in bytes.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="lpFileSizeHigh">A pointer to a <b>uint</b> variable to receive the high order 32
            bits of the file size. If the parameter is null (IntPtr.Zero) no high order bits are returned.</param>
            <returns>If the function succeeds, the return value is the low-order 32 bit of the file size;
            otherwise <see cref="F:Win32.IO.FileOperations.INVALID_FILE_SIZE"/> is returned.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.GetFileSize(System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves the size of the specified file, in bytes.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="lpFileSizeHigh">Receive the high order 32 bits of the file size.</param>
            <returns>If the function succeeds, the return value is the low-order 32 bit of the file size;
            otherwise <see cref="F:Win32.IO.FileOperations.INVALID_FILE_SIZE"/> is returned.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.GetFileSizeEx(System.IntPtr,System.Int64@)">
            <summary>
            Retrieves the size of the specified file, in bytes.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="lpFileSize">Receive the file size.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.ReadFile(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Reads data from the specified file or I/O device.
            </summary>
            <param name="hFile">A handle to the file or device.</param>
            <param name="lpBuffer">The buffer that receives the data read.</param>
            <param name="nNumberOfBytesToRead">The maximum number of bytes to be read.</param>
            <param name="lpNumberOfBytesRead">A pointer to a <b>uint</b> to receives the number
            of bytes written when using a synchronous <paramref name="hFile"/> parameter.
            Can be null (IntPtr.Zero), if <paramref name="lpOverlapped"/> is not null (IntPtr.Zero).</param>
            <param name="lpOverlapped">A pointer to a <see cref="T:System.Threading.NativeOverlapped"/> structure.
            Can be null (IntPtr.Zero).</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.ReadFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Reads data from the specified file or I/O device.
            </summary>
            <param name="hFile">A handle to the file or device.</param>
            <param name="lpBuffer">The buffer that receives the data read.</param>
            <param name="nNumberOfBytesToRead">The maximum number of bytes to be read.</param>
            <param name="lpNumberOfBytesRead">Receives the number of bytes read when using
            a synchronous <paramref name="hFile"/> parameter.</param>
            <param name="lpOverlapped">A pointer to a <see cref="T:System.Threading.NativeOverlapped"/> structure.
            Can be null (IntPtr.Zero).</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.ReadFile(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.Threading.NativeOverlapped@)">
            <summary>
            Reads data from the specified file or I/O device.
            </summary>
            <param name="hFile">A handle to the file or device.</param>
            <param name="lpBuffer">The buffer that receives the data read.</param>
            <param name="nNumberOfBytesToRead">The maximum number of bytes to be read.</param>
            <param name="lpNumberOfBytesRead">A pointer to a <b>uint</b> to receives the number
            of bytes written when using a synchronous <paramref name="hFile"/> parameter.
            Can be null (IntPtr.Zero), if <paramref name="lpOverlapped"/> is not null (IntPtr.Zero).</param>
            <param name="lpOverlapped">A <see cref="T:System.Threading.NativeOverlapped"/> structure.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.ReadFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.Threading.NativeOverlapped@)">
            <summary>
            Reads data from the specified file or I/O device.
            </summary>
            <param name="hFile">A handle to the file or device.</param>
            <param name="lpBuffer">The buffer that receives the data read.</param>
            <param name="nNumberOfBytesToRead">The maximum number of bytes to be read.</param>
            <param name="lpNumberOfBytesRead">Receives the number of bytes read when using
            a synchronous <paramref name="hFile"/> parameter.</param>
            <param name="lpOverlapped">A <see cref="T:System.Threading.NativeOverlapped"/> structure.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.SetEndOfFile(System.IntPtr)">
            <summary>
            Sets the physical file size for the specified file to the current position of the file pointer.
            </summary>
            <param name="hFile">A handle to the file to be extended or truncated.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.SetFilePointer(System.IntPtr,System.Int32,System.IntPtr,Win32.IO.FilePointerMoveMethod)">
            <summary>
            Moves the file pointer of the specified file.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="lDistanceToMove">The low order 32-bits of a signed value that specifies the number of bytes to move the file pointer.</param>
            <param name="lpDistanceToMoveHigh">A pointer to the high order 32-bits of a signed value that specifies the number of bytes to move
            the file pointer. This variable also receives the new file pointer. If this parameter is null (IntPtr.Zero), the new file pointer is
            not returned.</param>
            <param name="dwMoveMethod">The starting point for the file pointer move.</param>
            <returns>If successful returns the low order 32-bits of the new file pointer position, otherwise <see cref="F:Win32.IO.FileOperations.INVALID_SET_FILE_POINTER"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.SetFilePointer(System.IntPtr,System.UInt32,System.IntPtr,Win32.IO.FilePointerMoveMethod)">
            <summary>
            Moves the file pointer of the specified file.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="lDistanceToMove">The low order 32-bits of a signed value that specifies the number of bytes to move the file pointer.</param>
            <param name="lpDistanceToMoveHigh">A pointer to the high order 32-bits of a signed value that specifies the number of bytes to move
            the file pointer. This variable also receives the new file pointer. If this parameter is null (IntPtr.Zero), the new file pointer is
            not returned.</param>
            <param name="dwMoveMethod">The starting point for the file pointer move.</param>
            <returns>If successful returns the low order 32-bits of the new file pointer position, otherwise <see cref="F:Win32.IO.FileOperations.INVALID_SET_FILE_POINTER"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.SetFilePointer(System.IntPtr,System.UInt32,System.Int32@,Win32.IO.FilePointerMoveMethod)">
            <summary>
            Moves the file pointer of the specified file.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="lDistanceToMove">The low order 32-bits of a signed value that specifies the number of bytes to move the file pointer.</param>
            <param name="lpDistanceToMoveHigh">The high order 32-bits of a signed value that specifies the number of bytes to move the file pointer.
            This variable also receives the new file pointer.</param>
            <param name="dwMoveMethod">The starting point for the file pointer move.</param>
            <returns>If successful returns the low order 32-bits of the new file pointer position, otherwise <see cref="F:Win32.IO.FileOperations.INVALID_SET_FILE_POINTER"/>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.SetFilePointerEx(System.IntPtr,System.Int64,System.IntPtr,Win32.IO.FilePointerMoveMethod)">
            <summary>
            Moves the file pointer of the specified file.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="liDistanceToMove">The number of bytes to move the file pointer. A positive value
            moves the pointer forward in the file and a negative value moves the file pointer backward.</param>
            <param name="lpNewFilePointer">A pointer to a <b>long</b> variable to receive the new file pointer.
            If this parameter is null (IntPtr.Zero), the new file pointer is not returned.</param>
            <param name="dwMoveMethod">The starting point for the file pointer move.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.SetFilePointerEx(System.IntPtr,System.Int64,System.Int64@,Win32.IO.FilePointerMoveMethod)">
            <summary>
            Moves the file pointer of the specified file.
            </summary>
            <param name="hFile">A handle to the file.</param>
            <param name="liDistanceToMove">The number of bytes to move the file pointer. A positive value
            moves the pointer forward in the file and a negative value moves the file pointer backward.</param>
            <param name="lpNewFilePointer">Rreceive the new file pointer.</param>
            <param name="dwMoveMethod">The starting point for the file pointer move.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.FileOperations.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Writes data to the specified file or input/output (I/O) device.
            </summary>
            <param name="hFile">Handle to the file or input/output (I/O) device.</param>
            <param name="lpBuffer">The buffer containing the data to be written.</param>
            <param name="nNumberOfBytesToWrite">The number of bytes to be written.</param>
            <param name="lpNumberOfBytesWritten">Receives the number of bytes written when using
            a synchronous <paramref name="hFile"/> parameter.</param>
            <param name="lpOverlapped">A pointer to a <see cref="T:System.Threading.NativeOverlapped"/> structure.
            Can be null (IntPtr.Zero).</param>
            <returns>
            <para>If the function succeeds, the return value is <b>true</b>.</para>
            <para>If the function fails, or is completing asynchronously, the return value is <b>false</b>.
            To get extended error information, call the <see cref="M:Win32.WinKernel.GetLastError"/> function.</para>
            <para><b>Note:</b> The <see cref="M:Win32.WinKernel.GetLastError"/> code <see cref="F:Win32.ERROR.IO_PENDING">
            ERROR_IO_PENDING</see> is not a failure; it designates the write operation is pending completion
            asynchronously.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.FileOperations.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Writes data to the specified file or input/output (I/O) device.
            </summary>
            <param name="hFile">Handle to the file or input/output (I/O) device.</param>
            <param name="lpBuffer">The buffer containing the data to be written.</param>
            <param name="nNumberOfBytesToWrite">The number of bytes to be written.</param>
            <param name="lpNumberOfBytesWritten">A pointer to a <b>uint</b> to receives the number
            of bytes written when using a synchronous <paramref name="hFile"/> parameter.
            Can be null (IntPtr.Zero), if <paramref name="lpOverlapped"/> is not null (IntPtr.Zero).</param>
            <param name="lpOverlapped">A pointer to a <see cref="T:System.Threading.NativeOverlapped"/> structure.
            Can be null (IntPtr.Zero).</param>
            <returns>
            <para>If the function succeeds, the return value is <b>true</b>.</para>
            <para>If the function fails, or is completing asynchronously, the return value is <b>false</b>.
            To get extended error information, call the <see cref="M:Win32.WinKernel.GetLastError"/> function.</para>
            <para><b>Note:</b> The <see cref="M:Win32.WinKernel.GetLastError"/> code <see cref="F:Win32.ERROR.IO_PENDING">
            ERROR_IO_PENDING</see> is not a failure; it designates the write operation is pending completion
            asynchronously.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.FileOperations.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.Threading.NativeOverlapped@)">
            <summary>
            Writes data to the specified file or input/output (I/O) device.
            </summary>
            <param name="hFile">Handle to the file or input/output (I/O) device.</param>
            <param name="lpBuffer">The buffer containing the data to be written.</param>
            <param name="nNumberOfBytesToWrite">The number of bytes to be written.</param>
            <param name="lpNumberOfBytesWritten">Receives the number of bytes written when using
            a synchronous <paramref name="hFile"/> parameter.</param>
            <param name="lpOverlapped">A <see cref="T:System.Threading.NativeOverlapped"/> structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <b>true</b>.</para>
            <para>If the function fails, or is completing asynchronously, the return value is <b>false</b>.
            To get extended error information, call the <see cref="M:Win32.WinKernel.GetLastError"/> function.</para>
            <para><b>Note:</b> The <see cref="M:Win32.WinKernel.GetLastError"/> code <see cref="F:Win32.ERROR.IO_PENDING">
            ERROR_IO_PENDING</see> is not a failure; it designates the write operation is pending completion
            asynchronously.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.FileOperations.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.Threading.NativeOverlapped@)">
            <summary>
            Writes data to the specified file or input/output (I/O) device.
            </summary>
            <param name="hFile">Handle to the file or input/output (I/O) device.</param>
            <param name="lpBuffer">The buffer containing the data to be written.</param>
            <param name="nNumberOfBytesToWrite">The number of bytes to be written.</param>
            <param name="lpNumberOfBytesWritten">A pointer to a <b>uint</b> to receives the number
            of bytes written when using a synchronous <paramref name="hFile"/> parameter.
            Can be null (IntPtr.Zero), if <paramref name="lpOverlapped"/> is not null (IntPtr.Zero).</param>
            <param name="lpOverlapped">A <see cref="T:System.Threading.NativeOverlapped"/> structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <b>true</b>.</para>
            <para>If the function fails, or is completing asynchronously, the return value is <b>false</b>.
            To get extended error information, call the <see cref="M:Win32.WinKernel.GetLastError"/> function.</para>
            <para><b>Note:</b> The <see cref="M:Win32.WinKernel.GetLastError"/> code <see cref="F:Win32.ERROR.IO_PENDING">
            ERROR_IO_PENDING</see> is not a failure; it designates the write operation is pending completion
            asynchronously.</para>
            </returns>
        </member>
        <member name="T:Win32.IO.FileFlagsAndAttributes">
            <summary>
            Used by <see cref="O:Wind32.File.CreateFile">CreateFile</see> as combined parameter for <b>FILE_FLAG_*</b>,
            <b>FILE_ATTRIBUTE_*</b> and <b>SECURITY_*</b>.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.READONLY">
            <summary>
            A file that is read-only. Applications can read the file, but cannot write to it or delete it.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.HIDDEN">
            <summary>
            Marks a file or directory as hidden.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.SYSTEM">
            <summary>
            A file or directory of the operating system.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.ARCHIVE">
            <summary>
            Used to mark file and directories for backup.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.NORMAL">
            <summary>
            A file that does not have other attributes set. This attribute is valid only when used alone.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.TEMPORARY">
            <summary>
            Marks a file as temporary storage. The system delays writing data to mass storage, if possible,
            since the file is most likely to be delete after use.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.OFFLINE">
            <summary>
            Marks a file that is moved to an offline storage and not immediately available.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.ENCRYPTED">
            <summary>
            Marks a file or directory that is encrypted.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.OPEN_REQUIRING_OPLOCK">
            <summary>
            The file is being opened and an opportunistic lock (oplock) on the file is being requested
            as a single atomic operation. The file system checks for oplocks before it performs the
            create operation, and will fail the create with a last error code of
            <see cref="F:Win32.ERROR.CANNOT_BREAK_OPLOCK">ERROR_CANNOT_BREAK_OPLOCK</see> if the result would
            be to break an existing oplock.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.OPEN_NO_RECALL">
            <summary>
            Used with remote storage systems. File data is requested, but it should stay in remote storage.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.OPEN_REPARSE_POINT">
            <summary>
            Disables reparse point processing and opens the reparse point itself, if one.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.SESSION_AWARE">
            <summary>
            The file or device is being opened with session awareness.
            </summary>
            <remarks>This flag is supported only on server editions of Windows.
            <b>Note: </b>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.POSIX_SEMANTICS">
            <summary>
            Use POSIX rules for file access.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.BACKUP_SEMANTICS">
            <summary>
            The file or directory is being opened or created for a backup or restore operation.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.DELETE_ON_CLOSE">
            <summary>
            The file is to be deleted immediately after it is closed.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.SEQUENTIAL_SCAN">
            <summary>
            Access is intended to be sequential from beginning to end. Hints the system for caching optimizations.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.RANDOM_ACCESS">
            <summary>
            Access is intended to be random. Hints the system for caching optimizations.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.NO_BUFFERING">
            <summary>
            The file or device is being opened with no system caching for data reads and writes.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.OVERLAPPED">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.WRITE_THROUGH">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to mass storage.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.ANONYMOUS">
            <summary>
            Impersonates a client at the Anonymous impersonation level.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.IDENTIFICATION">
            <summary>
            Impersonates a client at the Identification impersonation level.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.IMPERSONATION">
            <summary>
            Impersonate a client at the impersonation level. This is the default behavior
            if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.DELEGATION">
            <summary>
            Impersonates a client at the Delegation impersonation level.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.CONTEXT_TRACKING">
            <summary>
            The security tracking mode is dynamic. If this flag is not specified, the
            security tracking mode is static.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.EFFECTIVE_ONLY">
            <summary>
            <para>Only the enabled aspects of the client's security context are available
            to the server. If you do not specify this flag, all aspects of the client's
            security context are available.</para>
            <para>This allows the client to limit the groups and privileges that a server
            can use while impersonating the client.</para>
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.SQOS_PRESENT">
            <summary>
            Security quality of service flags.
            </summary>
        </member>
        <member name="F:Win32.IO.FileFlagsAndAttributes.VALID_SQOS_FLAGS">
            <summary>
            Bitmask for valid security quality of service flags.
            </summary>
        </member>
        <member name="T:Win32.IO.FileMode">
            <summary>
            Defines the file opening or creation actions.
            </summary>
        </member>
        <member name="F:Win32.IO.FileMode.CREATE_NEW">
            <summary>
            Creates a new file, only if it does not already exist.
            </summary>
        </member>
        <member name="F:Win32.IO.FileMode.CREATE_ALWAYS">
            <summary>
            Creates a new file, always.
            </summary>
        </member>
        <member name="F:Win32.IO.FileMode.OPEN_EXISTING">
            <summary>
            Opens a file or device, only if it exists.
            </summary>
        </member>
        <member name="F:Win32.IO.FileMode.OPEN_ALWAYS">
            <summary>
            Opens a file, always.
            </summary>
        </member>
        <member name="F:Win32.IO.FileMode.TRUNCATE_EXISTING">
            <summary>
            Opens a file and truncates it so that its size is zero bytes, only if it exists.
            </summary>
        </member>
        <member name="T:Win32.IO.FILE_ATTRIBUTE">
            <summary>
            Defines the file attributes and flags used by some file functions.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.READONLY">
            <summary>
            A file that is read-only. Applications can read the file, but cannot write to it or delete it.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.HIDDEN">
            <summary>
            Marks a file or directory as hidden.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.SYSTEM">
            <summary>
            A file or directory of the operating system.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.DIRECTORY">
            <summary>
            Identifies a directory.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.ARCHIVE">
            <summary>
            Used to mark file and directories for backup.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.DEVICE">
            <summary>
            This value is reserved for system use.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.NORMAL">
            <summary>
            A file that does not have other attributes set. This attribute is valid only when used alone.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.TEMPORARY">
            <summary>
            Marks a file as temporary storage. The system delays writing data to mass storage, if possible,
            since the file is most likely to be delete after use.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.SPARSE_FILE">
            <summary>
            Marks a file as sparse file.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.REPARSE_POINT">
            <summary>
            Marks a file or directory as associated with a reparse point, or marks a file as a symbolic link.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.COMPRESSED">
            <summary>
            Marks a file or directory that is compressed.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.OFFLINE">
            <summary>
            Marks a file that is moved to an offline storage and not immediately available.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.NOT_CONTENT_INDEXED">
            <summary>
            Marks a file or directory that does not take part in content indexing.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.ENCRYPTED">
            <summary>
            Marks a file or directory that is encrypted.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.INTEGRITY_STREAM">
            <summary>
            Marks a file or directory that is configured with integrity. Supported only on ReFS volumes.
            </summary>
            <remarks><b>Note:</b> This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.VIRTUAL">
            <summary>
            This value is reserved for system use.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_ATTRIBUTE.NO_SCRUB_DATA">
            <summary>
            The user data stream not to be read by the background data integrity scanner
            (AKA scrubber). When set on a directory it only provides inheritance. This
            flag is only supported on Storage Spaces and ReFS volumes. It is not included
            in an ordinary directory listing.
            </summary>
            <remarks><b>Note:</b> This flag is not supported until Windows 8 and Windows Server 2012.</remarks>
        </member>
        <member name="T:Win32.IO.FILE_FLAG">
            <summary>
            Defines the file flags used by some file functions.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.OPEN_REQUIRING_OPLOCK">
            <summary>
            The file is being opened and an opportunistic lock (oplock) on the file is being requested
            as a single atomic operation. The file system checks for oplocks before it performs the
            create operation, and will fail the create with a last error code of
            <see cref="F:Win32.ERROR.CANNOT_BREAK_OPLOCK">ERROR_CANNOT_BREAK_OPLOCK</see> if the result would
            be to break an existing oplock.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.FIRST_PIPE_INSTANCE">
            <summary>
            If you attempt to create multiple instances of a pipe with this flag, creation of the
            first instance succeeds, but creation of the next instance fails with
            <see cref="F:Win32.ERROR.ACCESS_DENIED">ERROR_ACCESS_DENIED</see>.
            </summary>
            <remarks><b>Note: </b> This flag is not supported until Windows 2000 SP2 and Windows XP.</remarks>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.OPEN_NO_RECALL">
            <summary>
            Used with remote storage systems. File data is requested, but it should stay in remote storage.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.OPEN_REPARSE_POINT">
            <summary>
            Disables reparse point processing and opens the reparse point itself, if one.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.SESSION_AWARE">
            <summary>
            The file or device is being opened with session awareness.
            </summary>
            <remarks>This flag is supported only on server editions of Windows.
            <b>Note: </b>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.POSIX_SEMANTICS">
            <summary>
            Use POSIX rules for file access.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.BACKUP_SEMANTICS">
            <summary>
            The file or directory is being opened or created for a backup or restore operation.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.DELETE_ON_CLOSE">
            <summary>
            The file is to be deleted immediately after it is closed.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.SEQUENTIAL_SCAN">
            <summary>
            Access is intended to be sequential from beginning to end. Hints the system for caching optimizations.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.RANDOM_ACCESS">
            <summary>
            Access is intended to be random. Hints the system for caching optimizations.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.NO_BUFFERING">
            <summary>
            The file or device is being opened with no system caching for data reads and writes.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.OVERLAPPED">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_FLAG.WRITE_THROUGH">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to mass storage.
            </summary>
        </member>
        <member name="T:Win32.IO.FILE_SHARE">
            <summary>
            Defines the file access flags used by some file functions.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_SHARE.NONE">
            <summary>
            Prevents other processes from opening a file or device if they request delete, read, or write access.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_SHARE.READ">
            <summary>
            Enables subsequent open operations on a file or device to request read access.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_SHARE.WRITE">
            <summary>
            Enables subsequent open operations on a file or device to request write access.
            </summary>
        </member>
        <member name="F:Win32.IO.FILE_SHARE.DELETE">
            <summary>
            Enables subsequent open operations on a file or device to request delete access.
            </summary>
        </member>
        <member name="T:Win32.IO.SECURITY">
            <summary>
            Defines security quality of service flags.
            </summary>
        </member>
        <member name="F:Win32.IO.SECURITY.ANONYMOUS">
            <summary>
            Impersonates a client at the Anonymous impersonation level.
            </summary>
        </member>
        <member name="F:Win32.IO.SECURITY.IDENTIFICATION">
            <summary>
            Impersonates a client at the Identification impersonation level.
            </summary>
        </member>
        <member name="F:Win32.IO.SECURITY.IMPERSONATION">
            <summary>
            Impersonate a client at the impersonation level. This is the default behavior
            if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.
            </summary>
        </member>
        <member name="F:Win32.IO.SECURITY.DELEGATION">
            <summary>
            Impersonates a client at the Delegation impersonation level.
            </summary>
        </member>
        <member name="F:Win32.IO.SECURITY.CONTEXT_TRACKING">
            <summary>
            The security tracking mode is dynamic. If this flag is not specified, the
            security tracking mode is static.
            </summary>
        </member>
        <member name="F:Win32.IO.SECURITY.EFFECTIVE_ONLY">
            <summary>
            <para>Only the enabled aspects of the client's security context are available
            to the server. If you do not specify this flag, all aspects of the client's
            security context are available.</para>
            <para>This allows the client to limit the groups and privileges that a server
            can use while impersonating the client.</para>
            </summary>
        </member>
        <member name="T:Win32.IO.Filesystem">
            <summary>
            Class for file system operations.
            </summary>
        </member>
        <member name="M:Win32.IO.Filesystem.CreateHardLink(System.String,System.String,System.IntPtr)">
            <summary>
            Creates a hard link between an existing file and a new file.
            </summary>
            <param name="lpFileName">The name of the new file.</param>
            <param name="lpExistingFileName">The name of the existing file.</param>
            <param name="p">Reserved; must be <b>0</b> (zero).</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.Filesystem.CreateHardLink(System.String,System.String)">
            <summary>
            Creates a hard link between an existing file and a new file.
            </summary>
            <param name="newFileName">The name of the new file.</param>
            <param name="existingFileName">The name of the existing file.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME">
            <summary>
            Defines the usage of "Human Interface Devices" on Usage Page 5 (Game Controls)
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.UNDEFINED">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.D3_GAME">
            <summary>
            3D Game Controller
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.PINBALL">
            <summary>
            Pinball Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN">
            <summary>
            Gun Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.POINT_OF_VIEW">
            <summary>
            Point of View
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.TURN">
            <summary>
            Turn Right/Left
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.PITCH">
            <summary>
            Pitch Right/Left
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.ROLL">
            <summary>
            Roll Forward/Backward
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.MOVE_RIGHT_LEFT">
            <summary>
            Move Right/Left
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.MOVE_FORWARD_BACKWARD">
            <summary>
            Move Forward/Backward
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.MOVE_UP_DOWN">
            <summary>
            Move Up/Down
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.LEAN_RIGHT_LEFT">
            <summary>
            Lean Right/Left
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.LEAN_FORWARD_BACKWARD">
            <summary>
            Lean Forward/Backward
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.HEIGHT_OF_POV">
            <summary>
            Height of POV
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.FLIPPER">
            <summary>
            Flipper
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.SECONDARY_FLIPPER">
            <summary>
            Secondary Flipper
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.BUMP">
            <summary>
            Bump
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.NEW_GAME">
            <summary>
            New Game
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.SHOOT_BALL">
            <summary>
            Shoot Ball	
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.PLAYER">
            <summary>
            Player
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_BOLT">
            <summary>
            Gun Bolt
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_CLIP">
            <summary>
            Gun Clip
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_SELECTOR">
            <summary>
            Gun Selector
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_SINGLE_SHOT">
            <summary>
            Gun Single Shot
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_BURST">
            <summary>
            Gun Burst
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_AUTOMATIC">
            <summary>
            Gun Automatic
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GUN_SAFETY">
            <summary>
            Gun Safety
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GAMEPAD_FIRE_JUMP">
            <summary>
            Gamepad Fire/Jump
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GAME.GAMEPAD_TRIGGER">
            <summary>
            Gamepad Trigger
            </summary>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE">
            <summary>
            Defines the usage of "Human Interface Devices" on Usage Page 6 (Generic Device Controls)
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.UNIDENTIFIED">
            <summary>
            Unidentified
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.BATTERY_STRENGTH">
            <summary>
            Battery Strength
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.WIRELESS_CHANNEL">
            <summary>
            Wireless Channel
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.WIRELESS_ID">
            <summary>
            Wireless ID
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.DISCOVER_WIRELESS_CONTROL">
            <summary>
            Discover Wireless Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.SECURITY_CODE_CHARACTER_ENTERED">
            <summary>
            Security Code Character Entered
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.SECURITY_CODE_CHARACTER_ERASED">
            <summary>
            Security Code Character Erased
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DEVICE.SECURITY_CODE_CLEARED">
            <summary>
            Security Code Cleared
            </summary>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT">
            <summary>
            Defines the usage of "Human Interface Devices" on Usage Page 4 (Sport Controls)
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.UNIDENTIFIED">
            <summary>
            Unidentified
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.BASEBALL_BAT">
            <summary>
            Baseball Bat
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.GOLF_CLUB">
            <summary>
            Golf Club
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.ROWING_MACHINE">
            <summary>
            Rowing Machine
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.TREADMILL">
            <summary>
            Treadmill
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.OAR">
            <summary>
            Oar
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.SLOPE">
            <summary>
            Slope
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.RATE">
            <summary>
            Rate
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_SPEED">
            <summary>
            Stick Speed
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_FACE_ANGLE">
            <summary>
            Stick Face Angle
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_HEEL_TOE">
            <summary>
            Stick Heel/Toe
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_FOLLOW_THROUGH">
            <summary>
            Stick Follow Through
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_TEMPO">
            <summary>
            Stick Tempo
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_TYPE">
            <summary>
            Stick Type
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.STICK_HEIGHT">
            <summary>
            Stick Height
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.PUTTER">
            <summary>
            Putter
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_1">
            <summary>
            1 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_2">
            <summary>
            2 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_3">
            <summary>
            3 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_4">
            <summary>
            4 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_5">
            <summary>
            5 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_6">
            <summary>
            6 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_7">
            <summary>
            7 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_8">
            <summary>
            8 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_9">
            <summary>
            9 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_10">
            <summary>
            10 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.IRON_11">
            <summary>
            11 Iron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.SAND_WEDGE">
            <summary>
            Sand Wedge
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.LOFT_WEDGE">
            <summary>
            Loft Wedge
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.POWER_WEDGE">
            <summary>
            Power Wedge
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.WOOD_1">
            <summary>
            1 Wood
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.WOOD_3">
            <summary>
            3 Wood
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.WOOD_5">
            <summary>
            5 Wood
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.WOOD_7">
            <summary>
            7 Wood
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SPORT.WOOD_9">
            <summary>
            9 Wood
            </summary>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR">
            <summary>
            Defines the usage of "Human Interface Devices" on Usage Page 3 (VR Controls)
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.UNIDENTIFIED">
            <summary>
            Unidentified
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.BELT">
            <summary>
            Belt
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.BODY_SUIT">
            <summary>
            Body Suit
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.FLEXOR">
            <summary>
            Flexor
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.GLOVE">
            <summary>
            Glove
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.HEAD_TRACKER">
            <summary>
            Head Tracker
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.HEAD_MOUNTED_DISPLAY">
            <summary>
            Head Mounted Display
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.HAND_TRACKER">
            <summary>
            Hand Tracker
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.OCULOMETER">
            <summary>
            Oculometer
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.VEST">
            <summary>
            Vest
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.ANIMATRONIC_DEVICE">
            <summary>
            Animatronic Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.STEREO_ENABLE">
            <summary>
            Stereo Enable
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_VR.DISPLAY_ENABLE">
            <summary>
            Display Enable
            </summary>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP">
            <summary>
            Defines the usage of "Human Interface Devices" on Usage Page 1 (Generic Desktop Controls)
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.UNDEFINED">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.POINTER">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.MOUSE">
            <summary>
            Mouse
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.JOYSTICK">
            <summary>
            Joystick
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.GAMEPAD">
            <summary>
            Game Pad
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.KEYBOARD">
            <summary>
            Keyboard
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.KEYPAD">
            <summary>
            Keypad
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.MULTIAXIS_CONTROLLER">
            <summary>
            Multi-axis Controller
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.TABLET_PC_SYSTEM_CONTROLS">
            <summary>
            Tablet PC System Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.RX">
            <summary>
            Rx
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.RY">
            <summary>
            Ry
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.Rz">
            <summary>
            Rz
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SLIDER">
            <summary>
            Slider
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.DIAL">
            <summary>
            Dial
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.WHEEL">
            <summary>
            Wheel
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.HAT_SWITCH">
            <summary>
            Hat switch
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.COUNTED_BUFFER">
            <summary>
            Counted Buffer
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.BYTE_COUNT">
            <summary>
            Byte Count
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.MOTION_WAKEUP">
            <summary>
            Motion Wakeup
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.START">
            <summary>
            Strart
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SELECT">
            <summary>
            Select
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VX">
            <summary>
            Vx
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VY">
            <summary>
            Vy
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VZ">
            <summary>
            Vz
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VBRX">
            <summary>
            Vbrx
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VBRY">
            <summary>
            Vbry
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VBRZ">
            <summary>
            Vbrz
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.VNO">
            <summary>
            Vno
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.FEATURE_NOTIFICATION">
            <summary>
            Feature Notification
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.RESOLUTION_MULTIPLIER">
            <summary>
            Resolution Multiplier
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_CONTROL">
            <summary>
            System Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_POWER_DOWN">
            <summary>
            System Power Down
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_SLEEP">
            <summary>
            System Sleep
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_WAKE_UP">
            <summary>
            System Wake Up
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_CONTEXT_MENU">
            <summary>
            System Context Menu
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MAIN_MENU">
            <summary>
            System Main Menu
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_APP_MENU">
            <summary>
            System App Menu
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_HELP">
            <summary>
            System Menu Help
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_EXIT">
            <summary>
            System Menu Exit
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_Select">
            <summary>
            System Menu Select
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_RIGHT">
            <summary>
            System Menu Right
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_LEFT">
            <summary>
            System Menu Left
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_UP">
            <summary>
            System Menu Up
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_MENU_DOWN">
            <summary>
            System Menu Down
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_COLD_RESTART">
            <summary>
            System Cold Restart
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_WARM_RESTART">
            <summary>
            System Warm Restart
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.DPAD_UP">
            <summary>
            Direction Pad Up
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.DPAD_DOWN">
            <summary>
            Direction Pad Down
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.DPAD_RIGHT">
            <summary>
            Direction Pad Right
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.DPAD_LEFT">
            <summary>
            Direction Pad Left
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DOCK">
            <summary>
            System Dock
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_UNDOCK">
            <summary>
            System Undock
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_SETUP">
            <summary>
            System Setup
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_BREAK">
            <summary>
            System Break
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DEBUGGER_BREAK">
            <summary>
            System Debugger Break
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.APPLICATION_BREAK">
            <summary>
            Application Break
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.APPLICATION_DEBUGGER_BREAK">
            <summary>
            Application Debugger Break
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_SPEAKER_MUTE">
            <summary>
            System Speaker Mute
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_HIBERNATE">
            <summary>
            System Hibernate
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_INVERT">
            <summary>
            System Display Invert
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_INTERNAL">
            <summary>
            System Display Internal
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_EXTERNAL">
            <summary>
            System Display External
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_BOTH">
            <summary>
            System Display Both
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_DUAL">
            <summary>
            System Display Dual
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_TOGGLE">
            <summary>
            System Display Toggle Int/Ext
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_SWAP">
            <summary>
            System Display Swap Primary/Secondary
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_GENERIC_DESKTOP.SYSTEM_DISPLAY_LCD_AUTOSCALE">
            <summary>
            System Display LCD Autoscale
            </summary>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE">
            <summary>
            Defines the usage pages for "Human Interface Devices".
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.UNDEFINED">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.GENERIC_DESKTOP">
            <summary>
            Generic Desktop Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.SIMULATION">
            <summary>
            Simulation Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.VR">
            <summary>
            VR Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.SPORT">
            <summary>
            Sport Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.GAME">
            <summary>
            Game Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.GENERIC_DEVICE">
            <summary>
            Generic Device Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.KEYBOARD">
            <summary>
            Keyboard/Keypad
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.LEDS">
            <summary>
            LEDs
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.BUTTON">
            <summary>
            Button
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.ORDINAL">
            <summary>
            Ordinal
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.TELEPHONY">
            <summary>
            Telephony
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.CONSUMER">
            <summary>
            Consumer
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.DIGITIZER">
            <summary>
            Digitizer
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.PID">
            <summary>
            USB Physical Interface Devices
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.UNICODE">
            <summary>
            Unicode
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.ALPHANUMERIC">
            <summary>
            Alphanumeric Display
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.MEDICAL">
            <summary>
            Medical Instruments
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.MONITOR">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.MONITOR_ENUMERATED_VALUES">
            <summary>
            Monitor Enumerated Values
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.VESA_VIRTUAL">
            <summary>
            VESA Virtual Controls
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.VESA_COMMAND">
            <summary>
            VESA Command
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.POWER">
            <summary>
            Power Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.BATTERY">
            <summary>
            Battery System
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.POWER_PAGE_3">
            <summary>
            Power Page 3
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.POWER_PAGE_4">
            <summary>
            Power Page 4
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.BAR_CODE_SCANNER">
            <summary>
            Bar Code Scanner
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.SCALE">
            <summary>
            Scale Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.MSR">
            <summary>
            Magnetic Stripe Reading (MSR) Devices
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.POINT_OF_SALE">
            <summary>
            Reserved Point of Sale
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.CAMERA">
            <summary>
            Camera Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.ARCADE">
            <summary>
            Arcade Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.VENDOR_DEFINED_FIRST">
            <summary>
            First allowed Vendor-defined usage page
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_PAGE.VENDOR_DEFINED_LAST">
            <summary>
            Last allowed Vendor-defined usage page
            </summary>
        </member>
        <member name="T:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION">
            <summary>
            Defines the usage of "Human Interface Devices" on Usage Page 2 (Simulation Controls)
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.UNDEFINED">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FLIGHT">
            <summary>
            Flight Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.AUTOMOBILE">
            <summary>
            Automobile Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.TANK">
            <summary>
            Tank Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.SPACESHIP">
            <summary>
            Spaceship Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.SUBMARINE">
            <summary>
            Submarine Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.SAILING">
            <summary>
            Sailing Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.MOTORCYCLE">
            <summary>
            Motorcycle Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.SPORTS">
            <summary>
            Sports Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.AIRPLANE">
            <summary>
            Airplane Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.HELICOPTER">
            <summary>
            Helicopter Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.MAGIC_CARPET">
            <summary>
            Magic Carpet Simulation Device
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.BICYCLE">
            <summary>
            Bicycle
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FLIGHT_CONTROL_STICK">
            <summary>
            Flight Control Stick
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FLIGHT_STICK">
            <summary>
            Flight Stick
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.CYCLIC_CONTROL">
            <summary>
            Cyclic Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.CYCLIC_TRIM">
            <summary>
            Cyclic Trim
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FLIGHT_YOKE">
            <summary>
            Flight Yoke
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.TRACK_CONTROL">
            <summary>
            Track Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.AILERON">
            <summary>
            Aileron
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.AILERON_TRIM">
            <summary>
            Aileron Trim
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.ANTI_TORQUE_CONTROL">
            <summary>
            Anti-Torque Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.AUTOPILOT_ENABLE">
            <summary>
            Autopilot Enable
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.CHAFF_RELEASE">
            <summary>
            Chaff Release
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.COLLECTIVE_CONTROL">
            <summary>
            Collective Control
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.DIVE_BRAKE">
            <summary>
            Dive Brake
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.ELECTRONIC_COUNTER_MEASURES">
            <summary>
            Electronic Counter Measures
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.ELEVATOR">
            <summary>
            Elevator
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.ELEVATOR_TRIM">
            <summary>
            Elevator Trim
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.RUDDER">
            <summary>
            Rudder
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.THROTTLE">
            <summary>
            Throttle
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FLIGHT_COMMUNICATION">
            <summary>
            Flight Communication
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FLARE_RELEASE">
            <summary>
            Flare Release
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.LANDING_GEAR">
            <summary>
            Landing Gear
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.TOE_BRAKE">
            <summary>
            Toe Brake
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.TRIGGER">
            <summary>
            Trigger
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.WEAPONS_ARM">
            <summary>
            Weapons Arm
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.WEAPONS_SELECT">
            <summary>
            Weapons Select
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.WING_FLAPS">
            <summary>
            Wing Flaps
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.ACCELERATOR">
            <summary>
            Accelerator
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.BRAKE">
            <summary>
            Brake
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.CLUTCH">
            <summary>
            Clutch
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.SHIFTER">
            <summary>
            Shifter
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.STEERING">
            <summary>
            Steering
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.TURRET_DIRECTION">
            <summary>
            Turret Direction
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.BARREL_ELEVATION">
            <summary>
            Barrel Elevation
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.DIVE_PLANE">
            <summary>
            Dive Plane
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.BALLAST">
            <summary>
            Ballast
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.BICYCLE_CRANK">
            <summary>
            Bicycle Crank
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.HANDLE_BARS">
            <summary>
            Handle Bars
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.FRONT_BRAKE">
            <summary>
            Front Brake
            </summary>
        </member>
        <member name="F:Win32.IO.HumanInterfaceDevices.HID_USAGE_SIMULATION.REAR_BRAKE">
            <summary>
            Rear Brake
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.GIDC">
            <summary>
            Defines the allowed values for the <b>wParam</b> parameter of a
            <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> message.
            To get the <b>wParam</b> value, use the <see cref="M:Win32.IO.RawInput.RawInput.GET_RAWINPUT_DEVICE_CHANGE_CODE_WPARAM(System.UIntPtr)"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.GIDC.ARRIVAL">
            <summary>
            A new device has been added to the system.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.GIDC.REMOVAL">
            <summary>
            A device has been removed from the system.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RawInput">
            <summary>
            Class for managing human interface devices.
            </summary>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.DefRawInputProc(System.IntPtr[],System.Int32,System.UInt32)">
            <summary>
            Calls the default raw input procedure to provide default processing for any raw input messages that an application
            does not process. This function ensures that every message is processed. <b>DefRawInputProc</b> is called with the
            same parameters received by the window procedure.
            </summary>
            <param name="paRawInput">An array of pointer to <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.</param>
            <param name="nInput">The number of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures pointed to by <paramref name="paRawInput"/> array.</param>
            <param name="cbSizeHeader">The size, in bytes, of the <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/> structure.</param>
            <returns>If successful, the function returns <b>S_OK</b> (IntPtr.Zero). Otherwise it returns an error value.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            Performs a buffered read of the raw input data.
            </summary>
            <remarks>
            <para>Using <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/>, the raw input data is buffered in the array of
            <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures. For an unbuffered read, listen to
            <see cref="F:Win32.WM.INPUT">WM_INPUT</see> and use the message details to read the raw input data.
            </para>
            <para>The <see cref="M:Win32.IO.RawInput.RawInput.NEXTRAWINPUTBLOCK(Win32.IO.RawInput.RAWINPUT*)"/> methode allows an application to traverse an array
            of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.</para>
            <para><b>Note:</b> To get the correct size of the raw input buffer, do not use 
            <paramref name="pcbSize"/>, use <paramref name="pcbSize"/>*8 instead.</para>
            </remarks>
            <param name="pData">A pointer to a buffer of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures that contain the
            raw input data. If <b>null</b> (IntPtr.Zero), the minimum required buffer, in bytes, is returned
            in <paramref name="pcbSize"/>.</param>
            <param name="pcbSize">The size, in bytes, of a <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure.</param>
            <param name="cbSizeHeader">The size, in bytes, of the <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/> structure.</param>
            <returns>
            <para>If <paramref name="pData"/> is <b>null</b> and the function is successful, the return value
            is zero (0). If <paramref name="pData"/> is not <b>null</b> and the function is successful, the return
            value is the number of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures written to <paramref name="pData"/>.</para>
            <para>If an error occurs, the return value is <see cref="F:System.UInt32.MaxValue"/> (-1). Call
            <see cref="M:Win32.WinKernel.GetLastError"/> for the error code.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputData(System.IntPtr,Win32.IO.RawInput.RID,System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            Retrieves the raw input from the specified device.
            </summary>
            <remarks>
            <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputData(System.IntPtr,Win32.IO.RawInput.RID,System.IntPtr,System.UInt32@,System.UInt32)"/> gets the raw input one <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure at a time.
            In contrast, <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/> gets an array of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.
            </remarks>
            <param name="hRawInput">A handle to the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure. This comes from the
            <b>lParam</b> in <see cref="F:Win32.WM.INPUT">WM_INPUT</see>.</param>
            <param name="uiCommand">The command flag. See <see cref="T:Win32.IO.RawInput.RID"/> for more information.</param>
            <param name="pData">A pointer to the data that comes from the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure.
            This depends on the value of <paramref name="uiCommand"/>. If pData is <b>null</b> (IntPtr.Zero),
            the required size of the buffer is returned in <paramref name="pcbSize"/>.</param>
            <param name="pcbSize">The size, in bytes, of the data in <paramref name="pData"/>.</param>
            <param name="cbSizeHeader">The size, in bytes, of the <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/> structure.</param>
            <returns>
            <para>If <paramref name="pData"/> is <b>null</b> (IntPtr.Zero) and the function is successful,
            the return value is zero (0). If <paramref name="pData"/> is not <b>null</b> (IntPtr.Zero) and the
            function is successful, the return value is the number of bytes copied into pData.</para>
            <para>If there is an error, the return value is <see cref="F:System.UInt32.MaxValue"/> (-1).</para>
            </returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceInfo(System.IntPtr,Win32.IO.RawInput.RIDI,System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves information about the raw input device.
            (Use only in environments that have <see cref="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize"/> == 2.)
            </summary>
            <param name="hDevice">A handle to the raw input device. This comes from the <b>lParam</b> of the
            <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message, from the <see cref="F:Win32.IO.RawInput.RAWINPUTHEADER.hDevice">hDevice</see>
            member of <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/>, or from <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceList(Win32.IO.RawInput.RAWINPUTDEVICELIST[],System.UInt32@,System.UInt32)"/>. It can also be
            <b>null</b> (IntPtr.Zero) if an application inserts input data, for example, by using <b>SendInput</b>.</param>
            <param name="uiCommand">Specifies what data will be returned in <paramref name="pData"/>. See
            <see cref="T:Win32.IO.RawInput.RIDI"/> for more information.</param>
            <param name="pData">A pointer to a buffer that contains the information specified by <paramref name="uiCommand"/>.
            If <paramref name="uiCommand"/> is <see cref="F:Win32.IO.RawInput.RIDI.DEVICEINFO"/>, set the <see cref="F:Win32.IO.RawInput.RID_DEVICE_INFO.cbSize">cbSize</see>
            member of <see cref="T:Win32.IO.RawInput.RID_DEVICE_INFO"/> to <b>sizeof(RID_DEVICE_INFO)</b> before calling <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/>.</param>
            <param name="pcbSize">The size, in bytes or characters (if <paramref name="uiCommand"/> is <see cref="F:Win32.IO.RawInput.RIDI.DEVICENAME"/>),
            of the data in <paramref name="pData"/>.</param>
            <returns>
            <para>If successful, this function returns a non-negative number indicating the number of bytes or characters
            (if <paramref name="uiCommand"/> is <see cref="F:Win32.IO.RawInput.RIDI.DEVICENAME"/>) copied to <paramref name="pData"/>.</para>
            <para>If <paramref name="pData"/> is not large enough for the data, the function returns
            <see cref="F:System.UInt32.MaxValue"/> (-1). If <paramref name="pData"/> is <b>null</b> (IntPtr.Zero), the function
            returns a value of zero (0). In both of these cases, <paramref name="pcbSize"/> is set to the minimum size
            required for the <paramref name="pData"/> buffer.</para>
            <para>Call <see cref="M:Win32.WinKernel.GetLastError"/> to identify any other errors.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceList(Win32.IO.RawInput.RAWINPUTDEVICELIST[],System.UInt32@,System.UInt32)">
            <summary>
            Enumerates the raw input devices attached to the system.
            </summary>
            <remarks>
            <para>The devices returned from this function are the mouse, the keyboard, and other Human Interface Device (HID) devices.</para>
            <para>To get more detailed information about the attached devices, call <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/> using
            the <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICELIST.hDevice">hDevice</see> from <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICELIST"/>.</para>
            </remarks>
            <param name="pRawInputDeviceList">An array of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICELIST"/> structures for the devices attached to
            the system. If <b>null</b>, the number of devices are returned in <paramref name="puiNumDevices"/>.</param>
            <param name="puiNumDevices">If <paramref name="pRawInputDeviceList"/> is <b>null</b>, the function
            populates this variable with the number of devices attached to the system; otherwise, this variable specifies
            the number of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICELIST"/> structures that can be contained in the buffer to which
            <paramref name="pRawInputDeviceList"/> points. If this value is less than the number of devices attached to the
            system, the function returns the actual number of devices in this variable and fails with
            <see cref="F:Win32.ERROR.INSUFFICIENT_BUFFER"/>.</param>
            <param name="cbSize">The size of a <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICELIST"/> structure, in bytes.</param>
            <returns>
            <para>If the function is successful, the return value is the number of devices stored in the buffer pointed
            to by <paramref name="pRawInputDeviceList"/>.</para>
            <para>On any other error, the function returns <see cref="F:System.UInt32.MaxValue"/> (-1) and
            <see cref="M:Win32.WinKernel.GetLastError"/> returns the error indication.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRegisteredRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32@,System.UInt32)">
            <summary>
            Retrieves the information about the raw input devices for the current application.
            </summary>
            <remarks>
            To receive raw input from a device, an application must register it by using <see cref="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/>.
            </remarks>
            <param name="pRawInputDevices">An array of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structures for the application.</param>
            <param name="puiNumDevices">The number of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structures in <paramref name="pRawInputDevices"/>.</param>
            <param name="cbSize">The size, in bytes, of a <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure.</param>
            <returns>
            <para>If successful, the function returns a non-negative number that is the number of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/>
            structures written to the buffer.</para>
            <para>If the <paramref name="pRawInputDevices"/> buffer is too small or <b>null</b> (IntPtr.Zero), the function sets
            the last error as <see cref="F:Win32.ERROR.INSUFFICIENT_BUFFER"/>, returns <see cref="F:System.UInt32.MaxValue"/> (-1), and sets
            <paramref name="puiNumDevices"/> to the required number of devices. If the function fails for any other reason, it
            returns <see cref="F:System.UInt32.MaxValue"/> (-1). For more details, call <see cref="M:Win32.WinKernel.GetLastError"/>.</para>
            </returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <remarks>
            <para>To receive <see cref="F:Win32.WM.INPUT">WM_INPUT</see> messages, an application must first register the raw input
            devices using <see cref="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/>. By default, an application does not receive raw input.</para>
            <para>To receive <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> messages, an application must
            specify the <see cref="F:Win32.IO.RawInput.RIDEV.DEVNOTIFY"/> flag for each device class that is specified by the
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage">usUsagePage</see> and <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage">usUsage</see>
            fields of the <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure. By default, an application does not receive
            <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> notifications for raw input device arrival and removal.</para>
            <para>If a <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure has the <see cref="F:Win32.IO.RawInput.RIDEV.REMOVE"/> flag set and the
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget">hwndTarget</see> parameter is not set to <b>null</b> (IntPtr.Zero),
            then parameter validation will fail.</para>
            </remarks>
            <param name="pRawInputDevices">An array of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structures that represent the
            devices that supply the raw input.</param>
            <param name="uiNumDevices">The number of <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structures pointed to by
            <paramref name="pRawInputDevices"/>.</param>
            <param name="cbSize">The size, in bytes, of a <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure.</param>
            <returns><b>true</b> if the function succeeds; otherwise, <b>false</b>. If the function fails, call
            <see cref="M:Win32.WinKernel.GetLastError"/> for more information.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.NEXTRAWINPUTBLOCK(Win32.IO.RawInput.RAWINPUT*)">
            <summary>
            Retrieves the location of the next structure in an array of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.
            </summary>
            <remarks>This macro is called repeatedly to traverse an array of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.</remarks>
            <param name="ptr">A pointer to a structure in an array of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.</param>
            <returns>The return value is a pointer to the next structure in the array of <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structures.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GET_RAWINPUT_CODE_WPARAM(System.UIntPtr)">
            <summary>
            Use this methode to get the input code of a <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message from wParam.
            </summary>
            <param name="wParam">The <b>wParam</b> of a <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message.</param>
            <returns>The input code of a <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message as <see cref="T:Win32.IO.RawInput.RIM"/>.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GET_RAWINPUT_DEVICE_CHANGE_CODE_WPARAM(System.UIntPtr)">
            <summary>
            Use this methode to get the input code of a <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> message from wParam.
            </summary>
            <param name="wParam">The <b>wParam</b> of a <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> message.</param>
            <returns>The input code of a <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> message as <see cref="T:Win32.IO.RawInput.GIDC"/>.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceName(System.IntPtr)">
            <summary>
            Retrieves the device name of a raw input device.
            </summary>
            <param name="hDevice">A handle to the raw input device. This comes from the <b>lParam</b> of the
            <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message, from the <see cref="F:Win32.IO.RawInput.RAWINPUTHEADER.hDevice">hDevice</see>
            member of <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/>, or from <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceList(Win32.IO.RawInput.RAWINPUTDEVICELIST[],System.UInt32@,System.UInt32)"/>. It can also be
            <b>null</b> (IntPtr.Zero) if an application inserts input data, for example, by using <b>SendInput</b>.</param>
            <returns>The device name of the raw input device.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceInfo(System.IntPtr)">
            <summary>
            Retrieves information about the raw input device.
            </summary>
            <param name="hDevice">A handle to the raw input device. This comes from the <b>lParam</b> of the
            <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message, from the <see cref="F:Win32.IO.RawInput.RAWINPUTHEADER.hDevice">hDevice</see>
            member of <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/>, or from <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceList(Win32.IO.RawInput.RAWINPUTDEVICELIST[],System.UInt32@,System.UInt32)"/>. It can also be
            <b>null</b> (IntPtr.Zero) if an application inserts input data, for example, by using <b>SendInput</b>.</param>
            <returns>The information about the raw input device.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputDevicePreparsedData(System.IntPtr)">
            <summary>
            Retrieves the preparsed data of a raw input device.
            </summary>
            <param name="hDevice">A handle to the raw input device. This comes from the <b>lParam</b> of the
            <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message, from the <see cref="F:Win32.IO.RawInput.RAWINPUTHEADER.hDevice">hDevice</see>
            member of <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/>, or from <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputDeviceList(Win32.IO.RawInput.RAWINPUTDEVICELIST[],System.UInt32@,System.UInt32)"/>. It can also be
            <b>null</b> (IntPtr.Zero) if an application inserts input data, for example, by using <b>SendInput</b>.</param>
            <returns>The preparsed data of raw input device.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.EnumerateDevices">
            <summary>
            Returns a list of raw input device handles and raw input device types.
            </summary>
            <returns>The list of raw input device handles and raw input device types.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevice(Win32.IO.RawInput.RAWINPUTDEVICE)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <remarks>
            <para>To receive <see cref="F:Win32.WM.INPUT">WM_INPUT</see> messages, an application must first register the raw input
            devices using <see cref="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/>. By default, an application does not receive raw input.</para>
            <para>To receive <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> messages, an application must
            specify the <see cref="F:Win32.IO.RawInput.RIDEV.DEVNOTIFY"/> flag for each device class that is specified by the
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage">usUsagePage</see> and <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage">usUsage</see>
            fields of the <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure. By default, an application does not receive
            <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> notifications for raw input device arrival and removal.</para>
            <para>If a <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure has the <see cref="F:Win32.IO.RawInput.RIDEV.REMOVE"/> flag set and the
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget">hwndTarget</see> parameter is not set to <b>null</b> (IntPtr.Zero),
            then parameter validation will fail.</para>
            </remarks>
            <param name="pRawInputDevice">A <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE"/> structure that represent the
            devices that supply the raw input.</param>
            <returns><b>true</b> if the function succeeds; otherwise, <b>false</b>. If the function fails, call
            <see cref="M:Win32.WinKernel.GetLastError"/> for more information.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevice(Win32.IO.RawInput.RIDEV,System.UInt16,System.UInt16)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <remarks>
            <para>To receive <see cref="F:Win32.WM.INPUT">WM_INPUT</see> messages, an application must first register the raw input
            devices using <see cref="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/>. By default, an application does not receive raw input.</para>
            <para>To receive <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> messages, an application must
            specify the <see cref="F:Win32.IO.RawInput.RIDEV.DEVNOTIFY"/> flag for each device class that is specified by 
            <paramref name="usagePage"/> and <paramref name="usage"/> arguments. By default, an application does not receive
            <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> notifications for raw input device arrival and removal.</para>
            </remarks>
            <param name="flags">The flags as <see cref="T:Win32.IO.RawInput.RIDEV"/>.</param>
            <param name="usagePage">An <b>ushort</b> specifiing the usage page.</param>
            <param name="usage">An <b>ushort</b> specifiing the usage.</param>
            <returns><b>true</b> if the function succeeds; otherwise, <b>false</b>. If the function fails, call
            <see cref="M:Win32.WinKernel.GetLastError"/> for more information.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevice(Win32.IO.RawInput.RIDEV,System.UInt16,System.UInt16,System.IntPtr)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <remarks>
            <para>To receive <see cref="F:Win32.WM.INPUT">WM_INPUT</see> messages, an application must first register the raw input
            devices using <see cref="M:Win32.IO.RawInput.RawInput.RegisterRawInputDevices(Win32.IO.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/>. By default, an application does not receive raw input.</para>
            <para>To receive <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> messages, an application must
            specify the <see cref="F:Win32.IO.RawInput.RIDEV.DEVNOTIFY"/> flag for each device class that is specified by 
            <paramref name="usagePage"/> and <paramref name="usage"/> arguments. By default, an application does not receive
            <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> notifications for raw input device arrival and removal.</para>
            <para>If the <see cref="F:Win32.IO.RawInput.RIDEV.REMOVE"/> flag set and <paramref name="hwndTarget"/> is not set to <b>null</b> (IntPtr.Zero),
            then parameter validation will fail.</para>
            </remarks>
            <param name="flags">The flags as <see cref="T:Win32.IO.RawInput.RIDEV"/>.</param>
            <param name="usagePage">An <b>ushort</b> specifiing the usage page.</param>
            <param name="usage">An <b>ushort</b> specifiing the usage.</param>
            <param name="hwndTarget">The handle of the window, which shall receive the <see cref="F:Win32.WM.INPUT">WM_INPUT</see>
            and <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see> messages.</param>
            <returns><b>true</b> if the function succeeds; otherwise, <b>false</b>. If the function fails, call
            <see cref="M:Win32.WinKernel.GetLastError"/> for more information.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputDataHeader(System.IntPtr)">
            <summary>
            Retrieves the raw input header from the specified device.
            </summary>
            <remarks>See <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputData(System.IntPtr,Win32.IO.RawInput.RID,System.IntPtr,System.UInt32@,System.UInt32)"/> for more information.</remarks>
            <param name="hRawInput">A handle to the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure. This comes from the
            <b>lParam</b> in <see cref="F:Win32.WM.INPUT">WM_INPUT</see>.</param>
            <returns>The raw input header as <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/>.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInput.GetRawInputData``1(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Retrieves the raw input data from the specified device.
            </summary>
            <remarks>See <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputData(System.IntPtr,Win32.IO.RawInput.RID,System.IntPtr,System.UInt32@,System.UInt32)"/> for more information.</remarks>
            <typeparam name="T">A <b>struct</b> that will be the type of the returned data.</typeparam>
            <param name="hRawInput">A handle to the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure. This comes from the
            <b>lParam</b> in <see cref="F:Win32.WM.INPUT">WM_INPUT</see>.</param>
            <param name="size">Size of the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure. Can be queried using
            <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputDataHeader(System.IntPtr)"/>; the size is stored in <see cref="F:Win32.IO.RawInput.RAWINPUTHEADER.dwSize"/>.</param>
            <param name="offset">An offset to the start of the data, to be returned, in the resulting data of a
            <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputData(System.IntPtr,Win32.IO.RawInput.RID,System.IntPtr,System.UInt32@,System.UInt32)"/> call, without the <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/>, which is omitted anyway.</param>
            <returns>The raw input header as specified when called.</returns>
        </member>
        <member name="T:Win32.IO.RawInput.KEYBOARD">
            <summary>
            Defines the scan code from the key depression.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.KEYBOARD.OVERRUN_MAKE_CODE">
            <summary>
            The scan code for keyboard overrun.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.MOUSE">
            <summary>
            Defines the mouse state.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.MOUSE.MOVE_RELATIVE">
            <summary>
            Mouse movement data is relative to the last mouse position.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.MOUSE.MOVE_ABSOLUTE">
            <summary>
            Mouse movement data is based on absolute position.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.MOUSE.VIRTUAL_DESKTOP">
            <summary>
            Mouse coordinates are mapped to the virtual desktop (for a multiple monitor system).
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.MOUSE.ATTRIBUTES_CHANGED">
            <summary>
            Mouse attributes changed; application needs to query the mouse attributes.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.MOUSE.MOVE_NOCOALESCE">
            <summary>
            Do not coalesce mouse moves.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RawInputProcessingHelper`1">
            <summary>
            Helps to determine the device handler for incomming <see cref="F:Win32.WM.INPUT">WM_INPUT</see> messages.
            </summary>
            <remarks>
            The following code shows a simple usage of two devices. Creates an instance of <see cref="T:Win32.IO.RawInput.RawInputProcessingHelper`1"/>,
            adds handler, updates the devices lists by timer and handles incoming <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message by
            overloading <c>WndProc</c> method.
            <code>
            public partial class MyForm : Form
            {
            	enum MyDevices
            	{
            		None=0,
            		SpaceMouse=1,
            		SoftMouse3D=2,
            	}
            
            	const uint VendorID_Logitech=0x046d; // SpaceMouses, SpaceNavigators, etc.
            	const uint VendorID_GGS=0x241f; // Softmouse 3D
            
            	RawInputProcessingHelper&lt;MyDevices&gt; rawInputProcessingHelper=new RawInputProcessingHelper&lt;MyDevices&gt;();
            
            	public MyForm()
            	{
            		InitializeComponent();
            
            		// Add handler to processing helper
            		rawInputProcessingHelper.AddHandler(MyDevices.SpaceMouse, (info) =&gt; { return info.dwType==RIM_TYPE.HID&amp;&amp;info.hid.usUsage==HID_USAGE_GENERIC_DESKTOP.MULTIAXIS_CONTROLLER&amp;&amp;info.hid.usUsagePage==HID_USAGE_PAGE.GENERIC_DESKTOP&amp;&amp;info.hid.dwVendorId==VendorID_Logitech; });
            		rawInputProcessingHelper.AddHandler(MyDevices.SoftMouse3D, (info) =&gt; { return info.dwType==RIM_TYPE.HID&amp;&amp;info.hid.usUsage==HID_USAGE_GENERIC_DESKTOP.JOYSTICK&amp;&amp;info.hid.usUsagePage==HID_USAGE_PAGE.GENERIC_DESKTOP&amp;&amp;info.hid.dwVendorId==VendorID_GGS; });
            
            		// Inital update of devices
            		rawInputProcessingHelper.UpdateDevices();
            
            		// Register the supported devices
            		bool err;
            		err=RawInput.RegisterRawInputDevice(RIDEV.NONE, HID_USAGE_PAGE.GENERIC_DESKTOP, HID_USAGE_GENERIC_DESKTOP.MULTIAXIS_CONTROLLER); // SpaceMouse
            		err=RawInput.RegisterRawInputDevice(RIDEV.NONE, HID_USAGE_PAGE.GENERIC_DESKTOP, HID_USAGE_GENERIC_DESKTOP.JOYSTICK); // SoftMouse3D
            	}
            
            	[PermissionSet(SecurityAction.Demand, Name="FullTrust")]
            	protected override void WndProc(ref Message m)
            	{
            		if(m.Msg==WM.INPUT)
            		{
            			uint size;
            			switch(rawInputProcessingHelper.GetHandlerFromWmInput(m.LParam, out size))
            			{
            				case MyDevices.SpaceMouse: ProcessInputSpaceMouse(m, size); break;
            				case MyDevices.SoftMouse3D: ProcessInputSoftMouse3D(m, size); break;
            				default: break;
            			}
            		}
            
            		base.WndProc(ref m);
            	}
            
            	// Use a timer to update the devices.
            	private void timerUpdateDevices_Tick(object sender, EventArgs e)
            	{
            		rawInputProcessingHelper.UpdateDevices();
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.AddHandler(`0,System.Func{Win32.IO.RawInput.RID_DEVICE_INFO,System.Boolean})">
            <summary>
            Adds a new handler for input devices detection.
            </summary>
            <param name="id">An instance of the identifier.</param>
            <param name="func">A function to determine, if the device can be handled by the entity represented by <paramref name="id"/>.</param>
            <returns><b>true</b> if the handler is replaced; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.RemoveHandler(`0)">
            <summary>
            Removes a handler for input devices detection.
            </summary>
            <param name="id">An instance of the identifier.</param>
            <returns><b>true</b> if the handler is successfully found and removed; otherwise, <b>false</b>.
            This method returns <b>false</b> if <paramref name="id"/> is not found.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.GetHandlerFromWmInput(System.IntPtr)">
            <summary>
            Identifies the handler for a device.
            </summary>
            <param name="lParam">The handle to a raw input dataset.</param>
            <returns>The id of the handler.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.GetHandlerFromWmInput(System.IntPtr,Win32.IO.RawInput.RAWINPUTHEADER@)">
            <summary>
            Identifies the handler for a device.
            </summary>
            <param name="lParam">The handle to a raw input dataset.</param>
            <param name="rih">Returns the <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/> of the raw input dataset.</param>
            <returns>The id of the handler.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.GetHandlerFromWmInput(System.IntPtr,System.UInt32@)">
            <summary>
            Identifies the handler for a device.
            </summary>
            <param name="lParam">The handle to a raw input dataset.</param>
            <param name="size">Returns the size of the raw input dataset.</param>
            <returns>The id of the handler.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.GetHandler(System.IntPtr)">
            <summary>
            Identifies the handler for a device.
            </summary>
            <param name="device">The handle to the device.</param>
            <returns>The id of the handler.</returns>
        </member>
        <member name="M:Win32.IO.RawInput.RawInputProcessingHelper`1.UpdateDevices">
            <summary>
            Enumerate devices and determines the handlers/ids.
            </summary>
            <remarks>To avoid conflicks between threads accessing the object, this method
            should only be call from one thread, maybe in regular intervals (not to short
            ones; maybe every 10 sec).
            </remarks>
            <returns>The number of handled devices.</returns>
        </member>
        <member name="T:Win32.IO.RawInput.RAWHID">
            <summary>
            Describes the format of the raw input from a Human Interface Device (HID).
            </summary>
            <remarks>
            Each <see cref="F:Win32.WM.INPUT">WM_INPUT</see> can indicate several inputs, but all of the
            inputs come from the same HID. The size of the raw data array is
            <see cref="F:Win32.IO.RawInput.RAWHID.dwSizeHid"/>*<see cref="F:Win32.IO.RawInput.RAWHID.dwCount"/>.
            </remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RAWHID.dwSizeHid">
            <summary>
            The size, in bytes, of each HID input in the raw data array that follows this structure.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWHID.dwCount">
            <summary>
            The number of HID inputs in the raw data array that follows this structure.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWHID.bRawData">
            <summary>
            Here the raw data array starts. But since we can't define structs with variable length,
            you'll have to access the raw data array directly.
            Here only the first byte is available.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWHID.SIZE">
            <summary>
            Size of <see cref="T:Win32.IO.RawInput.RAWHID"/> in bytes.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWINPUT">
            <summary>
            Contains the raw input from a device.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWINPUT.DATA">
            <summary>
            Union of <see cref="T:Win32.IO.RawInput.RAWMOUSE"/>, <see cref="T:Win32.IO.RawInput.RAWKEYBOARD"/> and <see cref="T:Win32.IO.RawInput.RAWHID"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUT.DATA.mouse">
            <summary>
            If the data comes from a mouse, this is the raw input data.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUT.DATA.keyboard">
            <summary>
            If the data comes from a keyboard, this is the raw input data.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUT.DATA.hid">
            <summary>
            If the data comes from an HID, this is the raw input data.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUT.header">
            <summary>
            The raw input data header.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUT.data">
            <summary>
            The raw input data.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWINPUTDEVICE">
            <summary>
            Defines information for the raw input devices.
            </summary>
            <remarks>
            <para>
            If <see cref="F:Win32.IO.RawInput.RIDEV.NOLEGACY">RIDEV_NOLEGACY</see> is set for a mouse or a keyboard, the system does not
            generate any legacy message for that device for the application. For example, if the mouse TLC is set with
            <see cref="F:Win32.IO.RawInput.RIDEV.NOLEGACY">RIDEV_NOLEGACY</see>, <see cref="F:Win32.WM.LBUTTONDOWN">WM_LBUTTONDOWN</see> and
            related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with
            <see cref="F:Win32.IO.RawInput.RIDEV.NOLEGACY">RIDEV_NOLEGACY</see>, <see cref="F:Win32.WM.KEYDOWN">WM_KEYDOWN</see> and related
            legacy keyboard messages are not generated.
            </para>
            <para>
            If <see cref="F:Win32.IO.RawInput.RIDEV.REMOVE">RIDEV_REMOVE</see> is set and the <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget"/> member is not set
            to <b>null</b> (IntPtr.Zero), then parameter validation will fail.
            </para>
            </remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage">
            <summary>
            Top level collection Usage page for the raw input device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage">
            <summary>
            Top level collection Usage for the raw input device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTDEVICE.dwFlags">
            <summary>
            Mode flag that specifies how to interpret the information provided by
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage">usagePage</see> and <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage">usage</see>.
            It can be zero (the default). By default, the operating system sends raw input from devices with the
            specified top level collection (TLC) to the registered application as long as it has the window focus.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget">
            <summary>
            A handle to the target window. If <b>null</b> (IntPtr.Zero) it follows the keyboard focus.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWINPUTDEVICELIST">
            <summary>
            Contains information about a raw input device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTDEVICELIST.hDevice">
            <summary>
            A handle to the raw input device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTDEVICELIST.dwType">
            <summary>
            The type of device.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWINPUTHEADER">
            <summary>
            Contains the header information that is part of the raw input data.
            </summary>
            <remarks>To get more information on the device, use <see cref="F:Win32.IO.RawInput.RAWINPUTHEADER.hDevice"/> in a call to
            <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/>.</remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTHEADER.dwType">
            <summary>
            The type of raw input.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTHEADER.dwSize">
            <summary>
            The size, in bytes, of the entire input packet of data. This includes <see cref="T:Win32.IO.RawInput.RAWINPUT"/>
            plus possible extra input reports in the <see cref="T:Win32.IO.RawInput.RAWHID"/> variable length array.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTHEADER.hDevice">
            <summary>
            A handle to the device generating the raw input data.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTHEADER.wParam">
            <summary>
            The value passed in the <b>wParam</b> parameter of the <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWINPUTHEADER.SIZE">
            <summary>
            Size of <see cref="T:Win32.IO.RawInput.RAWINPUTHEADER"/> in bytes.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RIM">
            <summary>
            Defines the allowed values for the <b>wParam</b> parameter of a
            <see cref="F:Win32.WM.INPUT">WM_INPUT</see> message.
            To get the <b>wParam</b> value, use the <see cref="M:Win32.IO.RawInput.RawInput.GET_RAWINPUT_CODE_WPARAM(System.UIntPtr)"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIM.INPUT">
            <summary>
            The input is in the regular message flow, the app is required to call
            <b>DefWindowProc</b> so that the system can perform clean ups.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIM.INPUTSINK">
            <summary>
            The input is sink only. The app is expected to behave nicely and the
            app is required to call <b>DefWindowProc</b> so that the system can
            perform clean ups.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RIM_TYPE">
            <summary>
            Defined the type of the raw input or the input device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIM_TYPE.MOUSE">
            <summary>
            Raw input comes from the mouse.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIM_TYPE.KEYBOARD">
            <summary>
            Raw input comes from the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIM_TYPE.HID">
            <summary>
            Raw input comes from some device that is not a keyboard or a mouse.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWKEYBOARD">
            <summary>
            Contains information about the state of the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.MakeCode">
            <summary>
            The scan code from the key depression. The scan code for keyboard overrun is
            <see cref="F:Win32.IO.RawInput.KEYBOARD.OVERRUN_MAKE_CODE">KEYBOARD_OVERRUN_MAKE_CODE</see>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.Flags">
            <summary>
            Flags for scan code information.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.Reserved">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.VKey">
            <summary>
            Windows message compatible virtual-key code. For more information, see Virtual Key Codes.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.Message">
            <summary>
            The corresponding window message, for example <see cref="F:Win32.WM.KEYDOWN">WM_KEYDOWN</see>,
            <see cref="F:Win32.WM.SYSKEYDOWN">WM_SYSKEYDOWN</see>, and so forth.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.ExtraInformation">
            <summary>
            The device-specific additional information for the event.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWKEYBOARD.SIZE">
            <summary>
            Size of <see cref="T:Win32.IO.RawInput.RAWKEYBOARD"/> in bytes.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RAWMOUSE">
            <summary>
            Contains information about the state of the mouse.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.usFlags">
            <summary>
            The mouse state.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.ulButtons">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.usButtonFlags">
            <summary>
            The transition state of the mouse buttons.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.usButtonData">
            <summary>
            If <see cref="F:Win32.IO.RawInput.RAWMOUSE.usButtonFlags"/> is <see cref="F:Win32.IO.RawInput.RI_MOUSE.WHEEL">RI_MOUSE_WHEEL</see>,
            this member is a signed value that specifies the wheel delta.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.ulRawButtons">
            <summary>
            The raw state of the mouse buttons.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.lLastX">
            <summary>
            The motion in the X direction. This is signed relative motion or absolute motion,
            depending on the value of <see cref="F:Win32.IO.RawInput.RAWMOUSE.usFlags"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.lLastY">
            <summary>
            The motion in the Y direction. This is signed relative motion or absolute motion,
            depending on the value of <see cref="F:Win32.IO.RawInput.RAWMOUSE.usFlags"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.ulExtraInformation">
            <summary>
            The device-specific additional information for the event.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RAWMOUSE.SIZE">
            <summary>
            Size of <see cref="T:Win32.IO.RawInput.RAWMOUSE"/> in bytes.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RID">
            <summary>
            Defines the command flag for <see cref="M:Win32.IO.RawInput.RawInput.GetRawInputData(System.IntPtr,Win32.IO.RawInput.RID,System.IntPtr,System.UInt32@,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID.HEADER">
            <summary>
            Get the header information from the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID.INPUT">
            <summary>
            Get the raw data from the <see cref="T:Win32.IO.RawInput.RAWINPUT"/> structure.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RIDEV">
            <summary>
            Mode flag that specifies how to interpret the information provided by
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage"/> and <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.NONE">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.REMOVE">
            <summary>
            If set, this removes the top level collection from the inclusion list. This tells the operating
            system to stop reading from a device which matches the top level collection.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.EXCLUDE">
            <summary>
            If set, this specifies the top level collections to exclude when reading a complete usage page.
            This flag only affects a TLC (top level collection) whose usage page is already specified with
            <see cref="F:Win32.IO.RawInput.RIDEV.PAGEONLY">RIDEV_PAGEONLY</see>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.PAGEONLY">
            <summary>
            If set, this specifies all devices whose top level collection is from the specified
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage"/>. Note that <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage"/>
            must be zero. To exclude a particular top level collection, use
            <see cref="F:Win32.IO.RawInput.RIDEV.EXCLUDE">RIDEV_EXCLUDE</see>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.NOLEGACY">
            <summary>
            If set, this prevents any devices specified by <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsagePage"/>
            or <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.usUsage"/> from generating legacy messages. This is only
            for the mouse and keyboard. See <see cref="T:Win32.IO.RawInput.RAWINPUTDEVICE">Remarks</see>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.INPUTSINK">
            <summary>
            If set, this enables the caller to receive the input even when the caller is not in the
            foreground. Note that <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget"/> must be specified.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.CAPTUREMOUSE">
            <summary>
            If set, the mouse button click does not activate the other window.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.NOHOTKEYS">
            <summary>
            If set, the application-defined keyboard device hotkeys are not handled. However, the system
            hotkeys; for example, [ALT]+[TAB] and [CTRL]+[ALT]+[DEL], are still handled. By default, all
            keyboard hotkeys are handled. <see cref="F:Win32.IO.RawInput.RIDEV.NOHOTKEYS">RIDEV_NOHOTKEYS</see> can be specified
            even if <see cref="F:Win32.IO.RawInput.RIDEV.NOLEGACY">RIDEV_NOLEGACY</see> is not specified and
            <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget"/> is <b>null</b> (IntPtr.Zero).
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.APPKEYS">
            <summary>
            If set, the application command keys are handled. <see cref="F:Win32.IO.RawInput.RIDEV.APPKEYS">RIDEV_APPKEYS</see>
            can be specified only if <see cref="F:Win32.IO.RawInput.RIDEV.NOLEGACY">RIDEV_NOLEGACY</see> is specified for a
            keyboard device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.EXINPUTSINK">
            <summary>
            If set, this enables the caller to receive input in the background only if the foreground
            application does not process it. In other words, if the foreground application is not registered
            for raw input, then the background application that is registered will receive the input.
            </summary>
            <remarks><b>Windows XP:</b> This flag is not supported until Windows Vista</remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.DEVNOTIFY">
            <summary>
            If set, this enables the caller to receive <see cref="F:Win32.WM.INPUT_DEVICE_CHANGE">WM_INPUT_DEVICE_CHANGE</see>
            notifications for device arrival and device removal. This works only when <see cref="F:Win32.IO.RawInput.RIDEV.INPUTSINK"/>
            is also set (and of course <see cref="F:Win32.IO.RawInput.RAWINPUTDEVICE.hwndTarget"/> must be specified).
            </summary>
            <remarks><b>Windows XP:</b> This flag is not supported until Windows Vista</remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RIDEV.EXMODEMASK">
            <summary>
            Usage: mode&amp;RIDEV.EXMODEMASK.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RIDI">
            <summary>
            Defines the command flag for <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDI.DEVICENAME">
            <summary>
            <para><b>pData</b> parameter of <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/> points to a string
            that contains the device name.</para>
            <para>For this <b>uiCommand</b> only, the value in <b>pcbSize</b> of
            <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/>is the character count (not the byte count).</para>
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDI.DEVICEINFO">
            <summary>
            <b>pData</b> parameter of <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/> points to an
            <see cref="T:Win32.IO.RawInput.RID_DEVICE_INFO"/> structure.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RIDI.PREPARSEDDATA">
            <summary>
            <b>pData</b> parameter of <see cref="O:Win32.RawInput.RawInput.GetRawInputDeviceInfo"/> points to the previously
            parsed data.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RID_DEVICE_INFO">
            <summary>
            Defines the raw input data coming from any device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO.cbSize">
            <summary>
            The size, in bytes, of the <see cref="T:Win32.IO.RawInput.RID_DEVICE_INFO"/> structure.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO.dwType">
            <summary>
            The type of raw input data.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO.mouse">
            <summary>
            If <see cref="F:Win32.IO.RawInput.RID_DEVICE_INFO.dwType"/> is <see cref="F:Win32.IO.RawInput.RIM_TYPE.MOUSE"/>, this is the <see cref="T:Win32.IO.RawInput.RID_DEVICE_INFO_MOUSE"/>
            structure that defines the mouse.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO.keyboard">
            <summary>
            If <see cref="F:Win32.IO.RawInput.RID_DEVICE_INFO.dwType"/> is <see cref="F:Win32.IO.RawInput.RIM_TYPE.KEYBOARD"/>, this is the <see cref="T:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD"/>
            structure that defines the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO.hid">
            <summary>
            If <see cref="F:Win32.IO.RawInput.RID_DEVICE_INFO.dwType"/> is <see cref="F:Win32.IO.RawInput.RIM_TYPE.HID"/>, this is the <see cref="T:Win32.IO.RawInput.RID_DEVICE_INFO_HID"/>
            structure that defines the HID device.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RID_DEVICE_INFO_HID">
            <summary>
            Defines the raw input data coming from the specified Human Interface Device (HID).
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_HID.dwVendorId">
            <summary>
            The vendor identifier for the HID.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_HID.dwProductId">
            <summary>
            The product identifier for the HID.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_HID.dwVersionNumber">
            <summary>
            The version number for the HID.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_HID.usUsagePage">
            <summary>
            The top-level collection Usage Page for the device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_HID.usUsage">
            <summary>
            The top-level collection Usage for the device.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD">
            <summary>
            Defines the raw input data coming from the specified keyboard.
            </summary>
            <remarks>For the keyboard, the Usage Page is 1 and the Usage is 6.</remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD.dwType">
            <summary>
            The type of the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD.dwSubType">
            <summary>
            The subtype of the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD.dwKeyboardMode">
            <summary>
            The scan code mode.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD.dwNumberOfFunctionKeys">
            <summary>
            The number of function keys on the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD.dwNumberOfIndicators">
            <summary>
            The number of LED indicators on the keyboard.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_KEYBOARD.dwNumberOfKeysTotal">
            <summary>
            The total number of keys on the keyboard.
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RID_DEVICE_INFO_MOUSE">
            <summary>
            Defines the raw input data coming from the specified mouse.
            </summary>
            <remarks>For the mouse, the Usage Page is 1 and the Usage is 2.</remarks>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_MOUSE.dwId">
            <summary>
            The identifier of the mouse device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_MOUSE.dwNumberOfButtons">
            <summary>
            The number of buttons for the mouse.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_MOUSE.dwSampleRate">
            <summary>
            The number of data points per second. This information may not be applicable for every mouse device.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RID_DEVICE_INFO_MOUSE.fHasHorizontalWheel">
            <summary>
            <para><b>true</b> if the mouse has a wheel for horizontal scrolling; otherwise, <b>false</b>.</para>
            <para><b>Windows XP:</b> This member is only supported starting with Windows Vista.</para>
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RI_KEY">
            <summary>
            Defines flags for scan code information.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_KEY.MAKE">
            <summary>
            The key is down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_KEY.BREAK">
            <summary>
            The key is up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_KEY.E0">
            <summary>
            This is the left version of the key.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_KEY.E1">
            <summary>
            This is the right version of the key.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_KEY.TERMSRV_SET_LED">
            <summary>
            [Please fill, if someone knows what this value does.]
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_KEY.TERMSRV_SHADOW">
            <summary>
            [Please fill, if someone knows what this value does.]
            </summary>
        </member>
        <member name="T:Win32.IO.RawInput.RI_MOUSE">
            <summary>
            Defines the transition state of the mouse buttons.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.LEFT_BUTTON_DOWN">
            <summary>
            Left button changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.LEFT_BUTTON_UP">
            <summary>
            Left button changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.RIGHT_BUTTON_DOWN">
            <summary>
            Right button changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.RIGHT_BUTTON_UP">
            <summary>
            Right button changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.MIDDLE_BUTTON_DOWN">
            <summary>
            Middle button changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.MIDDLE_BUTTON_UP">
            <summary>
            Middle button changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.XBUTTON1_DOWN">
            <summary>
            XBUTTON1 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.XBUTTON1_UP">
            <summary>
            XBUTTON1 changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.XBUTTON2_DOWN">
            <summary>
            XBUTTON2 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.XBUTTON2_UP">
            <summary>
            XBUTTON2 changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.WHEEL">
            <summary>
            Raw input comes from a mouse wheel. The wheel delta is stored in <see cref="F:Win32.IO.RawInput.RAWMOUSE.usButtonData"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.HORIZONTAL_WHEEL">
            <summary>
            Raw input comes from a horizontal mouse wheel. The wheel delta is stored in <see cref="F:Win32.IO.RawInput.RAWMOUSE.usButtonData"/>.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_1_DOWN">
            <summary>
            Button 1 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_1_UP">
            <summary>
            Button 1 changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_2_DOWN">
            <summary>
            Button 2 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_2_UP">
            <summary>
            Button 2 changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_3_DOWN">
            <summary>
            Button 3 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_3_UP">
            <summary>
            Button 3 changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_4_DOWN">
            <summary>
            Button 4 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_4_UP">
            <summary>
            Button 4 changed to up.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_5_DOWN">
            <summary>
            Button 5 changed to down.
            </summary>
        </member>
        <member name="F:Win32.IO.RawInput.RI_MOUSE.BUTTON_5_UP">
            <summary>
            Button 5 changed to up.
            </summary>
        </member>
        <member name="T:Win32.MultiMedia.Joystick">
            <summary>
            http://www.activevb.de/cgi-bin/apiwiki/JOYINFOEX
            http://msdn.microsoft.com/en-us/library/dd757108%28VS.85%29.aspx
            http://www.activevb.de/cgi-bin/apiwiki/JoyGetPosEx
            http://msdn.microsoft.com/en-us/library/dd757112(VS.85).aspx
            </summary>
        </member>
        <member name="M:Win32.MultiMedia.Joystick.GetJoysticks">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.R">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.U">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.V">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.ButtonPressed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button11">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button12">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button13">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button14">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button15">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button16">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button17">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button18">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button19">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button20">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button21">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button22">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button23">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button24">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button25">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button26">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button27">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button28">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button29">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button30">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button31">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Button32">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.POV">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.POVAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.HasZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.HasR">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.HasU">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.HasV">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.HasPOV">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.IsPOV4DIR">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.IsPOVCTS">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.NumberOfAxes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.Joystick.NumberOfButtons">
            <summary>
            
            </summary>
        </member>
        <member name="M:Win32.MultiMedia.Joystick.#ctor(System.UInt32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Win32.MultiMedia.Joystick.GetState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Win32.MultiMedia.JoystickData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Win32.MultiMedia.JoystickData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Win32.MultiMedia.JoystickData.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.NumberOfAxes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.NumberOfButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.R">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.U">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.V">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.ButtonPressed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button11">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button12">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button13">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button14">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button15">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button16">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button17">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button18">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button19">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button20">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button21">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button22">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button23">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button24">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button25">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button26">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button27">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button28">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button29">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button30">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button31">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.Button32">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.POV">
            <summary>
            
            </summary>
        </member>
        <member name="P:Win32.MultiMedia.JoystickData.POVAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Win32.MultiMedia.WinMM">
            <summary>
            Windows Multimedia binding for .NET, implementing Windows-specific multimedia functionality.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_SYNC">
            <summary>
            Synchronous playback of a sound event. <b>PlaySound</b> returns after the sound event completes.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_ASYNC">
            <summary>
            The sound is played asynchronously and <b>PlaySound</b> returns immediately after beginning the sound.
            To terminate an asynchronously played waveform sound, call <b>PlaySound</b> with <i>sound</i> set to NULL.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_NODEFAULT">
            <summary>
            No default sound event is used. If the sound cannot be found, <b>PlaySound</b>
            returns silently without playing the default sound.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_MEMORY">
            <summary>
            A sound event's file is loaded in RAM. The parameter specified by <i>sound</i>
            must point to an image of a sound in memory.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_LOOP">
            <summary>
            The sound plays repeatedly until <b>PlaySound</b> is called again with the <i>sound</i> parameter set to NULL.
            You must also specify the <see cref="F:Win32.MultiMedia.WinMM.SND_ASYNC" /> flag to indicate an asynchronous sound event.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_NOSTOP">
            <summary>
            <para>
            The specified sound event will yield to another sound event that is already playing.  If a sound cannot be
            played because the resource needed to generate that sound is busy playing another sound, the function
            immediately returns FALSE without playing the requested sound.
            </para>
            <para>
            If this flag is not specified, <b>PlaySound</b> attempts to stop the currently
            playing sound so that the device can be used to play the new sound.
            </para>
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_NOWAIT">
            <summary>
            If the driver is busy, return immediately without playing the sound.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_ALIAS">
            <summary>
            The <i>sound</i> parameter is a system-event alias in the registry or the WIN.INI
            file. Do not use with either <see cref="F:Win32.MultiMedia.WinMM.SND_FILENAME" /> or
            <see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" />.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_ALIAS_ID">
            <summary>
            The <i>sound</i> parameter is a predefined sound identifier.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_FILENAME">
            <summary>
            The <i>sound</i> parameter is a filename.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_RESOURCE">
            <summary>
            The <i>sound</i> parameter is a resource identifier; <i>mod</i> must identify the
            instance that contains the resource.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_PURGE">
            <summary>
            <para>
            Sounds are to be stopped for the calling task. If <i>sound</i> is not NULL, all instances of the specified
            sound are stopped. If <i>sound</i> is NULL, all sounds that are playing on behalf of the calling task are stopped.
            </para>
            <para>
            You must also specify the instance handle to stop <see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" />
            events.
            </para>
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.SND_APPLICATION">
            <summary>
            The sound is played using an application-specific association.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.TIMERR_BASE">
            <summary>
            Timer base identifier.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.TIMERR_NOERROR">
            <summary>
            Successful.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.TIMERR_NOCANDO">
            <summary>
            Resolution specified is out of range.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON1">
            <summary>
            Joystick button 1
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON2">
            <summary>
            Joystick button 2
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON3">
            <summary>
            Joystick button 3
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON4">
            <summary>
            Joystick button 4
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON5">
            <summary>
            Joystick button 5
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON6">
            <summary>
            Joystick button 6
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON7">
            <summary>
            Joystick button 7
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON8">
            <summary>
            Joystick button 8
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON9">
            <summary>
            Joystick button 9
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON10">
            <summary>
            Joystick button 10
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON11">
            <summary>
            Joystick button 11
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON12">
            <summary>
            Joystick button 12
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON13">
            <summary>
            Joystick button 13
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON14">
            <summary>
            Joystick button 14
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON15">
            <summary>
            Joystick button 15
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON16">
            <summary>
            Joystick button 16
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON17">
            <summary>
            Joystick button 17
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON18">
            <summary>
            Joystick button 18
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON19">
            <summary>
            Joystick button 19
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON20">
            <summary>
            Joystick button 20
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON21">
            <summary>
            Joystick button 21
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON22">
            <summary>
            Joystick button 22
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON23">
            <summary>
            Joystick button 23
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON24">
            <summary>
            Joystick button 24
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON25">
            <summary>
            Joystick button 25
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON26">
            <summary>
            Joystick button 26
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON27">
            <summary>
            Joystick button 27
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON28">
            <summary>
            Joystick button 28
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON29">
            <summary>
            Joystick button 29
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON30">
            <summary>
            Joystick button 30
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON31">
            <summary>
            Joystick button 31
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_BUTTON32">
            <summary>
            Joystick button 32
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_HASZ">
            <summary>
            Joystick has z-coordinate information.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_HASR">
            <summary>
            Joystick has rudder (fourth axis) information.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_HASU">
            <summary>
            Joystick has u-coordinate (fifth axis) information.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_HASV">
            <summary>
            Joystick has v-coordinate (sixth axis) information.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_HASPOV">
            <summary>
            Joystick has point-of-view information.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_POV4DIR">
            <summary>
            Joystick point-of-view supports discrete values (centered, forward, backward, left, and right).
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS_POVCTS">
            <summary>
            Joystick point-of-view supports continuous degree bearings.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNX">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNZ">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNR">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNU">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNV">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNPOV">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNBUTTONS">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNRAWDATA">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNPOVCTS">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNCENTERED">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_USEDEADZONE">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_RETURNALL">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READALWAYS">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READXYONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READ3">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READ4">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READXONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READYONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READ5">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READ6">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READZONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READRONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READUONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_CAL_READVONLY">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_POVCENTERED">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_POVFORWARD">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_POVRIGHT">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_POVBACKWARD">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOY_POVLEFT">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_BASE">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_NOERROR">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_ERROR">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_BADDEVICEID">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_NOTENABLED">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_ALLOCATED">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALHANDLE">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_NOMEM">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_NOTSUPPORTED">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_BADERRNUM">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALFLAG">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MMSYSERR_LASTERROR">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYERR_NOERROR">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYERR_PARMS">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYERR_NOCANDO">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYERR_UNPLUGGED">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MM_JOY1MOVE">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MM_JOY2MOVE">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MM_JOY1ZMOVE">
            <summary></summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.MM_JOY2ZMOVE">
            <summary></summary>
        </member>
        <member name="T:Win32.MultiMedia.WinMM.JOYCAPS">
            <summary>
            The JOYCAPS structure contains information about the joystick capabilities.
            </summary>
            <seealso cref="T:Win32.MultiMedia.WinMM.JOYINFO"/>
            <seealso cref="T:Win32.MultiMedia.WinMM.JOYINFOEX"/>
            <seealso cref="M:Win32.MultiMedia.WinMM.joySetCapture(System.IntPtr,System.UInt32,System.UInt32,System.Boolean)"/>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wMid">
            <summary>
            Manufacturer identifier. Manufacturer identifiers are defined in Manufacturer and Product Identifiers.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wPid">
            <summary>
            Product identifier. Product identifiers are defined in Manufacturer and Product Identifiers.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.szPname">
            <summary>
            Null-terminated string containing the joystick product name.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wXmin">
            <summary>
            Minimum X-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wXmax">
            <summary>
            Maximum X-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wYmin">
            <summary>
            Minimum Y-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wYmax">
            <summary>
            Maximum Y-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wZmin">
            <summary>
            Minimum Z-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wZmax">
            <summary>
            Maximum Z-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wNumButtons">
            <summary>
            Number of joystick buttons.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wPeriodMin">
            <summary>
            Smallest polling frequency supported when captured by the <see cref="M:Win32.MultiMedia.WinMM.joySetCapture(System.IntPtr,System.UInt32,System.UInt32,System.Boolean)"/> function.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wPeriodMax">
            <summary>
            Largest polling frequency supported when captured by <see cref="M:Win32.MultiMedia.WinMM.joySetCapture(System.IntPtr,System.UInt32,System.UInt32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wRmin">
            <summary>
            Minimum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wRmax">
            <summary>
            Maximum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wUmin">
            <summary>
            Minimum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wUmax">
            <summary>
            Maximum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wVmin">
            <summary>
            Minimum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wVmax">
            <summary>
            Maximum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wCaps">
            <summary>
            Joystick capabilities The following flags define individual capabilities that a joystick might have:
            </summary>
            <remarks>
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_HASZ"/> - Joystick has z-coordinate information.
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_HASR"/> - Joystick has rudder (fourth axis) information.
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_HASU"/> - Joystick has u-coordinate (fifth axis) information.
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_HASV"/> - Joystick has v-coordinate (sixth axis) information.
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_HASPOV"/> - Joystick has point-of-view information.
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_POV4DIR"/> - Joystick point-of-view supports discrete values (centered, forward, backward, left, and right).
            <see cref="F:Win32.MultiMedia.WinMM.JOYCAPS_POVCTS"/> - Joystick point-of-view supports continuous degree bearings.
            </remarks>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wMaxAxes">
            <summary>
            Maximum number of axes supported by the joystick.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wNumAxes">
            <summary>
            Number of axes currently in use by the joystick.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.wMaxButtons">
            <summary>
            Maximum number of buttons supported by the joystick.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.szRegKey">
            <summary>
            Null-terminated string containing the registry key for the joystick.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYCAPS.szOEMVxD">
            <summary>
            Null-terminated string identifying the joystick driver OEM.
            </summary>
        </member>
        <member name="T:Win32.MultiMedia.WinMM.JOYINFO">
            <summary>
            The JOYINFO structure contains information about the joystick position and button state.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFO.wXpos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFO.wYpos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFO.wZpos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFO.wButtons">
            <summary>
            Current state of joystick buttons.
            </summary>
            <remarks>
            <para>According to one or more of the following values:</para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.JOY_BUTTON1"/> - First joystick button is pressed.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_BUTTON2"/> - Second joystick button is pressed.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_BUTTON3"/> - Third joystick button is pressed.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_BUTTON4"/> - Fourth joystick button is pressed.
            </para>
            </remarks>
        </member>
        <member name="T:Win32.MultiMedia.WinMM.JOYINFOEX">
            <summary>
            The JOYINFOEX structure contains extended information about the joystick position, point-of-view position, and button state.
            </summary>
            <remarks>
            <para>
            The value of the dwSize member is also used to identify the version number for the structure when it's passed to the <see cref="M:Win32.MultiMedia.WinMM.joyGetPosEx(System.UInt32,Win32.MultiMedia.WinMM.JOYINFOEX@)"/> function.
            </para>
            <para>
            Most devices with a point-of-view control have only five positions. When the JOY_RETURNPOV flag is set, these positions are reported by using the following constants:
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.JOY_POVBACKWARD"/> - Point-of-view hat is pressed backward. The value 18,000 represents an orientation of 180.00 degrees (to the rear).
            <see cref="F:Win32.MultiMedia.WinMM.JOY_POVCENTERED"/> - Point-of-view hat is in the neutral position. The value -1 means the point-of-view hat has no angle to report.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_POVFORWARD"/> - Point-of-view hat is pressed forward. The value 0 represents an orientation of 0.00 degrees (straight ahead).
            <see cref="F:Win32.MultiMedia.WinMM.JOY_POVLEFT"/> - Point-of-view hat is being pressed to the left. The value 27,000 represents an orientation of 270.00 degrees (90.00 degrees to the left).
            <see cref="F:Win32.MultiMedia.WinMM.JOY_POVRIGHT"/> - Point-of-view hat is pressed to the right. The value 9,000 represents an orientation of 90.00 degrees (to the right).
            </para>
            <para>
            The default joystick driver currently supports these five discrete directions. If an application can accept only the defined point-of-view values, it must use the JOY_RETURNPOV flag. If an application can accept other degree readings, it should use the JOY_RETURNPOVCTS flag to obtain continuous data if it is available. The JOY_RETURNPOVCTS flag also supports the JOY_POV constants used with the JOY_RETURNPOV flag.
            </para>
            </remarks>
            <seealso cref="M:Win32.MultiMedia.WinMM.joyGetPosEx(System.UInt32,Win32.MultiMedia.WinMM.JOYINFOEX@)"/>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwSize">
            <summary>
            Size, in bytes, of this structure.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwFlags">
            <summary>
            Flags indicating the valid information returned in this structure. Members that do not contain valid information are set to zero.
            </summary>
            <remarks>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNALL"/> - Equivalent to setting all of the JOY_RETURN bits except JOY_RETURNRAWDATA.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNBUTTONS"/> - The dwButtons member contains valid information about the state of each joystick button.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNCENTERED"/> - Centers the joystick neutral position to the middle value of each axis of movement.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNPOV"/> - The dwPOV member contains valid information about the point-of-view control, expressed in discrete units.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNPOVCTS"/> - The dwPOV member contains valid information about the point-of-view control expressed in continuous, one-hundredth degree units.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNR"/> - The dwRpos member contains valid rudder pedal data. This information represents another (fourth) axis.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNRAWDATA"/>	- Data stored in this structure is uncalibrated joystick readings.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNU"/> - The dwUpos member contains valid data for a fifth axis of the joystick, if such an axis is available, or returns zero otherwise.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNV"/> - The dwVpos member contains valid data for a sixth axis of the joystick, if such an axis is available, or returns zero otherwise.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNX"/> - The dwXpos member contains valid data for the x-coordinate of the joystick.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNY"/> - The dwYpos member contains valid data for the y-coordinate of the joystick.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_RETURNZ"/> - The dwZpos member contains valid data for the z-coordinate of the joystick.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_USEDEADZONE"/> - Expands the range for the neutral position of the joystick and calls this range the dead zone. The joystick driver returns a constant value for all positions in the dead zone.
            </para>
            <para>
            The following flags provide data to calibrate a joystick and are intended for custom calibration applications.
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READ3"/> - Read the x-, y-, and z-coordinates and store the raw values in dwXpos, dwYpos, and dwZpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READ4"/> - Read the rudder information and the x-, y-, and z-coordinates and store the raw values in dwXpos, dwYpos, dwZpos, and dwRpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READ5"/> - Read the rudder information and the x-, y-, z-, and u-coordinates and store the raw values in dwXpos, dwYpos, dwZpos, dwRpos, and dwUpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READ6"/> - Read the raw v-axis data if a joystick mini driver is present that will provide the data. Returns zero otherwise.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READALWAYS"/> - Read the joystick port even if the driver does not detect a device.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READRONLY"/> - Read the rudder information if a joystick mini-driver is present that will provide the data and store the raw value in dwRpos. Return zero otherwise.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READXONLY"/> - Read the x-coordinate and store the raw (uncalibrated) value in dwXpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READXYONLY"/> - Reads the x- and y-coordinates and place the raw values in dwXpos and dwYpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READYONLY"/> - Reads the y-coordinate and store the raw value in dwYpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READZONLY"/> - Read the z-coordinate and store the raw value in dwZpos.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READUONLY"/> - Read the u-coordinate if a joystick mini-driver is present that will provide the data and store the raw value in dwUpos. Return zero otherwise.
            <see cref="F:Win32.MultiMedia.WinMM.JOY_CAL_READVONLY"/> - Read the v-coordinate if a joystick mini-driver is present that will provide the data and store the raw value in dwVpos. Return zero otherwise.
            </para>
            </remarks>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwXpos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwYpos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwZpos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwRpos">
            <summary>
            Current position of the rudder or fourth joystick axis.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwUpos">
            <summary>
            Current fifth axis position.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwVpos">
            <summary>
            Current sixth axis position.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwButtons">
            <summary>
            Current state of the 32 joystick buttons. The value of this member can be set to any combination of JOY_BUTTONn flags, where n is a value in the range of 1 through 32 corresponding to the button that is pressed.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwButtonNumber">
            <summary>
            Current button number that is pressed.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwPOV">
            <summary>
            Current position of the point-of-view control. Values for this member are in the range 0 through 35,900. These values represent the angle, in degrees, of each view multiplied by 100.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwReserved1">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:Win32.MultiMedia.WinMM.JOYINFOEX.dwReserved2">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.PlaySound(System.String,System.IntPtr,System.UInt32)">
            <summary>
            The <b>PlaySound</b> function plays a sound specified by the given filename,
            resource, or system event.  (A system event may be associated with a sound in the
            registry or in the WIN.INI file.)
            </summary>
            <param name="sound">
            <para>
            A string that specifies the sound to play.  If this parameter is NULL, any
            currently playing waveform sound is stopped.  To stop a non-waveform sound,
            specify <see cref="F:Win32.MultiMedia.WinMM.SND_PURGE" /> in the <i>soundFlags</i> parameter.
            </para>
            <para>
            Three flags in <i>soundFlags</i> (<see cref="F:Win32.MultiMedia.WinMM.SND_ALIAS" />,
            <see cref="F:Win32.MultiMedia.WinMM.SND_FILENAME" />, and <see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" />) determine
            whether the name is interpreted as an alias for a system event, a filename, or
            a resource identifier.  If none of these flags are specified, <b>PlaySound</b>
            searches the registry or the WIN.INI file for an association with the
            specified sound name.  If an association is found, the sound event is played.
            If no association is found in the registry, the name is interpreted as a
            filename.
            </para>
            </param>
            <param name="mod">
            Handle to the executable file that contains the resource to be loaded.  This
            parameter must be NULL unless <see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" /> is specified in
            <i>soundFlags</i>.
            </param>
            <param name="soundFlags">
            <para>
            Flags for playing the sound.  The following values are defined:
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_APPLICATION" /></term>
            <description>
            The sound is played using an application-specific association.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_ALIAS" /></term>
            <description>
            The <i>sound</i> parameter is a system-event alias in the registry
            or the WIN.INI file.  Do not use with either
            <see cref="F:Win32.MultiMedia.WinMM.SND_FILENAME" /> or <see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" />.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_ALIAS_ID" /></term>
            <description>
            The <i>sound</i> parameter is a predefined sound identifier.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_ASYNC" /></term>
            <description>
            The sound is played asynchronously and <b>PlaySound</b> returns
            immediately after beginning the sound.  To terminate an
            asynchronously played waveform sound, call <b>PlaySound</b> with
            <i>sound</i> set to NULL.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_FILENAME" /></term>
            <description>
            The <i>sound</i> parameter is a filename.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_LOOP" /></term>
            <description>
            The sound plays repeatedly until <b>PlaySound</b> is called again
            with the <i>sound</i> parameter set to NULL.  You must also
            specify the <see cref="F:Win32.MultiMedia.WinMM.SND_ASYNC" /> flag to indicate an
            asynchronous sound event.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_MEMORY" /></term>
            <description>
            A sound event's file is loaded in RAM.  The parameter specified by
            <i>sound</i> must point to an image of a sound in memory.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_NODEFAULT" /></term>
            <description>
            No default sound event is used.  If the sound cannot be found,
            <b>PlaySound</b> returns silently without playing the default
            sound.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_NOSTOP" /></term>
            <description>
            <para>
            The specified sound event will yield to another sound event
            that is already playing.  If a sound cannot be played because
            the resource needed to generate that sound is busy playing
            another sound, the function immediately returns FALSE without
            playing the requested sound.
            </para>
            <para>
            If this flag is not specified, <b>PlaySound</b> attempts to
            stop the currently playing sound so that the device can be
            used to play the new sound.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_NOWAIT" /></term>
            <description>
            If the driver is busy, return immediately without playing the
            sound.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_PURGE" /></term>
            <description>
            <para>
            Sounds are to be stopped for the calling task.  If
            <i>sound</i> is not NULL, all instances of the specified sound
            are stopped.  If <i>sound</i> is NULL, all sounds that are
            playing on behalf of the calling task are stopped.
            </para>
            <para>
            You must also specify the instance handle to stop
            <see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" /> events.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_RESOURCE" /></term>
            <description>
            The <i>sound</i> parameter is a resource identifier; <i>mod</i>
            must identify the instance that contains the resource.
            </description>
            </item>
            <item>
            <term><see cref="F:Win32.MultiMedia.WinMM.SND_SYNC" /></term>
            <description>
            Synchronous playback of a sound event.  <b>PlaySound</b> returns
            after the sound event completes.
            </description>
            </item>
            </list>
            </para>
            </param>
            <returns>
            Returns TRUE if successful or FALSE otherwise.
            </returns>
            <remarks>
            <para>
            The sound specified by <i>sound</i> must fit into available physical memory
            and be playable by an installed waveform-audio device driver.
            <b>PlaySound</b> searches the following directories for sound files: the
            current directory; the Windows directory; the Windows system directory;
            directories listed in the PATH environment variable; and the list of
            directories mapped in a network.  For more information about the directory
            search order, see the documentation for the <b>OpenFile</b> function.
            </para>
            <para>
            If it cannot find the specified sound, <b>PlaySound</b> uses the default
            system event sound entry instead.  If the function can find neither the
            system default entry nor the default sound, it makes no sound and returns
            FALSE.
            </para>
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)">
            <summary>
            The <b>timeBeginPeriod</b> function sets the minimum timer resolution for an
            application or device driver.
            </summary>
            <param name="period">
            Minimum timer resolution, in milliseconds, for the application or device driver.
            </param>
            <returns>
            Returns <see cref="F:Win32.MultiMedia.WinMM.TIMERR_NOERROR" /> if successful or
            <see cref="F:Win32.MultiMedia.WinMM.TIMERR_NOCANDO" /> if the resolution specified in <i>period</i> is out
            of range.
            </returns>
            <remarks>
            <para>
            Call this function immediately before using timer services, and call the
            <see cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" /> function immediately after you are finished
            using the timer services.
            </para>
            <para>
            You must match each call to <b>timeBeginPeriod</b> with a call to
            <see cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" />, specifying the same minimum resolution in both
            calls.  An application can make multiple <b>timeBeginPeriod</b> calls as long
            as each call is matched with a call to <see cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" />.
            </para>
            </remarks>
            <seealso cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" />
        </member>
        <member name="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)">
            <summary>
            The <b>timeEndPeriod</b> function clears a previously set minimum timer
            resolution.
            </summary>
            <param name="period">
            Minimum timer resolution specified in the previous call to the
            <see cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" /> function.
            </param>
            <returns>
            Returns <see cref="F:Win32.MultiMedia.WinMM.TIMERR_NOERROR" /> if successful or
            <see cref="F:Win32.MultiMedia.WinMM.TIMERR_NOCANDO" /> if the resolution specified in <i>period</i> is out
            of range
            </returns>
            <remarks>
            <para>
            Call this function immediately after you are finished using timer services.
            </para>
            <para>
            You must match each call to <see cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" /> with a call to
            <b>timeEndPeriod</b>, specifying the same minimum resolution in both calls.
            An application can make multiple <see cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" /> calls as long
            as each call is matched with a call to <b>timeEndPeriod</b>.
            </para>
            </remarks>
            <seealso cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" />
        </member>
        <member name="M:Win32.MultiMedia.WinMM.timeGetTime">
            <summary>
            The <b>timeGetTime</b> function retrieves the system time, in milliseconds.
            The system time is the time elapsed since Windows was started.
            </summary>
            <returns>
            Returns the system time, in milliseconds.
            </returns>
            <remarks>
            <para>
            The only difference between this function and the <b>timeGetSystemTime</b>
            function is that <b>timeGetSystemTime</b> uses the <b>MMTIME</b> structure to
            return the system time.  The <b>timeGetTime</b> function has less overhead
            than <b>timeGetSystemTime</b>.
            </para>
            <para>
            Note that the value returned by the <b>timeGetTime</b> function is a DWORD
            value.  The return value wraps around to 0 every 2^32 milliseconds, which is
            about 49.71 days.  This can cause problems in code that directly uses the
            <b>timeGetTime</b> return value in computations, particularly where the value
            is used to control code execution.  You should always use the difference
            between two <b>timeGetTime</b> return values in computations.
            </para>
            <para>
            <b>Windows NT/2000:</b> The default precision of the <b>timeGetTime</b>
            function can be five milliseconds or more, depending on the machine.  You
            can use the <see cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" /> and <see cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" />
            functions to increase the precision of <b>timeGetTime</b>.  If you do so, the
            minimum difference between successive values returned by <b>timeGetTime</b>
            can be as large as the minimum period value set using
            <see cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" /> and <see cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" />.  Use the
            <see cref="M:Win32.WinKernel.QueryPerformanceCounter(System.Int64@)" /> and
            <see cref="M:Win32.WinKernel.QueryPerformanceFrequency(System.Int64@)" /> functions to measure short
            time intervals at a high resolution.
            </para>
            </remarks>
            <seealso cref="M:Win32.WinKernel.QueryPerformanceCounter(System.Int64@)" />
            <seealso cref="M:Win32.WinKernel.QueryPerformanceFrequency(System.Int64@)" />
            <seealso cref="M:Win32.MultiMedia.WinMM.timeBeginPeriod(System.UInt32)" />
            <seealso cref="M:Win32.MultiMedia.WinMM.timeEndPeriod(System.UInt32)" />
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyConfigChanged(System.UInt32)">
            <summary>
            The joyConfigChanged function informs the joystick driver that the configuration has changed and should be reloaded from the registry.
            </summary>
            <param name="dwFlags">
            Reserved for future use. Must equal zero.
            </param>
            <returns>
            Returns JOYERR_NOERROR if successful. Returns JOYERR_PARMS if the parameter is non-zero.
            </returns>
            <remarks>
            <para>
            This function causes a window message to be sent to all top-level windows. This message may be defined by applications that need to respond to changes in joystick calibration by using RegisterWindowMessage with the following message ID:
            </para>
            <code>
            #define JOY_CONFIGCHANGED_MSGSTRING     "MSJSTICK_VJOYD_MSGSTR"
            </code>
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyGetDevCaps(System.UIntPtr,Win32.MultiMedia.WinMM.JOYCAPS@,System.UInt32)">
            <summary>
            The joyGetDevCaps function queries a joystick to determine its capabilities.
            </summary>
            <param name="uJoyID">
            Identifier of the joystick to be queried. Valid values for uJoyID range from -1 to 15. A value of -1 enables retrieval of the szRegKey member of the JOYCAPS structure whether a device is present or not. For Windows NT 4.0, valid values are limited to zero (JOYSTICKID1) and JOYSTICKID2.
            </param>
            <param name="pjc">
            Pointer to a <see cref="T:Win32.MultiMedia.WinMM.JOYCAPS"/> structure to contain the capabilities of the joystick.
            </param>
            <param name="cbjc"> 
            Size, in bytes, of the JOYCAPS structure.
            </param>
            <returns>
            <para>
            Returns JOYERR_NOERROR if successful or one of the following error values:
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present. Windows NT/2000/XP: The specified joystick identifier is invalid.
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed. Windows 95/98/Me: The specified joystick identifier is invalid.
            </para>
            </returns>
            <remarks>
            <para>
            Use the <see cref="M:Win32.MultiMedia.WinMM.joyGetNumDevs"/> function to determine the number of joystick devices supported by the driver.
            </para>
            </remarks>
            <seealso cref="T:Win32.MultiMedia.WinMM.JOYCAPS"/>
            <seealso cref="M:Win32.MultiMedia.WinMM.joyGetNumDevs"/>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyGetNumDevs">
            <summary>
            The joyGetNumDevs function queries the joystick driver for the number of joysticks it supports.
            </summary>
            <returns>
            The joyGetNumDevs function returns the number of joysticks supported by the current driver or zero if no driver is installed.
            </returns>
            <remarks>
            <para>
            Use the <see cref="M:Win32.MultiMedia.WinMM.joyGetPos(System.UInt32,Win32.MultiMedia.WinMM.JOYINFO@)"/> function to determine whether a given joystick is physically attached to the system. If the specified joystick is not connected, joyGetPos returns a <see cref="F:Win32.MultiMedia.WinMM.JOYERR_UNPLUGGED"/> error value.
            </para>
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyGetPos(System.UInt32,Win32.MultiMedia.WinMM.JOYINFO@)">
            <summary>
            The joyGetPos function queries a joystick for its position and button status.
            </summary>
            <param name="uJoyID">
            Identifier of the joystick to be queried. Valid values for uJoyID range from 0 to 15.
            </param>
            <param name="pji">
            Pointer to a <see cref="T:Win32.MultiMedia.WinMM.JOYINFO"/> structure that contains the position and button status of the joystick.
            </param>
            <returns>
            Returns <see cref="F:Win32.MultiMedia.WinMM.JOYERR_NOERROR"/> if successful or one of the following error values.
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_UNPLUGGED"/> - The specified joystick is not connected to the system.
            </para>
            </returns>
            <remarks>
            For devices that have four to six axes of movement, a point-of-view control, or more than four buttons, use the <see cref="M:Win32.MultiMedia.WinMM.joyGetPosEx(System.UInt32,Win32.MultiMedia.WinMM.JOYINFOEX@)"/> function.
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyGetPosEx(System.UInt32,Win32.MultiMedia.WinMM.JOYINFOEX@)">
            <summary>
            The joyGetPosEx function queries a joystick for its position and button status.
            </summary>
            <param name="uJoyID">
            Identifier of the joystick to be queried. Valid values for uJoyID range from 0 to 15.
            </param>
            <param name="pji">
            Pointer to a <see cref="T:Win32.MultiMedia.WinMM.JOYINFOEX"/> structure that contains extended position information and button status of the joystick. You must set the dwSize and dwFlags members or joyGetPosEx will fail. The information returned from joyGetPosEx depends on the flags you specify in dwFlags.
            </param>
            <returns>
            Returns JOYERR_NOERROR if successful or one of the following error values.
            <para>
            Returns JOYERR_NOERROR if successful or one of the following error values.
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_UNPLUGGED"/> - The specified joystick is not connected to the system.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_PARMS"/> - The specified joystick identifier is invalid.
            </para>
            </returns>
            <remarks>
            This function provides access to extended devices such as rudder pedals, point-of-view hats, devices with a large number of buttons, and coordinate systems using up to six axes. For joystick devices that use three axes or fewer and have fewer than four buttons, use the joyGetPos function.
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyGetThreshold(System.UInt32,System.UInt32@)">
            <summary>
            The joyGetThreshold function queries a joystick for its current movement threshold.
            </summary>
            <param name="uJoyID">
            Identifier of the joystick. Valid values for uJoyID range from 0 to 15.
            </param>
            <param name="puThreshold">
            Pointer to a variable that contains the movement threshold value.
            </param>
            <returns>
            <para>
            Returns JOYERR_NOERROR if successful or one of the following error values.
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed.
            </para>
            </returns>
            <remarks>
            The movement threshold is the distance the joystick must be moved before a joystick position-change message (<see cref="F:Win32.MultiMedia.WinMM.MM_JOY1MOVE"/>, <see cref="F:Win32.MultiMedia.WinMM.MM_JOY1ZMOVE"/>, <see cref="F:Win32.MultiMedia.WinMM.MM_JOY2MOVE"/>, or <see cref="F:Win32.MultiMedia.WinMM.MM_JOY2ZMOVE"/>) is sent to a window that has captured the device. The threshold is initially zero.
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joyReleaseCapture(System.UInt32)">
            <summary>
            The joyReleaseCapture function releases the specified captured joystick.
            </summary>
            <param name="uJoyID">
            Identifier of the joystick. Valid values for uJoyID range from 0 to 15.
            </param>
            <returns>
            <para>
            Returns <see cref="F:Win32.MultiMedia.WinMM.JOYERR_NOERROR"/> if successful or one of the following error values.
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM"/> - Windows 95/98/Me: The specified joystick device identifier uJoyID is invalid. Windows NT/2000/XP: The specified joystick identifier is valid, but the joystick has not been captured.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_PARMS"/> - Windows NT/2000/XP: The specified joystick device identifier uJoyID is invalid.
            </para>
            </returns>
            <remarks>
            Windows 95/98/Me: This method returns JOYERR_NOERROR when passed a valid joystick identifier that has not been captured.
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joySetCapture(System.IntPtr,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            The joySetCature function captures a joystick by causing its messages to be sent to the specified window.
            </summary>
            <param name="hwnd">
            Handle to the window to receive the joystick messages.
            </param>
            <param name="uJoyID">
            Identifier of the joystick. Valid values for uJoyID range from 0 to 15.
            </param>
            <param name="uPeriod">
            Polling frequency, in milliseconds.
            </param>
            <param name="fChanged">
            Change position flag. Specify TRUE for this parameter to send messages only when the position changes by a value greater than the joystick movement threshold. Otherwise, messages are sent at the polling frequency specified in uPeriod.
            </param>
            <returns>
            <para>
            Returns JOYERR_NOERROR if successful or one of the following error values.
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_INVALPARAM"/> - Windows 95/98/Me: Invalid joystick ID or hwnd is NULL.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_NOCANDO"/> - Cannot capture joystick input because a required service (such as a Windows timer) is unavailable.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_UNPLUGGED"/> - The specified joystick is not connected to the system.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_PARMS"/> - Windows NT/2000/XP: Invalid joystick ID or hwnd is NULL.
            </para>
            </returns>
            <remarks>
            This function fails if the specified joystick is currently captured. Call the joyReleaseCapture function to release the captured joystick, or destroy the window to release the joystick automatically.
            </remarks>
        </member>
        <member name="M:Win32.MultiMedia.WinMM.joySetThreshold(System.UInt32,System.UInt32)">
            <summary>
            The joySetThreshold function sets the movement threshold of a joystick.
            </summary>
            <param name="uJoyID">
            Identifier of the joystick. Valid values for uJoyID range from 0 to 15.
            </param>
            <param name="uThreshold">
            New movement threshold.
            </param>
            <returns>
            <para>
            Returns JOYERR_NOERROR if successful or one of the following error values.
            </para>
            <para>
            <see cref="F:Win32.MultiMedia.WinMM.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
            <see cref="F:Win32.MultiMedia.WinMM.JOYERR_PARMS"/> - The specified joystick device identifier uJoyID is invalid.
            </para>
            </returns>
            <remarks>
            The movement threshold is the distance the joystick must be moved before a joystick position-change message (<see cref="F:Win32.MultiMedia.WinMM.MM_JOY1MOVE"/>, <see cref="F:Win32.MultiMedia.WinMM.MM_JOY1ZMOVE"/>, <see cref="F:Win32.MultiMedia.WinMM.MM_JOY2MOVE"/>, or <see cref="F:Win32.MultiMedia.WinMM.MM_JOY2ZMOVE"/>) is sent to a window that has captured the device. The threshold is initially zero.
            </remarks>
        </member>
        <member name="T:Win32.ACCESS_MASK">
            <summary>
            Defines the access mask.
            </summary>
            <remarks>
            <para>A <b>uint</b> combining different rights.</para>
            <para>Generic access rights are stored in the four uppermost bits (bits 28-31).</para>
            <para>The SACL access right is stored in bit 24.</para>
            <para>Standard access rights are stored in the bits 16-23.</para>
            <para>Specific (access) rights are stored in the lowermost bits 0-15.</para>
            <para>The values in this enum are provided for simpler use of the acces mask. Just OR
            them together to your needs.</para>
            </remarks>
        </member>
        <member name="F:Win32.ACCESS_MASK.GENERIC_READ">
            <summary>
            Read access
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.GENERIC_WRITE">
            <summary>
            Write access
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.GENERIC_EXECUTE">
            <summary>
            Execute access
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.GENERIC_ALL">
            <summary>
            All possible access rights
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.ACCESS_SYSTEM_SECURITY">
            <summary>
            SACL access right
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.DELETE">
            <summary>
            The right to delete the object.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.READ_CONTROL">
            <summary>
            The right to read the information in the object's security descriptor,
            not including the information in the system access control list (SACL).
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.WRITE_DAC">
            <summary>
            The right to modify the discretionary access control list (DACL) in
            the object's security descriptor.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.WRITE_OWNER">
            <summary>
            The right to change the owner in the object's security descriptor.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.SYNCHRONIZE">
            <summary>
            The right to use the object for synchronization. This enables a
            thread to wait until the object is in the signaled state. Some object
            types do not support this access right.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_REQUIRED">
            <summary>
            Combines <see cref="F:Win32.ACCESS_MASK.DELETE"/>, <see cref="F:Win32.ACCESS_MASK.READ_CONTROL"/>, <see cref="F:Win32.ACCESS_MASK.WRITE_DAC"/> and <see cref="F:Win32.ACCESS_MASK.WRITE_OWNER"/> access.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_READ">
            <summary>
            Currently defined to equal <see cref="F:Win32.ACCESS_MASK.READ_CONTROL"/>.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_WRITE">
            <summary>
            Currently defined to equal <see cref="F:Win32.ACCESS_MASK.READ_CONTROL"/>.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_EXECUTE">
            <summary>
            Currently defined to equal <see cref="F:Win32.ACCESS_MASK.READ_CONTROL"/>.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_ALL">
            <summary>
            Combines <see cref="F:Win32.ACCESS_MASK.DELETE"/>, <see cref="F:Win32.ACCESS_MASK.READ_CONTROL"/>, <see cref="F:Win32.ACCESS_MASK.WRITE_DAC"/>, <see cref="F:Win32.ACCESS_MASK.WRITE_OWNER"/> and <see cref="F:Win32.ACCESS_MASK.SYNCHRONIZE"/> access.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.SPECIFIC_RIGHTS_ALL">
            <summary>
            Mask for specific rights.
            </summary>
        </member>
        <member name="F:Win32.ACCESS_MASK.MAXIMUM_ALLOWED">
            <summary>
            Maximum allowed access type.
            </summary>
        </member>
        <member name="T:Win32.GENERIC">
            <summary>
            Generic Access Rights. See <see cref="T:Win32.ACCESS_MASK"/> for more information.
            </summary>
        </member>
        <member name="F:Win32.GENERIC.READ">
            <summary>
            Read access
            </summary>
        </member>
        <member name="F:Win32.GENERIC.WRITE">
            <summary>
            Write access
            </summary>
        </member>
        <member name="F:Win32.GENERIC.EXECUTE">
            <summary>
            Execute access
            </summary>
        </member>
        <member name="F:Win32.GENERIC.ALL">
            <summary>
            All possible access rights
            </summary>
        </member>
        <member name="T:Win32.SECURITY_IMPERSONATION_LEVEL">
            <summary>
            Defines the impersonation levels that determine the operations a server can perform in the client's context.
            </summary>
        </member>
        <member name="F:Win32.SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous">
            <summary>
            The server cannot impersonate or identify the client.
            </summary>
        </member>
        <member name="F:Win32.SECURITY_IMPERSONATION_LEVEL.SecurityIdentification">
            <summary>
            The server can get the identity and privileges of the client, but cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Win32.SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation">
            <summary>
            The server can impersonate the client's security context on the local system.
            </summary>
        </member>
        <member name="F:Win32.SECURITY_IMPERSONATION_LEVEL.SecurityDelegation">
            <summary>
            The server can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="T:Win32.GDI">
            <summary>
            Native GDI calls.
            </summary>
        </member>
        <member name="M:Win32.GDI.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            Selects an object into the specified device context. The new object replaces the previous object of the same type.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="hgdiobj">The handle to the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. Otherwise <b>HGDI_ERROR</b> (-1) is returned.</returns>
        </member>
        <member name="M:Win32.GDI.DeleteObject(System.IntPtr)">
            <summary>
            Deletes on object.
            </summary>
            <param name="hObject">The handle to the object to be deleted.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b> is returned.</returns>
        </member>
        <member name="M:Win32.GDI.GetStockObject(Win32.StockObjectType)">
            <summary>
            Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.
            </summary>
            <param name="fnObject">The type of the stock object.</param>
            <returns>The handle to the requested object.</returns>
        </member>
        <member name="M:Win32.GDI.SetDCBrushColor(System.IntPtr,System.UInt32)">
            <summary>
            Sets the current device context (DC) brush color to the specified color value. If the device cannot represent the specified color value, the color is set to the nearest physical color.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="crColor">The new brush color.</param>
            <returns>If the function succeeds, the return value specifies the previous DC brush color value. Otherwise <see cref="F:Win32.GDI.CLR_INVALID"/> is returned.</returns>
        </member>
        <member name="M:Win32.GDI.SetDCPenColor(System.IntPtr,System.UInt32)">
            <summary>
            Sets the current device context (DC) pen color to the specified color value. If the device cannot represent the specified color value, the color is set to the nearest physical color.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="crColor">The new pen color.</param>
            <returns>If the function succeeds, the return value specifies the previous DC pen color value. Otherwise <see cref="F:Win32.GDI.CLR_INVALID"/> is returned.</returns>
        </member>
        <member name="F:Win32.GDI.CLR_INVALID">
            <summary>
            Error color value, returned by <see cref="M:Win32.GDI.SetDCBrushColor(System.IntPtr,System.UInt32)"/> and <see cref="M:Win32.GDI.SetDCPenColor(System.IntPtr,System.UInt32)"/>.
            </summary>
        </member>
        <member name="T:Win32.FW">
            <summary>
            Font Weights
            </summary>
        </member>
        <member name="F:Win32.FW.DONTCARE">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Win32.FW.THIN">
            <summary>
            100
            </summary>
        </member>
        <member name="F:Win32.FW.EXTRALIGHT">
            <summary>
            200
            </summary>
        </member>
        <member name="F:Win32.FW.LIGHT">
            <summary>
            300
            </summary>
        </member>
        <member name="F:Win32.FW.NORMAL">
            <summary>
            400
            </summary>
        </member>
        <member name="F:Win32.FW.MEDIUM">
            <summary>
            500
            </summary>
        </member>
        <member name="F:Win32.FW.SEMIBOLD">
            <summary>
            600
            </summary>
        </member>
        <member name="F:Win32.FW.BOLD">
            <summary>
            700
            </summary>
        </member>
        <member name="F:Win32.FW.EXTRABOLD">
            <summary>
            800
            </summary>
        </member>
        <member name="F:Win32.FW.HEAVY">
            <summary>
            900
            </summary>
        </member>
        <member name="F:Win32.FW.ULTRALIGHT">
            <summary>
            Same as <see cref="F:Win32.FW.EXTRALIGHT"/>.
            </summary>
        </member>
        <member name="F:Win32.FW.REGULAR">
            <summary>
            Same as <see cref="F:Win32.FW.NORMAL"/>.
            </summary>
        </member>
        <member name="F:Win32.FW.DEMIBOLD">
            <summary>
            Same as <see cref="F:Win32.FW.SEMIBOLD"/>.
            </summary>
        </member>
        <member name="F:Win32.FW.ULTRABOLD">
            <summary>
            Same as <see cref="F:Win32.FW.EXTRABOLD"/>.
            </summary>
        </member>
        <member name="F:Win32.FW.BLACK">
            <summary>
            Same as <see cref="F:Win32.FW.HEAVY"/>.
            </summary>
        </member>
        <member name="T:Win32.CLIP_PRECIS">
            <summary>
            The clipping precision.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.DEFAULT">
            <summary>
            Specifies default clipping behavior.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.CHARACTER">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.STROKE">
            <summary>
            Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.MASK">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.LH_ANGLES">
            <summary>
            <para>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.</para>
            <para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para>
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.TT_ALWAYS">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.DFA_DISABLE">
            <summary>
            Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.
            </summary>
        </member>
        <member name="F:Win32.CLIP_PRECIS.EMBEDDED">
            <summary>
            You must specify this flag to use an embedded read-only font.
            </summary>
        </member>
        <member name="T:Win32.Charset">
            <summary>
            Character sets.
            </summary>
        </member>
        <member name="F:Win32.Charset.ANSI">
            <summary>
            ANSI
            </summary>
        </member>
        <member name="F:Win32.Charset.DEFAULT">
            <summary>
            Value based on the current system locale.
            </summary>
        </member>
        <member name="F:Win32.Charset.SYMBOL">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:Win32.Charset.MAC">
            <summary>
            Mac
            </summary>
        </member>
        <member name="F:Win32.Charset.SHIFTJIS">
            <summary>
            Japanise
            </summary>
        </member>
        <member name="F:Win32.Charset.HANGUL">
            <summary>
            HANGUL
            </summary>
        </member>
        <member name="F:Win32.Charset.HANGEUL">
            <summary>
            HANGUEL
            </summary>
        </member>
        <member name="F:Win32.Charset.JOHAB">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:Win32.Charset.GB2312">
            <summary>
            Simple chinese
            </summary>
        </member>
        <member name="F:Win32.Charset.CHINESEBIG5">
            <summary>
            Traditional chinese
            </summary>
        </member>
        <member name="F:Win32.Charset.GREEK">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:Win32.Charset.TURKISH">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:Win32.Charset.VIETNAMESE">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:Win32.Charset.HEBREW">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:Win32.Charset.ARABIC">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:Win32.Charset.BALTIC">
            <summary>
            Baltic languages.
            </summary>
        </member>
        <member name="F:Win32.Charset.RUSSIAN">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:Win32.Charset.THAI">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:Win32.Charset.EASTEUROPE">
            <summary>
            Eastern europe languages.
            </summary>
        </member>
        <member name="F:Win32.Charset.OEM">
            <summary>
            Is operating-system dependent.
            </summary>
        </member>
        <member name="T:Win32.DCTT">
            <summary>
            Return value for <see cref="F:Win32.DC.TRUETYPE"/>.
            </summary>
        </member>
        <member name="F:Win32.DCTT.BITMAP">
            <summary>
            Device can print TrueType fonts as graphics.
            </summary>
        </member>
        <member name="F:Win32.DCTT.DOWNLOAD">
            <summary>
            Device can download TrueType fonts.
            </summary>
        </member>
        <member name="F:Win32.DCTT.SUBDEV">
            <summary>
            Device can substitute device fonts for TrueType fonts.
            </summary>
        </member>
        <member name="F:Win32.DCTT.DOWNLOAD_OUTLINE">
            <summary>
            (Windows 95/98/Me only) The device can download outline TrueType fonts.
            </summary>
        </member>
        <member name="T:Win32.PRINTRATEUNIT">
            <summary>
            Print rate units. Return value of <see cref="F:Win32.DC.PRINTRATEUNIT"/>
            </summary>
        </member>
        <member name="F:Win32.PRINTRATEUNIT.PPM">
            <summary>
            Pages per minute.
            </summary>
        </member>
        <member name="F:Win32.PRINTRATEUNIT.CPS">
            <summary>
            Characters per second.
            </summary>
        </member>
        <member name="F:Win32.PRINTRATEUNIT.LPM">
            <summary>
            Lines per minute.
            </summary>
        </member>
        <member name="F:Win32.PRINTRATEUNIT.IPM">
            <summary>
            Inches per minute.
            </summary>
        </member>
        <member name="T:Win32.DC">
            <summary>
            Device capabilities.
            </summary>
        </member>
        <member name="F:Win32.DC.FIELDS">
            <summary>
            Returns the <see cref="F:Win32.DevMode.dmFields"/> of the printer driver's <see cref="T:Win32.DevMode"/> structure. The <see cref="F:Win32.DevMode.dmFields"/> member
            indicates which members in the device-independent portion of the structure are supported by the printer driver.
            </summary>
        </member>
        <member name="F:Win32.DC.PAPERS">
            <summary>
            Retrieves a list of supported paper sizes.
            </summary>
        </member>
        <member name="F:Win32.DC.PAPERSIZE">
            <summary>
            Retrieves the dimensions, in tenths of a millimeter, of each supported paper size.
            </summary>
        </member>
        <member name="F:Win32.DC.MINEXTENT">
            <summary>
            Returns the minimum paper size that the <see cref="F:Win32.DevMode.dmPaperLength"/> and <see cref="F:Win32.DevMode.dmPaperWidth"/> members of the printer
            driver's <see cref="T:Win32.DevMode"/> structure can specify.
            </summary>
        </member>
        <member name="F:Win32.DC.MAXEXTENT">
            <summary>
            Returns the maximum paper size that the <see cref="F:Win32.DevMode.dmPaperLength"/> and <see cref="F:Win32.DevMode.dmPaperWidth"/> members of the printer
            driver's <see cref="T:Win32.DevMode"/> structure can specify.
            </summary>
        </member>
        <member name="F:Win32.DC.BINS">
            <summary>
            Retrieves a list of available paper bins.
            </summary>
        </member>
        <member name="F:Win32.DC.DUPLEX">
            <summary>
            Queries if the printer supports duplex printing.
            </summary>
        </member>
        <member name="F:Win32.DC.SIZE">
            <summary>
            Returns the <see cref="F:Win32.DevMode.dmSize"/> member of the printer driver's <see cref="T:Win32.DevMode"/> structure.
            </summary>
        </member>
        <member name="F:Win32.DC.EXTRA">
            <summary>
            Returns the number of bytes required for the device-specific portion of the <see cref="T:Win32.DevMode"/> structure for the printer driver.
            </summary>
        </member>
        <member name="F:Win32.DC.VERSION">
            <summary>
            Returns the specification version to which the printer driver conforms.
            </summary>
        </member>
        <member name="F:Win32.DC.DRIVER">
            <summary>
            Returns the version number of the printer driver.
            </summary>
        </member>
        <member name="F:Win32.DC.BINNAMES">
            <summary>
            Retrieves the names of the printer's paper bins.
            </summary>
        </member>
        <member name="F:Win32.DC.ENUMRESOLUTIONS">
            <summary>
            Retrieves a list of the resolutions supported by the printer.
            </summary>
        </member>
        <member name="F:Win32.DC.FILEDEPENDENCIES">
            <summary>
            Retrieves the names of any additional files that need to be loaded when a driver is installed.
            </summary>
        </member>
        <member name="F:Win32.DC.TRUETYPE">
            <summary>
            Retrieves the abilities of the driver to use TrueType fonts.
            </summary>
        </member>
        <member name="F:Win32.DC.PAPERNAMES">
            <summary>
            Retrieves a list of supported paper names (for example, Letter or Legal).
            </summary>
        </member>
        <member name="F:Win32.DC.ORIENTATION">
            <summary>
            Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait
            orientation is rotated counterclockwise to produce landscape orientation.
            </summary>
        </member>
        <member name="F:Win32.DC.COPIES">
            <summary>
            Returns the number of copies the device can print.
            </summary>
        </member>
        <member name="F:Win32.DC.BINADJUST">
            <summary>
            Not used for NT-based operating systems.
            </summary>
        </member>
        <member name="F:Win32.DC.EMF_COMPLIANT">
            <summary>
            Not used for NT-based operating systems.
            </summary>
        </member>
        <member name="F:Win32.DC.DATATYPE_PRODUCED">
            <summary>
            Not used for NT-based operating systems.
            </summary>
        </member>
        <member name="F:Win32.DC.COLLATE">
            <summary>
            Queries if the printer supports collating.
            </summary>
        </member>
        <member name="F:Win32.DC.MANUFACTURER">
            <summary>
            Not used for NT-based operating systems.
            </summary>
        </member>
        <member name="F:Win32.DC.MODEL">
            <summary>
            Not used for NT-based operating systems.
            </summary>
        </member>
        <member name="F:Win32.DC.PERSONALITY">
            <summary>
            Retrieves a list of printer description languages supported by the printer.
            </summary>
        </member>
        <member name="F:Win32.DC.PRINTRATE">
            <summary>
            The return value indicates the printer's print rate.
            </summary>
        </member>
        <member name="F:Win32.DC.PRINTRATEUNIT">
            <summary>
            The return value is one of the following values that indicate the print rate units (<see cref="F:Win32.DC.PRINTRATEUNIT"/>) for the value returned for the <see cref="F:Win32.DC.PRINTRATE"/> flag.
            </summary>
        </member>
        <member name="F:Win32.DC.PRINTERMEM">
            <summary>
            The return value is the amount of available printer memory, in kilobytes.
            </summary>
        </member>
        <member name="F:Win32.DC.MEDIAREADY">
            <summary>
            Retrieves the names of the paper forms that are currently available for use.
            </summary>
        </member>
        <member name="F:Win32.DC.STAPLE">
            <summary>
            Queries if the printer supports stapling.
            </summary>
        </member>
        <member name="F:Win32.DC.PRINTRATEPPM">
            <summary>
            The return value indicates the printer's print rate, in pages per minute.
            </summary>
        </member>
        <member name="F:Win32.DC.COLORDEVICE">
            <summary>
            Queries if the printer supports color printing.
            </summary>
        </member>
        <member name="F:Win32.DC.NUP">
            <summary>
            Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page.
            </summary>
        </member>
        <member name="F:Win32.DC.MEDIATYPENAMES">
            <summary>
            Retrieves the names of the supported media types.
            </summary>
        </member>
        <member name="F:Win32.DC.MEDIATYPES">
            <summary>
            Retrieves a list of supported media types.
            </summary>
        </member>
        <member name="T:Win32.PFD">
            <summary>
            Flags for describing a pixel format.
            </summary>
        </member>
        <member name="F:Win32.PFD.DOUBLEBUFFER">
            <summary>
            The buffer is double-buffered. This flag and <see cref="F:Win32.PFD.SUPPORT_GDI"/>
            are mutually exclusive in the current generic implementation.
            </summary>
        </member>
        <member name="F:Win32.PFD.STEREO">
            <summary>
            The buffer is stereoscopic. This flag is not supported in the current generic implementation.
            </summary>
        </member>
        <member name="F:Win32.PFD.DRAW_TO_WINDOW">
            <summary>
            The buffer can draw to a window or device surface.
            </summary>
        </member>
        <member name="F:Win32.PFD.DRAW_TO_BITMAP">
            <summary>
            The buffer can draw to a memory bitmap.
            </summary>
        </member>
        <member name="F:Win32.PFD.SUPPORT_GDI">
            <summary>
            The buffer supports GDI drawing. This flag and <see cref="F:Win32.PFD.DOUBLEBUFFER"/>
            are mutually exclusive in the current generic implementation.
            </summary>
        </member>
        <member name="F:Win32.PFD.SUPPORT_OPENGL">
            <summary>
            The buffer supports OpenGL drawing.
            </summary>
        </member>
        <member name="F:Win32.PFD.GENERIC_FORMAT">
            <summary>
            The pixel format is supported by the GDI software implementation, which is
            also known as the generic implementation. If this bit is clear, the pixel
            format is supported by a device driver or hardware.
            </summary>
        </member>
        <member name="F:Win32.PFD.NEED_PALETTE">
            <summary>
            The buffer uses RGBA pixels on a palette-managed device.
            </summary>
        </member>
        <member name="F:Win32.PFD.NEED_SYSTEM_PALETTE">
            <summary>
            Defined in the pixel format descriptors of hardware that supports one hardware palette in 256-color mode only.
            </summary>
        </member>
        <member name="F:Win32.PFD.SWAP_EXCHANGE">
            <summary>
            Swapping the color buffers causes the exchange of the back buffer's content with the front buffer's content.
            </summary>
        </member>
        <member name="F:Win32.PFD.SWAP_COPY">
            <summary>
            Swapping the color buffers causes the content of the back buffer to be copied to the front buffer.
            </summary>
        </member>
        <member name="F:Win32.PFD.SWAP_LAYER_BUFFERS">
            <summary>
            Indicates whether a device can swap individual layer planes with pixel formats that
            include double-buffered overlay or underlay planes. Otherwise all layer planes are
            swapped together as a group.
            </summary>
        </member>
        <member name="F:Win32.PFD.GENERIC_ACCELERATED">
            <summary>
            The pixel format is supported by a device driver that accelerates the generic implementation (MCD).
            If this flag is clear and the <see cref="F:Win32.PFD.GENERIC_FORMAT"/> flag is set, the pixel format is
            supported by the generic implementation only.
            </summary>
        </member>
        <member name="F:Win32.PFD.SUPPORT_DIRECTDRAW">
            <summary>
            The pixel buffer supports DirectDraw drawing, which allows applications
            to have low-level control of the output drawing surface.
            </summary>
        </member>
        <member name="F:Win32.PFD.DIRECT3D_ACCELERATED">
            <summary>
            The pixel buffer supports Direct3D drawing, which accellerated rendering
            in three dimensions.
            </summary>
        </member>
        <member name="F:Win32.PFD.SUPPORT_COMPOSITION">
            <summary>
            The pixel buffer supports compositing, which indicates that source pixels
            MAY overwrite or be combined with background pixels.
            </summary>
        </member>
        <member name="F:Win32.PFD.DEPTH_DONTCARE">
            <summary>
            The requested pixel format can either have or not have a depth buffer. Only used in <see cref="M:Win32.DeviceContext.ChoosePixelFormat(System.IntPtr,Win32.PixelFormatDescriptor@)"/>.
            </summary>
        </member>
        <member name="F:Win32.PFD.DOUBLEBUFFER_DONTCARE">
            <summary>
            The requested pixel format can be either single- or double-buffered. Only used in <see cref="M:Win32.DeviceContext.ChoosePixelFormat(System.IntPtr,Win32.PixelFormatDescriptor@)"/>.
            </summary>
        </member>
        <member name="F:Win32.PFD.STEREO_DONTCARE">
            <summary>
            The requested pixel format can be either monoscopic or stereoscopic. Only used in <see cref="M:Win32.DeviceContext.ChoosePixelFormat(System.IntPtr,Win32.PixelFormatDescriptor@)"/>.
            </summary>
        </member>
        <member name="F:Win32.PFD.Default">
            <summary>
            Combination of <see cref="F:Win32.PFD.DRAW_TO_WINDOW"/>, <see cref="F:Win32.PFD.SUPPORT_OPENGL"/>, <see cref="F:Win32.PFD.DOUBLEBUFFER"/> and <see cref="F:Win32.PFD.SUPPORT_COMPOSITION"/>.
            </summary>
        </member>
        <member name="T:Win32.PFD_TYPE">
            <summary>
            Specifies pixel types.
            </summary>
        </member>
        <member name="F:Win32.PFD_TYPE.RGBA">
            <summary>
            RGBA pixels.
            </summary>
        </member>
        <member name="F:Win32.PFD_TYPE.COLORINDEX">
            <summary>
            Color-index pixels.
            </summary>
        </member>
        <member name="T:Win32.DeviceContext">
            <summary>
            Class containing function of the GDI relevant for OpenGL initialization.
            </summary>
        </member>
        <member name="M:Win32.DeviceContext.ChoosePixelFormat(System.IntPtr,Win32.PixelFormatDescriptor@)">
            <summary>
            Attempts to match an appropriate pixel format supported by a device context to a given pixel format specification.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="ppfd">A <see cref="T:Win32.PixelFormatDescriptor"/> structure specifying the pixel format.
            <see cref="F:Win32.PixelFormatDescriptor.nSize"/> must be initialized with the size of <see cref="T:Win32.PixelFormatDescriptor"/>.</param>
            <returns>If successful the pixel format (greater zero), ohterwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.DeviceContext.DescribePixelFormat(System.IntPtr,System.Int32,System.UInt32,Win32.PixelFormatDescriptor@)">
            <summary>
            Obtains information about the pixel format.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="iPixelFormat">The pixel format.</param>
            <param name="nBytes">The size of the structure pointed to by <paramref name="ppfd"/> (<see cref="T:Win32.PixelFormatDescriptor"/>).</param>
            <param name="ppfd">Returns the pixel format specification.</param>
            <returns>If the function succeeds, the return value is the maximum pixel format index of
            the device context, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.DeviceContext.DescribePixelFormat(System.IntPtr,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            Obtains information about the pixel format.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="iPixelFormat">The pixel format.</param>
            <param name="nBytes">The size of the structure pointed to by <paramref name="ppfd"/> (<see cref="T:Win32.PixelFormatDescriptor"/>).</param>
            <param name="ppfd">Returns the pixel format specification. Set 0 (zero) if only the maximum pixel format index of the device context is to be returned.</param>
            <returns>If the function succeeds, the return value is the maximum pixel format index of
            the device context, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.DeviceContext.SetPixelFormat(System.IntPtr,System.Int32,Win32.PixelFormatDescriptor@)">
            <summary>
            Sets the pixel format of a device context. This is possible only once!
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="iPixelFormat">The pixel format.</param>
            <param name="ppfd">>A <see cref="T:Win32.PixelFormatDescriptor"/> structure specifying the pixel format.
            <see cref="F:Win32.PixelFormatDescriptor.nSize"/> must be initialized with the size of <see cref="T:Win32.PixelFormatDescriptor"/>.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.DeviceContext.GetPixelFormat(System.IntPtr)">
            <summary>
            Returns the index of the pixel format currently used by a device context.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <returns>The pixel format.</returns>
        </member>
        <member name="M:Win32.DeviceContext.SwapBuffers(System.IntPtr)">
            <summary>
            Swaps the front and back buffers of a device context.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Win32.PixelFormatDescriptor">
            <summary>
            Describes the pixel format of a drawing surface.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.nSize">
            <summary>
            Specifies the size of this data structure. This value should be set to <c>Marshal.Sizeof(new PixelFormatDescriptor())</c>.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.nVersion">
            <summary>
            Specifies the version of this data structure. This value should be set to 1.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.dwFlags">
            <summary>
            Specifies the pixel format flags. See <see cref="T:Win32.PFD"/> for more informations.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.iPixelType">
            <summary>
            Specifies the pixel type. See <see cref="T:Win32.PFD_TYPE"/> for more informations.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cColorBits">
            <summary>
            Specifies the number of color bitplanes in each color buffer. For RGBA pixel types, it is
            the size of the color buffer, excluding the alpha bitplanes. For color-index pixels, it is
            the size of the color-index buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cRedBits">
            <summary>
            Specifies the number of red bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cRedShift">
            <summary>
            Specifies the shift count for red bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cGreenBits">
            <summary>
            Specifies the number of green bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cGreenShift">
            <summary>
            Specifies the shift count for green bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cBlueBits">
            <summary>
            Specifies the number of blue bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cBlueShift">
            <summary>
            Specifies the shift count for blue bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAlphaBits">
            <summary>
            Specifies the number of alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAlphaShift">
            <summary>
            Specifies the shift count for alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAccumBits">
            <summary>
            Specifies the total number of bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAccumRedBits">
            <summary>
            Specifies the number of red bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAccumGreenBits">
            <summary>
            Specifies the number of green bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAccumBlueBits">
            <summary>
            Specifies the number of blue bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAccumAlphaBits">
            <summary>
            Specifies the number of alpha bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cDepthBits">
            <summary>
            Specifies the depth of the depth (z-axis) buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cStencilBits">
            <summary>
            Specifies the depth of the stencil buffer.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.cAuxBuffers">
            <summary>
            Specifies the number of auxiliary buffers. Auxiliary buffers are not supported.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.iLayerType">
            <summary>
            Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.bReserved">
            <summary>
            Specifies the number of overlay and underlay planes. Bits 0 through 3 specify up to
            15 overlay planes and bits 4 through 7 specify up to 15 underlay planes.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.dwLayerMask">
            <summary>
            Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.dwVisibleMask">
            <summary>
            Specifies the transparent color or index of an underlay plane. When the pixel type is
            RGBA, <b>dwVisibleMask</b> is a transparent RGB color value. When the pixel type is color
            index, it is a transparent index value.
            </summary>
        </member>
        <member name="F:Win32.PixelFormatDescriptor.dwDamageMask">
            <summary>
            Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            </summary>
        </member>
        <member name="M:Win32.PixelFormatDescriptor.#ctor(Win32.PFD)">
            <summary>
            Initializes the structure.
            </summary>
            <param name="flags">A <see cref="T:Win32.PFD"/>-bitmask specifying pixel format flags.</param>
        </member>
        <member name="T:Win32.CDS">
            <summary>
            Specifies flags for <see cref="O:Win32.DisplayMode.ChangeDisplaySettings">DisplayMode.ChangeDisplaySettings</see> and
            <see cref="O:Win32.DisplayMode.ChangeDisplaySettingsEx">DisplayMode.ChangeDisplaySettingsEx</see>.
            </summary>
        </member>
        <member name="F:Win32.CDS.NONE">
            <summary>
            The graphics mode for the current screen will be changed dynamically.
            </summary>
        </member>
        <member name="F:Win32.CDS.UPDATEREGISTRY">
            <summary>
            The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.
            </summary>
        </member>
        <member name="F:Win32.CDS.TEST">
            <summary>
            The system tests if the requested graphics mode could be set.
            </summary>
        </member>
        <member name="F:Win32.CDS.FULLSCREEN">
            <summary>
            The mode is temporary in nature.
            If you change to and from another desktop, this mode will not be reset.
            </summary>
        </member>
        <member name="F:Win32.CDS.GLOBAL">
            <summary>
            The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the <see cref="F:Win32.CDS.UPDATEREGISTRY"/> flag.
            </summary>
        </member>
        <member name="F:Win32.CDS.SET_PRIMARY">
            <summary>
            This device will become the primary device.
            </summary>
        </member>
        <member name="F:Win32.CDS.VIDEOPARAMETERS">
            <summary>
            When set, the <c>lParam</c> parameter of <see cref="O:Win32.DisplayMode.ChangeDisplaySettingsEx">DisplayMode.ChangeDisplaySettingsEx</see> is a pointer to a <see cref="T:Win32.VideoParameters"/> structure.
            </summary>
        </member>
        <member name="F:Win32.CDS.ENABLE_UNSAFE_MODES">
            <summary>
            Enables settings changes to unsafe graphics modes.
            </summary>
        </member>
        <member name="F:Win32.CDS.DISABLE_UNSAFE_MODES">
            <summary>
            Disables settings changes to unsafe graphics modes.
            </summary>
        </member>
        <member name="F:Win32.CDS.RESET">
            <summary>
            The settings should be changed, even if the requested settings are the same as the current settings.
            </summary>
        </member>
        <member name="F:Win32.CDS.RESET_EX">
            <summary>
            The settings should be changed, even if the requested settings are the same as the current settings.
            </summary>
        </member>
        <member name="F:Win32.CDS.NORESET">
            <summary>
            The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the <see cref="F:Win32.CDS.UPDATEREGISTRY"/> flag.
            </summary>
        </member>
        <member name="T:Win32.DisplaySettingsMode">
            <summary>
            Specifies special mode numbers of <see cref="O:Win32.DisplayMode.EnumDisplaySettings">DisplayMode.EnumDisplaySettings</see> and
            <see cref="O:Win32.DisplayMode.EnumDisplaySettingsEx">DisplayMode.EnumDisplaySettingsEx</see>.
            </summary>
        </member>
        <member name="F:Win32.DisplaySettingsMode.ENUM_CURRENT_SETTINGS">
            <summary>
            Retrieve the current settings for the display device.
            </summary>
        </member>
        <member name="F:Win32.DisplaySettingsMode.ENUM_REGISTRY_SETTINGS">
            <summary>
            Retrieve the settings for the display device that are currently stored in the registry.
            </summary>
        </member>
        <member name="T:Win32.DISP_CHANGE">
            <summary>
            Specifies return values for <see cref="O:Win32.DisplayMode.ChangeDisplaySettings">DisplayMode.ChangeDisplaySettings</see>.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.SUCCESSFUL">
            <summary>
            The settings change was successful.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.RESTART">
            <summary>
            The computer must be restarted for the graphics mode to work.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.FAILED">
            <summary>
            The display driver failed the specified graphics mode.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.BADMODE">
            <summary>
            The graphics mode is not supported.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.NOTUPDATED">
            <summary>
            Unable to write settings to the registry.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.BADFLAGS">
            <summary>
            An invalid set of flags was passed in.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.BADPARAM">
            <summary>
            An invalid parameter was passed in. This can include an invalid flag or combination of flags.
            </summary>
        </member>
        <member name="F:Win32.DISP_CHANGE.BADDUALVIEW">
            <summary>
            The settings change was unsuccessful because the system is DualView capable.
            </summary>
        </member>
        <member name="T:Win32.DM">
            <summary>
            Specifies which members of the <see cref="T:Win32.DevMode"/> structure have been initialized.
            </summary>
        </member>
        <member name="F:Win32.DM.ORIENTATION">
            <summary>
            <see cref="F:Win32.DevMode.dmOrientation"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PAPERSIZE">
            <summary>
            <see cref="F:Win32.DevMode.dmPaperSize"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PAPERLENGTH">
            <summary>
            <see cref="F:Win32.DevMode.dmPaperLength"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PAPERWIDTH">
            <summary>
            <see cref="F:Win32.DevMode.dmPaperWidth"/>
            </summary>
        </member>
        <member name="F:Win32.DM.SCALE">
            <summary>
            <see cref="F:Win32.DevMode.dmScale"/>
            </summary>
        </member>
        <member name="F:Win32.DM.POSITION">
            <summary>
            <see cref="F:Win32.DevMode.dmPosition"/>
            </summary>
        </member>
        <member name="F:Win32.DM.NUP">
            <summary>
            <see cref="F:Win32.DevMode.dmNup"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DISPLAYORIENTATION">
            <summary>
            <see cref="F:Win32.DevMode.dmDisplayOrientation"/>
            </summary>
        </member>
        <member name="F:Win32.DM.COPIES">
            <summary>
            <see cref="F:Win32.DevMode.dmCopies"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DEFAULTSOURCE">
            <summary>
            <see cref="F:Win32.DevMode.dmDefaultSource"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PRINTQUALITY">
            <summary>
            <see cref="F:Win32.DevMode.dmPrintQuality"/>
            </summary>
        </member>
        <member name="F:Win32.DM.COLOR">
            <summary>
            <see cref="F:Win32.DevMode.dmColor"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DUPLEX">
            <summary>
            <see cref="F:Win32.DevMode.dmDuplex"/>
            </summary>
        </member>
        <member name="F:Win32.DM.YRESOLUTION">
            <summary>
            <see cref="F:Win32.DevMode.dmYResolution"/>
            </summary>
        </member>
        <member name="F:Win32.DM.TTOPTION">
            <summary>
            <see cref="F:Win32.DevMode.dmTTOption"/>
            </summary>
        </member>
        <member name="F:Win32.DM.COLLATE">
            <summary>
            <see cref="F:Win32.DevMode.dmCollate"/>
            </summary>
        </member>
        <member name="F:Win32.DM.FORMNAME">
            <summary>
            <see cref="F:Win32.DevMode.dmFormName"/>
            </summary>
        </member>
        <member name="F:Win32.DM.LOGPIXELS">
            <summary>
            <see cref="F:Win32.DevMode.dmLogPixels"/>
            </summary>
        </member>
        <member name="F:Win32.DM.BITSPERPEL">
            <summary>
            <see cref="F:Win32.DevMode.dmBitsPerPel"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PELSWIDTH">
            <summary>
            <see cref="F:Win32.DevMode.dmPelsWidth"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PELSHEIGHT">
            <summary>
            <see cref="F:Win32.DevMode.dmPelsHeight"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DISPLAYFLAGS">
            <summary>
            <see cref="F:Win32.DevMode.dmDisplayFlags"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DISPLAYFREQUENCY">
            <summary>
            <see cref="F:Win32.DevMode.dmDisplayFrequency"/>
            </summary>
        </member>
        <member name="F:Win32.DM.ICMMETHOD">
            <summary>
            <see cref="F:Win32.DevMode.dmICMMethod"/>
            </summary>
        </member>
        <member name="F:Win32.DM.ICMINTENT">
            <summary>
            <see cref="F:Win32.DevMode.dmICMIntent"/>
            </summary>
        </member>
        <member name="F:Win32.DM.MEDIATYPE">
            <summary>
            <see cref="F:Win32.DevMode.dmMediaType"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DITHERTYPE">
            <summary>
            <see cref="F:Win32.DevMode.dmDitherType"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PANNINGWIDTH">
            <summary>
            <see cref="F:Win32.DevMode.dmPanningWidth"/>
            </summary>
        </member>
        <member name="F:Win32.DM.PANNINGHEIGHT">
            <summary>
            <see cref="F:Win32.DevMode.dmPanningHeight"/>
            </summary>
        </member>
        <member name="F:Win32.DM.DISPLAYFIXEDOUTPUT">
            <summary>
            <see cref="F:Win32.DevMode.dmDisplayFixedOutput"/>
            </summary>
        </member>
        <member name="F:Win32.DM.UPDATE">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.DM.COPY">
            <summary>
            The function writes the printer driver's current print settings, including private data, to the <see cref="T:Win32.DevMode"/> data
            structure supplied by the caller. The caller must allocate a buffer sufficiently large to contain the information.
            This value is also defined as <see cref="F:Win32.DM.OUT_BUFFER"/>.
            </summary>
        </member>
        <member name="F:Win32.DM.PROMPT">
            <summary>
            The function presents the printer driver's Print Setup property sheet and then changes the settings in the printer's
            <see cref="T:Win32.DevMode"/> data structure to those values specified by the user. This value is also defined as <see cref="F:Win32.DM.IN_PROMPT"/>.
            </summary>
        </member>
        <member name="F:Win32.DM.MODIFY">
            <summary>
            The caller has supplied a <see cref="T:Win32.DevMode"/> structure, the function update its internal <see cref="T:Win32.DevMode"/>
            structure to reflect the contents of the supplied <see cref="T:Win32.DevMode"/>.
            This value is also defined as <see cref="F:Win32.DM.IN_BUFFER"/>.
            </summary>
        </member>
        <member name="F:Win32.DM.IN_BUFFER">
            <summary>
            The caller has supplied a <see cref="T:Win32.DevMode"/> structure, the function update its internal <see cref="T:Win32.DevMode"/>
            structure to reflect the contents of the supplied <see cref="T:Win32.DevMode"/>.
            This value is also defined as <see cref="F:Win32.DM.MODIFY"/>.
            </summary>
        </member>
        <member name="F:Win32.DM.IN_PROMPT">
            <summary>
            The function presents the printer driver's Print Setup property sheet and then changes the settings in the printer's
            <see cref="T:Win32.DevMode"/> data structure to those values specified by the user. This value is also defined as <see cref="F:Win32.DM.PROMPT"/>.
            </summary>
        </member>
        <member name="F:Win32.DM.OUT_BUFFER">
            <summary>
            The function writes the printer driver's current print settings, including private data, to the <see cref="T:Win32.DevMode"/> data
            structure supplied by the caller. The caller must allocate a buffer sufficiently large to contain the information.
            This value is also defined as <see cref="F:Win32.DM.COPY"/>.
            </summary>
        </member>
        <member name="F:Win32.DM.OUT_DEFAULT">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="T:Win32.DMBIN">
            <summary>
            Specifies the paper source.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.ONLYONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Win32.DMBIN.UPPER">
            <summary>
            Upper.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.LOWER">
            <summary>
            Lower.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.MIDDLE">
            <summary>
            Middle.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.MANUAL">
            <summary>
            Manual.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.ENVELOPE">
            <summary>
            Envelope.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.ENVMANUAL">
            <summary>
            Envelope manual.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.AUTO">
            <summary>
            Auto.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.TRACTOR">
            <summary>
            Tractor.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.SMALLFMT">
            <summary>
            Smale format.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.LARGEFMT">
            <summary>
            Large format.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.LARGECAPACITY">
            <summary>
            Large capacity.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.CASSETTE">
            <summary>
            Casette.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.FORMSOURCE">
            <summary>
            Form source.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.FIRST">
            <summary>
            First predefined paper source.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.LAST">
            <summary>
            Last predefined paper source.
            </summary>
        </member>
        <member name="F:Win32.DMBIN.USER">
            <summary>
            Start of the user-defined paper sources.
            </summary>
        </member>
        <member name="T:Win32.DMCOLLATE">
            <summary>
            Specifies whether collation should be used when printing multiple copies.
            </summary>
        </member>
        <member name="F:Win32.DMCOLLATE.FALSE">
            <summary>
            Do not collate when printing multiple copies.
            </summary>
        </member>
        <member name="F:Win32.DMCOLLATE.TRUE">
            <summary>
            Collate when printing multiple copies.
            </summary>
        </member>
        <member name="T:Win32.DMCOLOR">
            <summary>
            Switches between color and monochrome on color printers.
            </summary>
        </member>
        <member name="F:Win32.DMCOLOR.MONOCHROME">
            <summary>
            Print monochrome on color printers.
            </summary>
        </member>
        <member name="F:Win32.DMCOLOR.COLOR">
            <summary>
            Print color on color printers.
            </summary>
        </member>
        <member name="T:Win32.DMDFO">
            <summary>
            For fixed-resolution display devices only, how the display presents a low-resolution mode on a higher-resolution display.
            </summary>
        </member>
        <member name="F:Win32.DMDFO.DEFAULT">
            <summary>
            The display's default setting.
            </summary>
        </member>
        <member name="F:Win32.DMDFO.STRETCH">
            <summary>
            The low-resolution image is stretched to fill the larger screen space.
            </summary>
        </member>
        <member name="F:Win32.DMDFO.CENTER">
            <summary>
            The low-resolution image is centered in the larger screen space.
            </summary>
        </member>
        <member name="T:Win32.DMDISPLAYFLAGS">
            <summary>
            Specifies the device's display mode.
            </summary>
        </member>
        <member name="F:Win32.DMDISPLAYFLAGS.GRAYSCALE">
            <summary>
            Specifies that the display is a noncolor device. If this flag is not set, color is assumed.
            </summary>
        </member>
        <member name="F:Win32.DMDISPLAYFLAGS.INTERLACED">
            <summary>
            Specifies that the display mode is interlaced. If the flag is not set, noninterlaced is assumed.
            </summary>
        </member>
        <member name="F:Win32.DMDISPLAYFLAGS.TEXTMODE">
            <summary>
            Specifies that the display mode is text. If the flag is not set, graphic is assumed.
            </summary>
        </member>
        <member name="T:Win32.DMDITHER">
            <summary>
            Specifies how dithering is to be done.
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.NONE">
            <summary>
            No dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.COARSE">
            <summary>
            Dither with a coarse brush
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.FINE">
            <summary>
            Dither with a fine brush
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.LINEART">
            <summary>
            LineArt dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.ERRORDIFFUSION">
            <summary>
            LineArt dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.RESERVED6">
            <summary>
            LineArt dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.RESERVED7">
            <summary>
            LineArt dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.RESERVED8">
            <summary>
            LineArt dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.RESERVED9">
            <summary>
            LineArt dithering
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.GRAYSCALE">
            <summary>
            Device does grayscaling
            </summary>
        </member>
        <member name="F:Win32.DMDITHER.USER">
            <summary>
            Start of the user-defined dithers.
            </summary>
        </member>
        <member name="T:Win32.DMDO">
            <summary>
            For display devices only, the orientation at which images should be presented.
            </summary>
        </member>
        <member name="F:Win32.DMDO.DEFAULT">
            <summary>
            The display orientation is the natural orientation of the display device; it should be used as the default.
            </summary>
        </member>
        <member name="F:Win32.DMDO._90">
            <summary>
            The display orientation is rotated 90 degrees (measured clockwise) from <see cref="F:Win32.DMDO.DEFAULT"/>.
            </summary>
        </member>
        <member name="F:Win32.DMDO._180">
            <summary>
            The display orientation is rotated 180 degrees (measured clockwise) from <see cref="F:Win32.DMDO.DEFAULT"/>.
            </summary>
        </member>
        <member name="F:Win32.DMDO._270">
            <summary>
            The display orientation is rotated 270 degrees (measured clockwise) from <see cref="F:Win32.DMDO.DEFAULT"/>.
            </summary>
        </member>
        <member name="T:Win32.DMDUP">
            <summary>
            Selects duplex or double-sided printing for printers capable of duplex printing.
            </summary>
        </member>
        <member name="F:Win32.DMDUP.SIMPLEX">
            <summary>
            Normal (nonduplex) printing.
            </summary>
        </member>
        <member name="F:Win32.DMDUP.HORIZONTAL">
            <summary>
            Short-edge binding, that is, the long edge of the page is horizontal.
            </summary>
        </member>
        <member name="F:Win32.DMDUP.VERTICAL">
            <summary>
            Long-edge binding, that is, the long edge of the page is vertical.
            </summary>
        </member>
        <member name="T:Win32.DMICM">
            <summary>
            Specifies which color matching method, or intent, should be used by default.
            </summary>
        </member>
        <member name="F:Win32.DMICM.SATURATE">
            <summary>
            Color matching should optimize for color saturation. This value is the most appropriate choice for business graphs when dithering is not desired.
            </summary>
        </member>
        <member name="F:Win32.DMICM.CONTRAST">
            <summary>
            Color matching should optimize for color contrast. This value is the most appropriate choice for scanned or photographic images when dithering is desired.
            </summary>
        </member>
        <member name="F:Win32.DMICM.COLORIMETRIC">
            <summary>
            Color matching should optimize to match the exact color requested. This value is most appropriate for use with business logos or other images when an exact color match is desired.
            </summary>
        </member>
        <member name="F:Win32.DMICM.ABS_COLORIMETRIC">
            <summary>
            Color matching should optimize to match the exact color requested without white point mapping. This value is most appropriate for use with proofing.
            </summary>
        </member>
        <member name="F:Win32.DMICM.USER">
            <summary>
            Start of the user-defined color matching methods.
            </summary>
        </member>
        <member name="T:Win32.DMICMMETHOD">
            <summary>
            Specifies how ICM is handled. For a non-ICM application, this member determines if ICM is enabled or disabled.
            </summary>
        </member>
        <member name="F:Win32.DMICMMETHOD.NONE">
            <summary>
            Specifies that ICM is disabled.
            </summary>
        </member>
        <member name="F:Win32.DMICMMETHOD.SYSTEM">
            <summary>
            Specifies that ICM is handled by Windows.
            </summary>
        </member>
        <member name="F:Win32.DMICMMETHOD.DRIVER">
            <summary>
            Specifies that ICM is handled by the device driver.
            </summary>
        </member>
        <member name="F:Win32.DMICMMETHOD.DEVICE">
            <summary>
            Specifies that ICM is handled by the destination device.
            </summary>
        </member>
        <member name="F:Win32.DMICMMETHOD.USER">
            <summary>
            Start of the user-defined methods.
            </summary>
        </member>
        <member name="T:Win32.DMMEDIA">
            <summary>
            Specifies the type of media being printed on.
            </summary>
        </member>
        <member name="F:Win32.DMMEDIA.STANDARD">
            <summary>
            Plain paper.
            </summary>
        </member>
        <member name="F:Win32.DMMEDIA.TRANSPARENCY">
            <summary>
            Transparent film.
            </summary>
        </member>
        <member name="F:Win32.DMMEDIA.GLOSSY">
            <summary>
            Glossy paper.
            </summary>
        </member>
        <member name="F:Win32.DMMEDIA.USER">
            <summary>
            Start of the user-defined media types.
            </summary>
        </member>
        <member name="T:Win32.DMNUP">
            <summary>
            Specifies where the NUP is done.
            </summary>
        </member>
        <member name="F:Win32.DMNUP.SYSTEM">
            <summary>
            The print spooler does the NUP.
            </summary>
        </member>
        <member name="F:Win32.DMNUP.ONEUP">
            <summary>
            The application does the NUP.
            </summary>
        </member>
        <member name="T:Win32.DMORIENT">
            <summary>
            For printer devices only, selects the orientation of the paper.
            </summary>
        </member>
        <member name="F:Win32.DMORIENT.PORTRAIT">
            <summary>
            Portrait.
            </summary>
        </member>
        <member name="F:Win32.DMORIENT.LANDSCAPE">
            <summary>
            Landscape.
            </summary>
        </member>
        <member name="T:Win32.DMPAPER">
            <summary>
            For printer devices only, selects the size of the paper to print on.
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTER">
            <summary>
            Letter 8 1/2 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTERSMALL">
            <summary>
            Letter Small 8 1/2 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.TABLOID">
            <summary>
            Tabloid 11 x 17 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LEDGER">
            <summary>
            Ledger 17 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LEGAL">
            <summary>
            Legal 8 1/2 x 14 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.STATEMENT">
            <summary>
            Statement 5 1/2 x 8 1/2 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.EXECUTIVE">
            <summary>
            Executive 7 1/4 x 10 1/2 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A3">
            <summary>
            A3 297 x 420 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A4">
            <summary>
            A4 210 x 297 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A4SMALL">
            <summary>
            A4 Small 210 x 297 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A5">
            <summary>
            A5 148 x 210 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B4">
            <summary>
            B4 (JIS) 250 x 354
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B5">
            <summary>
            B5 (JIS) 182 x 257 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.FOLIO">
            <summary>
            Folio 8 1/2 x 13 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.QUARTO">
            <summary>
            Quarto 215 x 275 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER._10X14">
            <summary>
            10x14 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER._11X17">
            <summary>
            11x17 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.NOTE">
            <summary>
            Note 8 1/2 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_9">
            <summary>
            Envelope #9 3 7/8 x 8 7/8
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_10">
            <summary>
            Envelope #10 4 1/8 x 9 1/2
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_11">
            <summary>
            Envelope #11 4 1/2 x 10 3/8
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_12">
            <summary>
            Envelope #12 4 3/4 x 11
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_14">
            <summary>
            Envelope #14 5 x 11 1/2
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.CSHEET">
            <summary>
            C size sheet
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.DSHEET">
            <summary>
            D size sheet
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ESHEET">
            <summary>
            E size sheet
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_DL">
            <summary>
            Envelope DL 110 x 220mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_C5">
            <summary>
            Envelope C5 162 x 229 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_C3">
            <summary>
            Envelope C3 324 x 458 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_C4">
            <summary>
            Envelope C4 229 x 324 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_C6">
            <summary>
            Envelope C6 114 x 162 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_C65">
            <summary>
            Envelope C65 114 x 229 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_B4">
            <summary>
            Envelope B4 250 x 353 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_B5">
            <summary>
            Envelope B5 176 x 250 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_B6">
            <summary>
            Envelope B6 176 x 125 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_ITALY">
            <summary>
            Envelope 110 x 230 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_MONARCH">
            <summary>
            Envelope Monarch 3.875 x 7.5 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_PERSONAL">
            <summary>
            6 3/4 Envelope 3 5/8 x 6 1/2 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.FANFOLD_US">
            <summary>
            US Std Fanfold 14 7/8 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.FANFOLD_STD_GERMAN">
            <summary>
            German Std Fanfold 8 1/2 x 12 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.FANFOLD_LGL_GERMAN">
            <summary>
            German Legal Fanfold 8 1/2 x 13 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ISO_B4">
            <summary>
            B4 (ISO) 250 x 353 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JAPANESE_POSTCARD">
            <summary>
            Japanese Postcard 100 x 148 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER._9X11">
            <summary>
            9 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER._10X11">
            <summary>
            10 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER._15X11">
            <summary>
            15 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.ENV_INVITE">
            <summary>
            Envelope Invite 220 x 220 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.RESERVED_48">
            <summary>
            RESERVED--DO NOT USE
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.RESERVED_49">
            <summary>
            RESERVED--DO NOT USE
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTER_EXTRA">
            <summary>
            Letter Extra 9 1/2 x 12 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LEGAL_EXTRA">
            <summary>
            Legal Extra 9 1/2 x 15 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.TABLOID_EXTRA">
            <summary>
            Tabloid Extra 11.69 x 18 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A4_EXTRA">
            <summary>
            A4 Extra 9.27 x 12.69 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTER_TRANSVERSE">
            <summary>
            Letter Transverse 8 1/2 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A4_TRANSVERSE">
            <summary>
            A4 Transverse 210 x 297 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTER_EXTRA_TRANSVERSE">
            <summary>
            Letter Extra Transverse 9 1/2 x 12 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A_PLUS">
            <summary>
            SuperA/SuperA/A4 227 x 356 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B_PLUS">
            <summary>
            SuperB/SuperB/A3 305 x 487 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTER_PLUS">
            <summary>
            Letter Plus 8.5 x 12.69 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A4_PLUS">
            <summary>
            A4 Plus 210 x 330 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A5_TRANSVERSE">
            <summary>
            A5 Transverse 148 x 210 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B5_TRANSVERSE">
            <summary>
            B5 (JIS) Transverse 182 x 257 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A3_EXTRA">
            <summary>
            A3 Extra 322 x 445 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A5_EXTRA">
            <summary>
            A5 Extra 174 x 235 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B5_EXTRA">
            <summary>
            B5 (ISO) Extra 201 x 276 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A2">
            <summary>
            A2 420 x 594 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A3_TRANSVERSE">
            <summary>
            A3 Transverse 297 x 420 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A3_EXTRA_TRANSVERSE">
            <summary>
            A3 Extra Transverse 322 x 445 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.DBL_JAPANESE_POSTCARD">
            <summary>
            Japanese Double Postcard 200 x 148 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A6">
            <summary>
            A6 105 x 148 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_KAKU2">
            <summary>
            Japanese Envelope Kaku #2
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_KAKU3">
            <summary>
            Japanese Envelope Kaku #3
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_CHOU3">
            <summary>
            Japanese Envelope Chou #3
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_CHOU4">
            <summary>
            Japanese Envelope Chou #4
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LETTER_ROTATED">
            <summary>
            Letter Rotated 11 x 8 1/2 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A3_ROTATED">
            <summary>
            A3 Rotated 420 x 297 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A4_ROTATED">
            <summary>
            A4 Rotated 297 x 210 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A5_ROTATED">
            <summary>
            A5 Rotated 210 x 148 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B4_JIS_ROTATED">
            <summary>
            B4 (JIS) Rotated 364 x 257 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B5_JIS_ROTATED">
            <summary>
            B5 (JIS) Rotated 257 x 182 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JAPANESE_POSTCARD_ROTATED">
            <summary>
            Japanese Postcard Rotated 148 x 100 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.DBL_JAPANESE_POSTCARD_ROTATED">
            <summary>
            Double Japanese Postcard Rotated 148 x 200 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.A6_ROTATED">
            <summary>
            A6 Rotated 148 x 105 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_KAKU2_ROTATED">
            <summary>
            Japanese Envelope Kaku #2 Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_KAKU3_ROTATED">
            <summary>
            Japanese Envelope Kaku #3 Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_CHOU3_ROTATED">
            <summary>
            Japanese Envelope Chou #3 Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_CHOU4_ROTATED">
            <summary>
            Japanese Envelope Chou #4 Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B6_JIS">
            <summary>
            B6 (JIS) 128 x 182 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.B6_JIS_ROTATED">
            <summary>
            B6 (JIS) Rotated 182 x 128 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER._12X11">
            <summary>
            12 x 11 in
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_YOU4">
            <summary>
            Japanese Envelope You #4
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.JENV_YOU4_ROTATED">
            <summary>
            Japanese Envelope You #4 Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.P16K">
            <summary>
            PRC 16K 146 x 215 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.P32K">
            <summary>
            PRC 32K 97 x 151 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.P32KBIG">
            <summary>
            PRC 32K(Big) 97 x 151 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_1">
            <summary>
            PRC Envelope #1 102 x 165 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_2">
            <summary>
            PRC Envelope #2 102 x 176 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_3">
            <summary>
            PRC Envelope #3 125 x 176 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_4">
            <summary>
            PRC Envelope #4 110 x 208 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_5">
            <summary>
            PRC Envelope #5 110 x 220 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_6">
            <summary>
            PRC Envelope #6 120 x 230 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_7">
            <summary>
            PRC Envelope #7 160 x 230 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_8">
            <summary>
            PRC Envelope #8 120 x 309 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_9">
            <summary>
            PRC Envelope #9 229 x 324 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_10">
            <summary>
            PRC Envelope #10 324 x 458 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.P16K_ROTATED">
            <summary>
            PRC 16K Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.P32K_ROTATED">
            <summary>
            PRC 32K Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.P32KBIG_ROTATED">
            <summary>
            PRC 32K(Big) Rotated
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_1_ROTATED">
            <summary>
            PRC Envelope #1 Rotated 165 x 102 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_2_ROTATED">
            <summary>
            PRC Envelope #2 Rotated 176 x 102 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_3_ROTATED">
            <summary>
            PRC Envelope #3 Rotated 176 x 125 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_4_ROTATED">
            <summary>
            PRC Envelope #4 Rotated 208 x 110 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_5_ROTATED">
            <summary>
            PRC Envelope #5 Rotated 220 x 110 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_6_ROTATED">
            <summary>
            PRC Envelope #6 Rotated 230 x 120 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_7_ROTATED">
            <summary>
            PRC Envelope #7 Rotated 230 x 160 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_8_ROTATED">
            <summary>
            PRC Envelope #8 Rotated 309 x 120 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_9_ROTATED">
            <summary>
            PRC Envelope #9 Rotated 324 x 229 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.PENV_10_ROTATED">
            <summary>
            PRC Envelope #10 Rotated 458 x 324 mm
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.FIRST">
            <summary>
            First predefined paper size.
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.LAST">
            <summary>
            Last predefined paper size.
            </summary>
        </member>
        <member name="F:Win32.DMPAPER.USER">
            <summary>
            Start of the user-defined paper sizes.
            </summary>
        </member>
        <member name="T:Win32.DMRES">
            <summary>
            Print quality.
            </summary>
        </member>
        <member name="F:Win32.DMRES.DRAFT">
            <summary>
            Draft quality.
            </summary>
        </member>
        <member name="F:Win32.DMRES.LOW">
            <summary>
            Low quality.
            </summary>
        </member>
        <member name="F:Win32.DMRES.MEDIUM">
            <summary>
            Medium quality.
            </summary>
        </member>
        <member name="F:Win32.DMRES.HIGH">
            <summary>
            High quality.
            </summary>
        </member>
        <member name="T:Win32.DMTT">
            <summary>
            Specifies how TrueType fonts should be printed.
            </summary>
        </member>
        <member name="F:Win32.DMTT.BITMAP">
            <summary>
            Print TT fonts as graphics.
            </summary>
        </member>
        <member name="F:Win32.DMTT.DOWNLOAD">
            <summary>
            Download TT fonts as soft fonts.
            </summary>
        </member>
        <member name="F:Win32.DMTT.SUBDEV">
            <summary>
            Substitute device fonts for TT fonts.
            </summary>
        </member>
        <member name="F:Win32.DMTT.DOWNLOAD_OUTLINE">
            <summary>
            Download TT fonts as outline soft fonts.
            </summary>
        </member>
        <member name="T:Win32.EDS">
            <summary>
            Specifies flags for <see cref="O:Win32.DisplayMode.EnumDisplaySettingsEx">DisplayMode.EnumDisplaySettingsEx</see>.
            </summary>
        </member>
        <member name="F:Win32.EDS.RAWMODE">
            <summary>
            If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.
            </summary>
        </member>
        <member name="F:Win32.EDS.ROTATEDMODE">
            <summary>
            If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.
            </summary>
        </member>
        <member name="T:Win32.VP_COMMAND">
            <summary>
            Specifies whether to retrieve or set the values that the other members of this structure specify.
            </summary>
        </member>
        <member name="F:Win32.VP_COMMAND.GET">
            <summary>
            Gets current video capabilities. If video capability is not supported, <see cref="F:Win32.VideoParameters.dwFlags"/> is 0.
            </summary>
        </member>
        <member name="F:Win32.VP_COMMAND.SET">
            <summary>
            Sets video parameters.
            </summary>
        </member>
        <member name="T:Win32.VP_CP_CMD">
            <summary>
            Specifies the copy protection command.
            </summary>
        </member>
        <member name="F:Win32.VP_CP_CMD.ACTIVATE">
            <summary>
            Activate copy protection.
            </summary>
        </member>
        <member name="F:Win32.VP_CP_CMD.DEACTIVATE">
            <summary>
            Deactivate copy protection.
            </summary>
        </member>
        <member name="F:Win32.VP_CP_CMD.CHANGE">
            <summary>
            Change copy protection.
            </summary>
        </member>
        <member name="T:Win32.VP_CP_TYPE">
            <summary>
            Specifies the copy protection type.
            </summary>
        </member>
        <member name="F:Win32.VP_CP_TYPE.APS_TRIGGER">
            <summary>
            Only DVD trigger bits available.
            </summary>
        </member>
        <member name="F:Win32.VP_CP_TYPE.MACROVISION">
            <summary>
            Full Macrovision data is available.
            </summary>
        </member>
        <member name="T:Win32.VP_FLAGS">
            <summary>
            Indicates the members that contain valid data.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.TV_MODE">
            <summary>
            <see cref="F:Win32.VideoParameters.dwMode"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.TV_STANDARD">
            <summary>
            <see cref="F:Win32.VideoParameters.dwTVStandard"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.FLICKER">
            <summary>
            <see cref="F:Win32.VideoParameters.dwFlickerFilter"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.OVERSCAN">
            <summary>
            <see cref="F:Win32.VideoParameters.dwOverScanX"/> and <see cref="F:Win32.VideoParameters.dwOverScanY"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.MAX_UNSCALED">
            <summary>
            <see cref="F:Win32.VideoParameters.dwMaxUnscaledX"/> and <see cref="F:Win32.VideoParameters.dwMaxUnscaledY"/>. Do not use if <see cref="F:Win32.VideoParameters.dwCommand"/> is <see cref="F:Win32.VP_COMMAND.SET"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.POSITION">
            <summary>
            <see cref="F:Win32.VideoParameters.dwPositionX"/> and <see cref="F:Win32.VideoParameters.dwPositionY"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.BRIGHTNESS">
            <summary>
            <see cref="F:Win32.VideoParameters.dwBrightness"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.CONTRAST">
            <summary>
            <see cref="F:Win32.VideoParameters.dwContrast"/>.
            </summary>
        </member>
        <member name="F:Win32.VP_FLAGS.COPYPROTECT">
            <summary>
            <see cref="F:Win32.VideoParameters.dwCPType"/>, <see cref="F:Win32.VideoParameters.dwCPCommand"/> and <see cref="F:Win32.VideoParameters.dwCPStandard"/>.
            </summary>
        </member>
        <member name="T:Win32.VP_MODE">
            <summary>
            Specifies the current playback mode.
            </summary>
        </member>
        <member name="F:Win32.VP_MODE.WIN_GRAPHICS">
            <summary>
            Describes a set of display settings that are optimal for display on a Windows Embedded CE-based device, with the flicker filter on and any overscan display off.
            </summary>
        </member>
        <member name="F:Win32.VP_MODE.TV_PLAYBACK">
            <summary>
            Describes a set of display settings for video playback, with the flicker filter off and the overscan display on.
            </summary>
        </member>
        <member name="T:Win32.VP_TV_STANDARD">
            <summary>
            Specifies the television standard.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.NTSC_M">
            <summary>
            NTSC television standard, type M.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.NTSC_M_J">
            <summary>
            NTSC television standard, type M, for Japan.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_B">
            <summary>
            PAL television standard, type B.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_D">
            <summary>
            PAL television standard, type D.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_H">
            <summary>
            PAL television standard, type H.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_I">
            <summary>
            PAL television standard, type I.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_M">
            <summary>
            PAL television standard, type M.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_N">
            <summary>
            PAL television standard, type N.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_B">
            <summary>
            Systeme Electronique Couleur avec Memoire (SECAM) television standard, type B.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_D">
            <summary>
            SECAM television standard, type D.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_G">
            <summary>
            SECAM television standard, type G.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_H">
            <summary>
            SECAM television standard, type H.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_K">
            <summary>
            SECAM television standard, type K.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_K1">
            <summary>
            SECAM television standard, type K1.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_L">
            <summary>
            SECAM television standard, type L.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.WIN_VGA">
            <summary>
            Video Graphic Adapter (VGA) monitor.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.NTSC_433">
            <summary>
            National Television Systems Committee (NTSC) video standard, with a subcarrier frequency of 4.33 megahertz (MHz).
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_G">
            <summary>
            PAL television standard, type G.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.PAL_60">
            <summary>
            Phase Alternation Line (PAL) 60 video standard that is used to play NTSC video.
            </summary>
        </member>
        <member name="F:Win32.VP_TV_STANDARD.SECAM_L1">
            <summary>
            SECAM television standard, type L1.
            </summary>
        </member>
        <member name="T:Win32.DisplayMode">
            <summary>
            Class for managing display modes.
            </summary>
        </member>
        <member name="F:Win32.DisplayMode.Width">
            <summary>
            Width of the display mode in pixels.
            </summary>
        </member>
        <member name="F:Win32.DisplayMode.Height">
            <summary>
            Height of the display mode in pixels.
            </summary>
        </member>
        <member name="F:Win32.DisplayMode.BitsPerPixel">
            <summary>
            Bits per pixel of the display mode.
            </summary>
        </member>
        <member name="F:Win32.DisplayMode.Frequency">
            <summary>
            Frequency of the display mode in Hertz (Hz)
            </summary>
        </member>
        <member name="P:Win32.DisplayMode.Description">
            <summary>
            Description of the display mode as string in the form of <c>"1280x960, 24 Bit, 75 Hz"</c>.
            </summary>
        </member>
        <member name="P:Win32.DisplayMode.Distinguisher">
            <summary>
            Description of the display mode as string in the form of <c>"1280x960, 75 Hz"</c>.
            </summary>
        </member>
        <member name="M:Win32.DisplayMode.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Win32.DisplayMode.Equals(System.Object)">
            <summary>
            Compares two instances.
            </summary>
            <param name="obj">The instance to compare with <c>this</c>.</param>
            <returns><b>true</b> if both instances are equal, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ToString">
            <summary>
            Description of the display mode as string in the form of <c>"[DisplayMode, 1280, 960, 24, 75]"</c>.
            </summary>
            <returns>The description.</returns>
        </member>
        <member name="M:Win32.DisplayMode.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates an instance of a display mode.
            </summary>
            <param name="width">Width of the display mode in pixels.</param>
            <param name="height">Height of the display mode in pixels.</param>
            <param name="bitsPerPixel">Bits per pixel of the display mode.</param>
            <param name="frequency">Frequency of the display mode in Hertz (Hz)</param>
        </member>
        <member name="M:Win32.DisplayMode.EnumDisplaySettings(System.String,Win32.DisplaySettingsMode,Win32.DevMode@)">
            <summary>
            Retrieves information about one of the graphics modes for a display device.
            </summary>
            <param name="lpszDeviceName">Specifies the display device.</param>
            <param name="iModeNum">The type of information to be retrieved.</param>
            <param name="lpDevMode">Returns the requested informations. <see cref="F:Win32.DevMode.dmSize"/> must be initialized with the size of <see cref="T:Win32.DevMode"/>.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.DisplayMode.EnumDisplaySettings(System.String,System.UInt32,Win32.DevMode@)">
            <summary>
            Retrieves information about one of the graphics modes for a display device.
            </summary>
            <param name="lpszDeviceName">Specifies the display device.</param>
            <param name="iModeNum">The type of information to be retrieved.</param>
            <param name="lpDevMode">Returns the requested informations. <see cref="F:Win32.DevMode.dmSize"/> must be initialized with the size of <see cref="T:Win32.DevMode"/>.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.DisplayMode.EnumDisplaySettingsEx(System.String,Win32.DisplaySettingsMode,Win32.DevMode@,Win32.EDS)">
            <summary>
            Retrieves information about one of the graphics modes for a display device.
            </summary>
            <param name="lpszDeviceName">Specifies the display device.</param>
            <param name="iModeNum">The type of information to be retrieved.</param>
            <param name="lpDevMode">Returns the requested informations. <see cref="F:Win32.DevMode.dmSize"/> must be initialized with the size of <see cref="T:Win32.DevMode"/>.</param>
            <param name="dwFlags">Extended flags for information retrival.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.DisplayMode.EnumDisplaySettingsEx(System.String,System.UInt32,Win32.DevMode@,Win32.EDS)">
            <summary>
            Retrieves information about one of the graphics modes for a display device.
            </summary>
            <param name="lpszDeviceName">Specifies the display device.</param>
            <param name="iModeNum">The type of information to be retrieved.</param>
            <param name="lpDevMode">Returns the requested informations. <see cref="F:Win32.DevMode.dmSize"/> must be initialized with the size of <see cref="T:Win32.DevMode"/>.</param>
            <param name="dwFlags">Extended flags for information retrival.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.DisplayMode.GetDisplayModes">
            <summary>
            Returns a list of available display modes. (No modes that are smaller than 640x480/60 Hz and less bit depth then the current mode will be returned.)
            </summary>
            <returns>The available display modes as list of <see cref="T:Win32.DisplayMode"/> objects.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ChangeDisplaySettings(Win32.DevMode@,Win32.CDS)">
            <summary>
            Changes the settings of the specified display device to the specified graphics mode.
            </summary>
            <param name="lpDevMode">A <see cref="T:Win32.DevMode"/> structure that describes the new graphics mode.</param>
            <param name="dwflags">A <see cref="T:Win32.CDS"/> specifying how the graphics mode should be changed.</param>
            <returns>A <see cref="T:Win32.DISP_CHANGE"/> specifying the result.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ChangeDisplaySettings(System.IntPtr,Win32.CDS)">
            <summary>
            Changes the settings of the specified display device to the specified graphics mode.
            </summary>
            <param name="lpDevMode">A pointer to a <see cref="T:Win32.DevMode"/> structure that describes the new graphics mode, or <b>0</b>.</param>
            <param name="dwflags">A <see cref="T:Win32.CDS"/> specifying how the graphics mode should be changed.</param>
            <returns>A <see cref="T:Win32.DISP_CHANGE"/> specifying the result.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ChangeDisplaySettingsEx(System.String,System.IntPtr,System.IntPtr,Win32.CDS,Win32.VideoParameters@)">
            <summary>
            Changes the settings of the specified display device to the specified graphics mode.
            </summary>
            <param name="lpszDeviceName">Specifies the display device whose graphics mode will change.</param>
            <param name="lpDevMode">A pointer to a <see cref="T:Win32.DevMode"/> structure that describes the new graphics mode, or <b>0</b>.</param>
            <param name="hwnd">Reserved; must be <b>0</b>.</param>
            <param name="dwflags">A <see cref="T:Win32.CDS"/> specifying how the graphics mode should be changed.</param>
            <param name="lParam">A <see cref="T:Win32.VideoParameters"/> specifying video parameters.</param>
            <returns>A <see cref="T:Win32.DISP_CHANGE"/> specifying the result.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ChangeDisplaySettingsEx(System.String,System.IntPtr,System.IntPtr,Win32.CDS,System.IntPtr)">
            <summary>
            Changes the settings of the specified display device to the specified graphics mode.
            </summary>
            <param name="lpszDeviceName">Specifies the display device whose graphics mode will change.</param>
            <param name="lpDevMode">A pointer to a <see cref="T:Win32.DevMode"/> structure that describes the new graphics mode, or <b>0</b>.</param>
            <param name="hwnd">Reserved; must be <b>0</b>.</param>
            <param name="dwflags">A <see cref="T:Win32.CDS"/> specifying how the graphics mode should be changed.</param>
            <param name="lParam">A pointer to a <see cref="T:Win32.VideoParameters"/> structure specifying video parameters, or <b>0</b>.</param>
            <returns>A <see cref="T:Win32.DISP_CHANGE"/> specifying the result.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ChangeDisplaySettingsEx(System.String,Win32.DevMode@,System.IntPtr,Win32.CDS,Win32.VideoParameters@)">
            <summary>
            Changes the settings of the specified display device to the specified graphics mode.
            </summary>
            <param name="lpszDeviceName">Specifies the display device whose graphics mode will change.</param>
            <param name="lpDevMode">A <see cref="T:Win32.DevMode"/> structure that describes the new graphics mode.</param>
            <param name="hwnd">Reserved; must be <b>0</b>.</param>
            <param name="dwflags">A <see cref="T:Win32.CDS"/> specifying how the graphics mode should be changed.</param>
            <param name="lParam">A <see cref="T:Win32.VideoParameters"/> specifying video parameters.</param>
            <returns>A <see cref="T:Win32.DISP_CHANGE"/> specifying the result.</returns>
        </member>
        <member name="M:Win32.DisplayMode.ChangeDisplaySettingsEx(System.String,Win32.DevMode@,System.IntPtr,Win32.CDS,System.IntPtr)">
            <summary>
            Changes the settings of the specified display device to the specified graphics mode.
            </summary>
            <param name="lpszDeviceName">Specifies the display device whose graphics mode will change.</param>
            <param name="lpDevMode">A <see cref="T:Win32.DevMode"/> structure that describes the new graphics mode.</param>
            <param name="hwnd">Reserved; must be <b>0</b>.</param>
            <param name="dwflags">A <see cref="T:Win32.CDS"/> specifying how the graphics mode should be changed.</param>
            <param name="lParam">A pointer to a <see cref="T:Win32.VideoParameters"/> structure specifying video parameters, or <b>0</b>.</param>
            <returns>A <see cref="T:Win32.DISP_CHANGE"/> specifying the result.</returns>
        </member>
        <member name="T:Win32.DevMode">
            <summary>
            The <see cref="T:Win32.DevMode"/> data structure contains information about the initialization and environment of a printer or a display device.
            </summary>
        </member>
        <member name="F:Win32.DevMode.CCHDEVICENAME">
            <summary>
            Size of <see cref="F:Win32.DevMode.dmDeviceName"/> in <b>char</b>s.
            </summary>
        </member>
        <member name="F:Win32.DevMode.CCHFORMNAME">
            <summary>
            Size of <see cref="F:Win32.DevMode.dmFormName"/> in <b>char</b>s.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDeviceName">
            <summary>
            A zero-terminated character array that specifies the "friendly" name of the printer or display.
            </summary>
        </member>
        <member name="P:Win32.DevMode.DeviceName">
            <summary>
            Property to access <see cref="F:Win32.DevMode.dmDeviceName"/> as string.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmSpecVersion">
            <summary>
            The version number of the initialization data specification on which the structure is based.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDriverVersion">
            <summary>
            The driver version number assigned by the driver developer.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmSize">
            <summary>
            Specifies the size, in bytes, of the <see cref="T:Win32.DevMode"/> structure, not including any private driver-specific data that might follow the structure's public members.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDriverExtra">
            <summary>
            Contains the number of bytes of private driver-data that follow this structure. If a device driver does not use device-specific information, set this member to zero.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmFields">
            <summary>
            Specifies whether certain members of the <see cref="T:Win32.DevMode"/> structure have been initialized.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmOrientation">
            <summary>
            For printer devices only, selects the orientation of the paper.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPaperSize">
            <summary>
            For printer devices only, selects the size of the paper to print on.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPaperLength">
            <summary>
            For printer devices only, overrides the length of the paper specified by the <see cref="F:Win32.DevMode.dmPaperSize"/> member, either for custom paper sizes or for devices such as dot-matrix printers that can print on a page of arbitrary length.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPaperWidth">
            <summary>
            For printer devices only, overrides the width of the paper specified by the <see cref="F:Win32.DevMode.dmPaperSize"/> member.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmScale">
            <summary>
            Specifies the factor by which the printed output is to be scaled.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmCopies">
            <summary>
            Selects the number of copies printed if the device supports multiple-page copies.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDefaultSource">
            <summary>
            Specifies the paper source. 
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPrintQuality">
            <summary>
            Specifies the printer resolution.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPosition">
            <summary>
            For display devices only, a <see cref="T:Win32.Point"/> structure that indicates the positional coordinates of the
            display device in reference to the desktop area. The primary display device is always located at coordinates (0,0).
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDisplayOrientation">
            <summary>
            For display devices only, the orientation at which images should be presented.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDisplayFixedOutput">
            <summary>
            For fixed-resolution display devices only, how the display presents a low-resolution mode on a higher-resolution display.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmColor">
            <summary>
            Switches between color and monochrome on color printers.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDuplex">
            <summary>
            Selects duplex or double-sided printing for printers capable of duplex printing.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmYResolution">
            <summary>
            Specifies the y-resolution, in dots per inch, of the printer.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmTTOption">
            <summary>
            Specifies how TrueType fonts should be printed. 
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmCollate">
            <summary>
            Specifies whether collation should be used when printing multiple copies.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmFormName">
            <summary>
            A zero-terminated character array that specifies the name of the form to use; for example, "Letter" or "Legal".
            </summary>
        </member>
        <member name="P:Win32.DevMode.FormName">
            <summary>
            Property to access <see cref="F:Win32.DevMode.dmFormName"/> as string.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmLogPixels">
            <summary>
            The number of pixels per logical inch.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmBitsPerPel">
            <summary>
            Specifies the color resolution, in bits per pixel, of the display device.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPelsWidth">
            <summary>
            Specifies the width, in pixels, of the visible device surface.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPelsHeight">
            <summary>
            Specifies the height, in pixels, of the visible device surface.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDisplayFlags">
            <summary>
            Specifies the device's display mode.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmNup">
            <summary>
            Specifies where the NUP is done.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDisplayFrequency">
            <summary>
            Specifies the frequency, in hertz (cycles per second), of the display device in a particular mode.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmICMMethod">
            <summary>
            Specifies how ICM is handled. For a non-ICM application, this member determines if ICM is enabled or disabled.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmICMIntent">
            <summary>
            Specifies which color matching method, or intent, should be used by default.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmMediaType">
            <summary>
            Specifies the type of media being printed on.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmDitherType">
            <summary>
            Specifies how dithering is to be done.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmReserved1">
            <summary>
            This member must be zero.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmReserved2">
            <summary>
            This member must be zero.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPanningWidth">
            <summary>
            This member must be zero.
            </summary>
        </member>
        <member name="F:Win32.DevMode.dmPanningHeight">
            <summary>
            This member must be zero.
            </summary>
        </member>
        <member name="T:Win32.VideoParameters">
            <summary>
            This structure contains information for a video connection.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.guid">
            <summary>
            Globally unique identifier (GUID) for this structure, {02C62061-1097-11d1-920F-00A024DF156E}.
            Display drivers should verify the GUID before processing the structure.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwOffset">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwCommand">
            <summary>
            Specifies whether to retrieve or set the values that the other members of this structure specify.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwFlags">
            <summary>
            Indicates the members that contain valid data.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwMode">
            <summary>
            Specifies the current playback mode.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwTVStandard">
            <summary>
            Specifies the television standard.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwAvailableModes">
            <summary>
            Specifies the modes that are available.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwAvailableTVStandard">
            <summary>
            Specifies the TV standards that are available.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwFlickerFilter">
            <summary>
            Specifies the flicker reduction provided by the hardware.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwOverScanX">
            <summary>
            Specifies the amount of overscan in the horizontal direction.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwOverScanY">
            <summary>
            Specifies the amount of overscan in the vertical direction.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwMaxUnscaledX">
            <summary>
            Specifies the maximum horizontal resolution, in pixels, that is supported when the video is not scaled.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwMaxUnscaledY">
            <summary>
            Specifies the maximum vertical resolution, in pixels, that is supported when the video is not scaled.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwPositionX">
            <summary>
            pecifies the horizontal adjustment to the center of the image, in scan lines.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwPositionY">
            <summary>
            pecifies the vertical adjustment to the center of the image, in scan lines.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwBrightness">
            <summary>
            Specifies the direct current (DC) offset of the video signal to increase brightness on the television.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwContrast">
            <summary>
            Specifies to the gain of the video signal to increase the intensity of whiteness on the television.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwCPType">
            <summary>
            Specifies the copy protection type.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwCPCommand">
            <summary>
            Specifies the copy protection command.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwCPStandard">
            <summary>
            Specifies TV standards for which copy protection types are available.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.dwCPKey">
            <summary>
            Specifies the copy protection key returned if <see cref="F:Win32.VideoParameters.dwCPCommand"/> is set to <see cref="F:Win32.VP_CP_CMD.ACTIVATE"/>.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.bCP_APSTriggerBits">
            <summary>
            Specifies the digital video disc (DVD) analog protection system (APS) trigger bit value.
            </summary>
        </member>
        <member name="F:Win32.VideoParameters.bOEMCopyProtection">
            <summary>
            Specifies the OEM-specific copy protection data.
            </summary>
        </member>
        <member name="T:Win32.Font">
            <summary>
            Class for working with fonts.
            </summary>
        </member>
        <member name="M:Win32.Font.CreateFont(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,Win32.Charset,Win32.OUT_PRECIS,Win32.CLIP_PRECIS,Win32.QUALITY,Win32.PitchAndFamily,System.String)">
            <summary>
            Creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.
            </summary>
            <param name="nHeight">The height, in logical units, of the font's character cell or character.</param>
            <param name="nWidth">The average width, in logical units, of characters in the requested font.</param>
            <param name="nEscapement">The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</param>
            <param name="nOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
            <param name="fnWeight">The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</param>
            <param name="fdwItalic">Set <b>true</b> to make the font italic.</param>
            <param name="fdwUnderline">Set <b>true</b> to underline the font.</param>
            <param name="fdwStrikeOut">Set <b>true</b> to strikeout the font.</param>
            <param name="fdwCharSet">A <see cref="T:Win32.Charset"/> specifying the character set.</param>
            <param name="fdwOutputPrecision">A <see cref="T:Win32.OUT_PRECIS"/> specifying the output precision.</param>
            <param name="fdwClipPrecision">A <see cref="T:Win32.CLIP_PRECIS"/> specifying the clip precision.</param>
            <param name="fdwQuality">A <see cref="T:Win32.QUALITY"/> specifying the quality.</param>
            <param name="fdwPitchAndFamily">A <see cref="T:Win32.PitchAndFamily"/> specifying the pitch and font family.</param>
            <param name="lpszFace">String that specifying the typeface name of the font.</param>
            <returns>The handle to the font.</returns>
        </member>
        <member name="M:Win32.Font.CreateFontIndirect(Win32.LogFont)">
            <summary>
            Creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.
            (Use only in environments that have <see cref="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize"/> == 2.)
            </summary>
            <param name="lplf">Defines the attributes of a font.</param>
            <returns>The handle to the font.</returns>
        </member>
        <member name="M:Win32.Font.GetGlyphOutline(System.IntPtr,System.UInt32,Win32.GGO,Win32.GlyphMetrics@,System.UInt32,System.Byte[],Win32.Mat2@)">
            <summary>
            The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="uChar">The character for which data is to be returned.</param>
            <param name="uFormat">A <see cref="T:Win32.GGO"/> specifying the format of the data that the function retrieves.</param>
            <param name="lpgm">Returns a <see cref="T:Win32.GlyphMetrics"/> structure describing the placement of the glyph in the character cell.</param>
            <param name="cbBuffer">The size, in bytes, of the buffer (<paramref name="lpvBuffer"/>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
            <param name="lpvBuffer">The buffer that receives information about the outline character. If this value is <b>null</b>, the function returns the required size of the buffer.</param>
            <param name="lpmat2">A <see cref="T:Win32.Mat2"/> structure specifying a transformation matrix for the character.</param>
            <returns>
            If <see cref="F:Win32.GGO.BITMAP"/>, <see cref="F:Win32.GGO.GRAY2_BITMAP"/>, <see cref="F:Win32.GGO.GRAY4_BITMAP"/>, <see cref="F:Win32.GGO.GRAY8_BITMAP"/>, or <see cref="F:Win32.GGO.NATIVE"/> is specified and the function succeeds,
            the return value is greater than zero; otherwise, the return value is <b>GDI_ERROR</b> (-1). If one of these flags is specified and the buffer size or address is zero, the return value specifies the
            required buffer size, in bytes. If <see cref="F:Win32.GGO.METRICS"/> is specified and the function fails, the return value is <b>GDI_ERROR</b> (-1).
            </returns>
        </member>
        <member name="M:Win32.Font.GetGlyphOutline(System.IntPtr,System.UInt32,Win32.GGO,Win32.GlyphMetrics@,System.UInt32,System.IntPtr,Win32.Mat2@)">
            <summary>
            The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.
            </summary>
            <param name="hdc">The handle to the device context.</param>
            <param name="uChar">The character for which data is to be returned.</param>
            <param name="uFormat">A <see cref="T:Win32.GGO"/> specifying the format of the data that the function retrieves.</param>
            <param name="lpgm">Returns a <see cref="T:Win32.GlyphMetrics"/> structure describing the placement of the glyph in the character cell.</param>
            <param name="cbBuffer">The size, in bytes, of the buffer (<paramref name="lpvBuffer"/>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
            <param name="lpvBuffer">The buffer that receives information about the outline character. If this value is <b>IntPtr.Zero</b>, the function returns the required size of the buffer.</param>
            <param name="lpmat2">A <see cref="T:Win32.Mat2"/> structure specifying a transformation matrix for the character.</param>
            <returns>
            If <see cref="F:Win32.GGO.BITMAP"/>, <see cref="F:Win32.GGO.GRAY2_BITMAP"/>, <see cref="F:Win32.GGO.GRAY4_BITMAP"/>, <see cref="F:Win32.GGO.GRAY8_BITMAP"/>, or <see cref="F:Win32.GGO.NATIVE"/> is specified and the function succeeds,
            the return value is greater than zero; otherwise, the return value is <b>GDI_ERROR</b>. If one of these flags is specified and the buffer size or address is zero, the return value specifies the
            required buffer size, in bytes. If <see cref="F:Win32.GGO.METRICS"/> is specified and the function fails, the return value is <b>GDI_ERROR</b>.
            </returns>
        </member>
        <member name="T:Win32.GGO">
            <summary>
            <see cref="O:Win32.Font.GetGlyphOutline">GetGlyphOutline</see> constants.
            </summary>
        </member>
        <member name="F:Win32.GGO.METRICS">
            <summary>
            Only retrieves the <see cref="T:Win32.GlyphMetrics"/> structure.
            </summary>
        </member>
        <member name="F:Win32.GGO.BITMAP">
            <summary>
            The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.
            </summary>
        </member>
        <member name="F:Win32.GGO.NATIVE">
            <summary>
            The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.
            </summary>
        </member>
        <member name="F:Win32.GGO.BEZIER">
            <summary>
            The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).
            </summary>
        </member>
        <member name="F:Win32.GGO.GRAY2_BITMAP">
            <summary>
            The function retrieves a glyph bitmap that contains five levels of gray.
            </summary>
        </member>
        <member name="F:Win32.GGO.GRAY4_BITMAP">
            <summary>
            The function retrieves a glyph bitmap that contains 17 levels of gray.
            </summary>
        </member>
        <member name="F:Win32.GGO.GRAY8_BITMAP">
            <summary>
            The function retrieves a glyph bitmap that contains 65 levels of gray.
            </summary>
        </member>
        <member name="F:Win32.GGO.GLYPH_INDEX">
            <summary>
            Indicates that the <b>uChar</b> parameter of <see cref="O:Win32.Font.GetGlyphOutline">GetGlyphOutline</see> is a TrueType Glyph Index rather than a character code.
            </summary>
        </member>
        <member name="F:Win32.GGO.UNHINTED">
            <summary>
            The function only returns unhinted outlines. This flag only works in conjunction with <see cref="F:Win32.GGO.BEZIER"/> and <see cref="F:Win32.GGO.NATIVE"/>.
            </summary>
        </member>
        <member name="T:Win32.GlyphMetrics">
            <summary>
            The <b>GlyphMetrics</b> structure contains information about the placement and orientation of a glyph in a character cell.
            </summary>
            <remarks>
            Values in the <b>GlyphMetrics</b> structure are specified in device units.
            </remarks>
        </member>
        <member name="F:Win32.GlyphMetrics.gmBlackBoxX">
            <summary>
            The width of the smallest rectangle that completely encloses the glyph (its black box).
            </summary>
        </member>
        <member name="F:Win32.GlyphMetrics.gmBlackBoxY">
            <summary>
            The height of the smallest rectangle that completely encloses the glyph (its black box).
            </summary>
        </member>
        <member name="F:Win32.GlyphMetrics.gmptGlyphOrigin">
            <summary>
            The x- and y-coordinates of the upper left corner of the smallest rectangle that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:Win32.GlyphMetrics.gmCellIncX">
            <summary>
            The horizontal distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="F:Win32.GlyphMetrics.gmCellIncY">
            <summary>
            The vertical distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="T:Win32.Fixed">
            <summary>
            Fixed-point real number used be <see cref="T:Win32.Mat2"/>.
            </summary>
        </member>
        <member name="F:Win32.Fixed.fract">
            <summary>
            Fraction.
            </summary>
        </member>
        <member name="F:Win32.Fixed.value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Win32.Fixed.#ctor(System.Int16,System.UInt16)">
            <summary>
            Initializes an instance of <b>Fixed</b>.
            </summary>
            <param name="value">The integral value.</param>
            <param name="fract">The fractional value.</param>
        </member>
        <member name="T:Win32.Mat2">
            <summary>
            Defines the values for a transformation matrix used by the <see cref="O:Win32.Font.GetGlyphOutline">GetGlyphOutline</see> function.
            </summary>
        </member>
        <member name="F:Win32.Mat2.eM11">
            <summary>
            The M11 component of a 2 by 2 transformation matrix.
            </summary>
        </member>
        <member name="F:Win32.Mat2.eM12">
            <summary>
            The M12 component of a 2 by 2 transformation matrix.
            </summary>
        </member>
        <member name="F:Win32.Mat2.eM21">
            <summary>
            The M21 component of a 2 by 2 transformation matrix.
            </summary>
        </member>
        <member name="F:Win32.Mat2.eM22">
            <summary>
            The M22 component of a 2 by 2 transformation matrix.
            </summary>
        </member>
        <member name="P:Win32.Mat2.Identity">
            <summary>
            Returns the identity matrix.
            </summary>
        </member>
        <member name="T:Win32.OUT_PRECIS">
            <summary>
            The output precision.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.DEFAULT">
            <summary>
            The default font mapper behavior.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.STRING">
            <summary>
            This value is not used by the font mapper, but it is returned when raster fonts are enumerated.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.CHARACTER">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.STROKE">
            <summary>
            This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.TT">
            <summary>
            Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.DEVICE">
            <summary>
            Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.RASTER">
            <summary>
            Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.TT_ONLY">
            <summary>
            Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.OUTLINE">
            <summary>
            This value instructs the font mapper to choose from TrueType and other outline-based fonts.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.SCREEN_OUTLINE">
            <summary>
            This value instructs the font mapper to choose from TrueType and other outline-based fonts.
            </summary>
        </member>
        <member name="F:Win32.OUT_PRECIS.PS_ONLY">
            <summary>
            Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.
            </summary>
        </member>
        <member name="T:Win32.QUALITY">
            <summary>
            The output quality.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.DEFAULT">
            <summary>
            Appearance of the font does not matter.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.DRAFT">
            <summary>
            Appearance of the font is less important than when the <see cref="F:Win32.QUALITY.PROOF"/> value is used.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.PROOF">
            <summary>
            Character quality of the font is more important than exact matching of the logical-font attributes.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.NONANTIALIASED">
            <summary>
            Font is never antialiased, that is, font smoothing is not done.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.ANTIALIASED">
            <summary>
            Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.CLEARTYPE">
            <summary>
            If set, text is rendered (when possible) using ClearType antialiasing method.
            </summary>
        </member>
        <member name="F:Win32.QUALITY.CLEARTYPE_NATURAL">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:Win32.PitchAndFamily">
            <summary>
            The pitch and family of the font. The low-order bits (Bit 1-0) specify the pitch,
            the higher-order bits (7-4) specify the font family. Bit 3 specifies monospace font.
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.DEFAULT_PITCH">
            <summary>
            Default pitch.
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FIXED_PITCH">
            <summary>
            Fixed pitch.
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.VARIABLE_PITCH">
            <summary>
            Variable pitch.
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.MONO_FONT">
            <summary>
            Monospace font.
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FF_DONTCARE">
            <summary>
            Don't care or don't know.
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FF_ROMAN">
            <summary>
            Variable stroke width, serifed. (Times Roman, Century Schoolbook, etc.)
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FF_SWISS">
            <summary>
            Variable stroke width, sans-serifed. (Helvetica, Swiss, etc.)
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FF_MODERN">
            <summary>
            Constant stroke width, serifed or sans-serifed. (Pica, Elite, Courier, etc.)
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FF_SCRIPT">
            <summary>
            Fonts designed to look like handwriting. (Cursive, etc.)
            </summary>
        </member>
        <member name="F:Win32.PitchAndFamily.FF_DECORATIVE">
            <summary>
            Novelty fonts. (Old English, etc.)
            </summary>
        </member>
        <member name="T:Win32.StockObjectType">
            <summary>
            Types of stock objects.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.WHITE_BRUSH">
            <summary>
            White brush.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.LTGRAY_BRUSH">
            <summary>
            Light gray brush.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.GRAY_BRUSH">
            <summary>
            Gray brush.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.DKGRAY_BRUSH">
            <summary>
            Dark gray brush.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.BLACK_BRUSH">
            <summary>
            Black brush.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.NULL_BRUSH">
            <summary>
            Null brush (equivalent to <see cref="F:Win32.StockObjectType.HOLLOW_BRUSH"/>).
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.HOLLOW_BRUSH">
            <summary>
            Hollow brush (equivalent to <see cref="F:Win32.StockObjectType.NULL_BRUSH"/>).
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.WHITE_PEN">
            <summary>
            White pen.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.BLACK_PEN">
            <summary>
            Black pen.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.NULL_PEN">
            <summary>
            Null pen. The null pen draws nothing.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.OEM_FIXED_FONT">
            <summary>
            Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.ANSI_FIXED_FONT">
            <summary>
            Windows fixed-pitch (monospace) system font.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.ANSI_VAR_FONT">
            <summary>
            Windows variable-pitch (proportional space) system font.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.SYSTEM_FONT">
            <summary>
            System font. By default, the system uses the system font to draw menus, dialog box controls, and text.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.DEVICE_DEFAULT_FONT">
            <summary>
            Device-dependent font.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.DEFAULT_PALETTE">
            <summary>
            Default palette. This palette consists of the static colors in the system palette.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.SYSTEM_FIXED_FONT">
            <summary>
            Fixed-pitch (monospace) system font.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.DEFAULT_GUI_FONT">
            <summary>
            Default font for user interface objects such as menus and dialog boxes.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.DC_BRUSH">
            <summary>
            Solid color brush. The default color is white. The color can be changed by using the <see cref="M:Win32.GDI.SetDCBrushColor(System.IntPtr,System.UInt32)"/> function.
            </summary>
        </member>
        <member name="F:Win32.StockObjectType.DC_PEN">
            <summary>
            Solid pen color. The default color is white. The color can be changed by using the <see cref="M:Win32.GDI.SetDCPenColor(System.IntPtr,System.UInt32)"/> function.
            </summary>
        </member>
        <member name="T:Win32.LogFont">
            <summary>
            Defines the attributes of a font. (Use only in environments that have <see cref="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize"/> == 2.)
            </summary>
        </member>
        <member name="F:Win32.LogFont.LF_FACESIZE">
            <summary>
            Constant specifying the length of the character array holding <see cref="F:Win32.LogFont.lfFaceName"/>.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfHeight">
            <summary>
            The height, in logical units, of the font's character cell or character.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfWidth">
            <summary>
            The average width, in logical units, of characters in the requested font.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfEscapement">
            <summary>
            The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfOrientation">
            <summary>
            The angle, in tenths of degrees, between each character's base line and the x-axis of the device.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfWeight">
            <summary>
            The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfItalic">
            <summary>
            <b>true</b> if the font is italic.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfUnderline">
            <summary>
            <b>true</b> if the font is underlined.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfStrikeOut">
            <summary>
            <b>true</b> if the font is striked out.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfCharSet">
            <summary>
            A <see cref="T:Win32.LogFontCharSet"/> specifying the character set.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfOutPrecision">
            <summary>
            A <see cref="T:Win32.LogFontPrecision"/> specifying the output precision.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfClipPrecision">
            <summary>
            A <see cref="T:Win32.LogFontClipPrecision"/> specifying the clip precision.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfQuality">
            <summary>
            A <see cref="T:Win32.LogFontQuality"/> specifying the quality.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfPitchAndFamily">
            <summary>
            A <see cref="T:Win32.LogFontPitchAndFamily"/> specifying the pitch and font family.
            </summary>
        </member>
        <member name="F:Win32.LogFont.lfFaceName">
            <summary>
            String that specifying the typeface name of the font.
            </summary>
        </member>
        <member name="T:Win32.LogFontCharSet">
            <summary>
            Character sets.
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.ANSI">
            <summary>
            ANSI
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.DEFAULT">
            <summary>
            Value based on the current system locale.
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.SYMBOL">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.MAC">
            <summary>
            Mac
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.SHIFTJIS">
            <summary>
            Japanise
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.HANGUL">
            <summary>
            HANGUL
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.HANGEUL">
            <summary>
            HANGUEL
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.JOHAB">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.GB2312">
            <summary>
            Simple chinese
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.CHINESEBIG5">
            <summary>
            Traditional chinese
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.GREEK">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.TURKISH">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.VIETNAMESE">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.HEBREW">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.ARABIC">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.BALTIC">
            <summary>
            Baltic languages.
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.RUSSIAN">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.THAI">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.EASTEUROPE">
            <summary>
            Eastern europe languages.
            </summary>
        </member>
        <member name="F:Win32.LogFontCharSet.OEM">
            <summary>
            Is operating-system dependent.
            </summary>
        </member>
        <member name="T:Win32.LogFontClipPrecision">
            <summary>
            The clipping precision.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.DEFAULT">
            <summary>
            Specifies default clipping behavior.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.CHARACTER">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.STROKE">
            <summary>
            Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.MASK">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.LH_ANGLES">
            <summary>
            <para>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.</para>
            <para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para>
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.TT_ALWAYS">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.DFA_DISABLE">
            <summary>
            Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.
            </summary>
        </member>
        <member name="F:Win32.LogFontClipPrecision.EMBEDDED">
            <summary>
            You must specify this flag to use an embedded read-only font.
            </summary>
        </member>
        <member name="T:Win32.LogFontPitchAndFamily">
            <summary>
            The pitch and family of the font. The low-order bits (Bit 1-0) specify the pitch, the higher-order bits (7-4) specify the font family. Bit 3 specifies monospace font.
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.DEFAULT_PITCH">
            <summary>
            Default pitch.
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FIXED_PITCH">
            <summary>
            Fixed pitch.
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.VARIABLE_PITCH">
            <summary>
            Variable pitch.
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.MONO_FONT">
            <summary>
            Monospace font.
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FF_DONTCARE">
            <summary>
            Don't care or don't know.
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FF_ROMAN">
            <summary>
            Variable stroke width, serifed. (Times Roman, Century Schoolbook, etc.)
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FF_SWISS">
            <summary>
            Variable stroke width, sans-serifed. (Helvetica, Swiss, etc.)
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FF_MODERN">
            <summary>
            Constant stroke width, serifed or sans-serifed. (Pica, Elite, Courier, etc.)
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FF_SCRIPT">
            <summary>
            Fonts designed to look like handwriting. (Cursive, etc.)
            </summary>
        </member>
        <member name="F:Win32.LogFontPitchAndFamily.FF_DECORATIVE">
            <summary>
            Novelty fonts. (Old English, etc.)
            </summary>
        </member>
        <member name="T:Win32.LogFontPrecision">
            <summary>
            The output precision.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.DEFAULT">
            <summary>
            The default font mapper behavior.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.STRING">
            <summary>
            This value is not used by the font mapper, but it is returned when raster fonts are enumerated.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.CHARACTER">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.STROKE">
            <summary>
            This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.TT">
            <summary>
            Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.DEVICE">
            <summary>
            Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.RASTER">
            <summary>
            Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.TT_ONLY">
            <summary>
            Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.OUTLINE">
            <summary>
            This value instructs the font mapper to choose from TrueType and other outline-based fonts.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.SCREEN_OUTLINE">
            <summary>
            This value instructs the font mapper to choose from TrueType and other outline-based fonts.
            </summary>
        </member>
        <member name="F:Win32.LogFontPrecision.PS_ONLY">
            <summary>
            Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.
            </summary>
        </member>
        <member name="T:Win32.LogFontQuality">
            <summary>
            The output quality.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.DEFAULT">
            <summary>
            Appearance of the font does not matter.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.DRAFT">
            <summary>
            Appearance of the font is less important than when the <see cref="F:Win32.LogFontQuality.PROOF"/> value is used.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.PROOF">
            <summary>
            Character quality of the font is more important than exact matching of the logical-font attributes.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.NONANTIALIASED">
            <summary>
            Font is never antialiased, that is, font smoothing is not done.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.ANTIALIASED">
            <summary>
            Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.CLEARTYPE">
            <summary>
            If set, text is rendered (when possible) using ClearType antialiasing method.
            </summary>
        </member>
        <member name="F:Win32.LogFontQuality.CLEARTYPE_NATURAL">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:Win32.Point">
            <summary>
            Defines the x- and y- coordinates of a point.
            </summary>
        </member>
        <member name="F:Win32.Point.x">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Win32.Point.y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Win32.MonitorInfoFlag">
            <summary>
            Specifies flags for monitor devices.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoFlag.PRIMARY">
            <summary>
            This is the primary display monitor.
            </summary>
        </member>
        <member name="T:Win32.Monitor">
            <summary>
            Class for managing monitor devices.
            </summary>
        </member>
        <member name="F:Win32.Monitor.hMonitor">
            <summary>
            Handle to the display monitor.
            </summary>
        </member>
        <member name="F:Win32.Monitor.hdcMonitor">
            <summary>
            Handle to device context.
            </summary>
        </member>
        <member name="F:Win32.Monitor.lprcMonitor">
            <summary>
            Rectangle with the intersection of the clipping area of the device context and the display monitor rectangle.
            </summary>
        </member>
        <member name="M:Win32.Monitor.#ctor(System.IntPtr,System.IntPtr,Win32.Rect)">
            <summary>
            Initializes the class.
            </summary>
            <param name="hMonitor">Handle to the display monitor.</param>
            <param name="hdcMonitor">Handle to device context.</param>
            <param name="lprcMonitor">Rectangle with the intersection of the clipping area of the device context and the display monitor rectangle.</param>
        </member>
        <member name="M:Win32.Monitor.GetMonitorInfo(System.IntPtr,Win32.MonitorInfo@)">
            <summary>
            Retrieves information about a display monitor.
            </summary>
            <param name="hMonitor">The handle to the display monitor of interest.</param>
            <param name="lpmi">Structure of type <see cref="T:Win32.MonitorInfo"/> to receive the requested informations.
            <see cref="F:Win32.MonitorInfo.cbSize"/> must be initialized with the size of <see cref="T:Win32.MonitorInfo"/>.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.Monitor.GetMonitorInfo(System.IntPtr,Win32.MonitorInfoEx@)">
            <summary>
            Retrieves information about a display monitor.
            </summary>
            <param name="hMonitor">The handle to the display monitor of interest.</param>
            <param name="lpmiex">Structure of type <see cref="T:Win32.MonitorInfoEx"/> to receive the requested informations. <see cref="F:Win32.MonitorInfoEx.cbSize"/> must be initialized with the size of <see cref="T:Win32.MonitorInfoEx"/>.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Win32.Monitor.GetDisplayMonitors">
            <summary>
            Returns a list of all monitors (including invisible pseudo-monitors).
            </summary>
            <returns>A list of all monitors.</returns>
        </member>
        <member name="M:Win32.Monitor.GetDisplayMonitors(System.IntPtr)">
            <summary>
            Returns a list of all monitors (including invisible pseudo-monitors).
            </summary>
            <param name="hdc">The handle to a display device context that defines the visible region of interest.</param>
            <returns>A list of all monitors.</returns>
        </member>
        <member name="M:Win32.Monitor.GetDisplayMonitors(Win32.Rect)">
            <summary>
            Returns a list of all monitors (including invisible pseudo-monitors).
            </summary>
            <param name="rect">The region of interest as rectangle in virtual-screen coordinates.</param>
            <returns>A list of all monitors.</returns>
        </member>
        <member name="M:Win32.Monitor.GetDisplayMonitors(System.IntPtr,Win32.Rect)">
            <summary>
            Returns a list of all monitors (including invisible pseudo-monitors).
            </summary>
            <param name="hdc">The handle to a display device context that defines the visible region of interest.</param>
            <param name="rect">The region of interest as rectangle in virtual-screen coordinates if <paramref name="hdc"/> is <b>null</b>, otherwise in coordinates relative the the device context.</param>
            <returns>A list of all monitors.</returns>
        </member>
        <member name="T:Win32.MonitorInfo">
            <summary>
            Structure containing information about a display monitor.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfo.cbSize">
            <summary>
            The size, in bytes, of the structure.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfo.rcMonitor">
            <summary>
            A <see cref="T:Win32.Rect"/> structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfo.rcWork">
            <summary>
            A <see cref="T:Win32.Rect"/> structure that specifies the work area rectangle of the display monitor that can be used by applications, expressed in virtual-screen coordinates.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfo.dwFlags">
            <summary>
            A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
        <member name="T:Win32.MonitorInfoEx">
            <summary>
            Structure containing information about a display monitor. Same as <see cref="T:Win32.MonitorInfo"/>, but additionally containing a device name.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoEx.CCHDEVICENAME">
            <summary>
            Size of <see cref="F:Win32.MonitorInfoEx.szDevice"/> in <b>char</b>s.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoEx.cbSize">
            <summary>
            The size, in bytes, of the structure.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoEx.rcMonitor">
            <summary>
            A <see cref="T:Win32.Rect"/> structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoEx.rcWork">
            <summary>
            A <see cref="T:Win32.Rect"/> structure that specifies the work area rectangle of the display monitor that can be used by applications, expressed in virtual-screen coordinates.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoEx.dwFlags">
            <summary>
            A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
        <member name="F:Win32.MonitorInfoEx.szDevice">
            <summary>
            A zero-terminated character array that specifies the "friendly" name of the display.
            </summary>
        </member>
        <member name="P:Win32.MonitorInfoEx.Device">
            <summary>
            Property to access <see cref="F:Win32.MonitorInfoEx.szDevice"/> as string.
            </summary>
        </member>
        <member name="T:Win32.Rect">
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:Win32.Rect.left">
            <summary>
            The x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:Win32.Rect.top">
            <summary>
            The y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:Win32.Rect.right">
            <summary>
            The x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:Win32.Rect.bottom">
            <summary>
            The y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="M:Win32.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the rectangle.</param>
        </member>
        <member name="T:Win32.Size">
            <summary>
            Defines the width and height of a rectangle.
            </summary>
            <remarks>
            The rectangle dimensions stored in this structure may correspond to viewport extents, window extents,
            text extents, bitmap dimensions, or the aspect-ratio filter for some extended functions.
            </remarks>
        </member>
        <member name="F:Win32.Size.cx">
            <summary>
            Specifies the rectangle's width. The units depend on which function uses this.
            </summary>
        </member>
        <member name="F:Win32.Size.cy">
            <summary>
            Specifies the rectangle's height. The units depend on which function uses this.
            </summary>
        </member>
        <member name="T:Win32.CS">
            <summary>
            Window class styles.
            </summary>
        </member>
        <member name="F:Win32.CS.VREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the height of the client area.
            </summary>
        </member>
        <member name="F:Win32.CS.HREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the width of the client area.
            </summary>
        </member>
        <member name="F:Win32.CS.KEYCVTWINDOW">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Win32.CS.DBLCLKS">
            <summary>
            Sends a double-click message to the window procedure when the user double-clicks the mouse
            while the cursor is within a window belonging to the class.
            </summary>
        </member>
        <member name="F:Win32.CS.h10">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.CS.OWNDC">
            <summary>
            Allocates a unique device context for each window in the class.
            </summary>
        </member>
        <member name="F:Win32.CS.CLASSDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            </summary>
        </member>
        <member name="F:Win32.CS.PARENTDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the
            child can draw on the parent.
            </summary>
        </member>
        <member name="F:Win32.CS.NOKEYCVT">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Win32.CS.NOCLOSE">
            <summary>
            Disables <b>Close</b> on the window menu.
            </summary>
        </member>
        <member name="F:Win32.CS.h400">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.CS.SAVEBITS">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            </summary>
        </member>
        <member name="F:Win32.CS.BYTEALIGNCLIENT">
            <summary>
            Aligns the window's client area on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Win32.CS.BYTEALIGNWINDOW">
            <summary>
            Aligns the window on a byte boundary (in the x direction). This style affects the width
            of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Win32.CS.GLOBALCLASS">
            <summary>
            Indicates that the window class is an application global class.
            </summary>
        </member>
        <member name="F:Win32.CS.h8000">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.CS.IME">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Win32.CS.DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window.
            </summary>
        </member>
        <member name="T:Win32.DCX">
            <summary>
            Specifies how the DC is created.
            </summary>
        </member>
        <member name="F:Win32.DCX.WINDOW">
            <summary>
            Returns a DC that corresponds to the window rectangle rather than the client rectangle.
            </summary>
        </member>
        <member name="F:Win32.DCX.CACHE">
            <summary>
            Returns a DC from the cache, rather than the <b>OWNDC</b> or <b>CLASSDC</b> window. Essentially overrides <b>CS_OWNDC</b> and <b>CS_CLASSDC</b>.
            </summary>
        </member>
        <member name="F:Win32.DCX.PARENTCLIP">
            <summary>
            Uses the visible region of the parent window. The parent's <b>WS_CLIPCHILDREN</b> and <b>CS_PARENTDC</b> style bits are ignored. The origin is set to the upper-left corner of the window.
            </summary>
        </member>
        <member name="F:Win32.DCX.CLIPSIBLINGS">
            <summary>
            Excludes the visible regions of all sibling windows above the window.
            </summary>
        </member>
        <member name="F:Win32.DCX.CLIPCHILDREN">
            <summary>
            Excludes the visible regions of all child windows below the window.
            </summary>
        </member>
        <member name="F:Win32.DCX.NORESETATTRS">
            <summary>
            Does not reset the attributes of this DC to the default attributes when this DC is released.
            </summary>
        </member>
        <member name="F:Win32.DCX.LOCKWINDOWUPDATE">
            <summary>
            Allows drawing even if there is a <b>LockWindowUpdate</b> call in effect that would otherwise exclude this window. Used for drawing during tracking.
            </summary>
        </member>
        <member name="F:Win32.DCX.EXCLUDERGN">
            <summary>
            The clipping region is excluded from the visible region of the returned DC.
            </summary>
        </member>
        <member name="F:Win32.DCX.INTERSECTRGN">
            <summary>
            The clipping region is intersected with the visible region of the returned DC.
            </summary>
        </member>
        <member name="F:Win32.DCX.INTERSECTUPDATE">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:Win32.DCX.VALIDATE">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="T:Win32.ERROR">
            <summary>
            Windows errors.
            </summary>
        </member>
        <member name="F:Win32.ERROR.NO_ERROR">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Win32.ERROR.ACCESS_DENIED">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="F:Win32.ERROR.INSUFFICIENT_BUFFER">
            <summary>
            The data area passed to a system call is too small.
            </summary>
        </member>
        <member name="F:Win32.ERROR.CANNOT_BREAK_OPLOCK">
            <summary>
            The operation did not complete successfully because it would cause an oplock
            to be broken. The caller has requested that existing oplocks not be broken.
            </summary>
        </member>
        <member name="F:Win32.ERROR.IO_PENDING">
            <summary>
            Overlapped I/O operation is in progress.
            </summary>
        </member>
        <member name="T:Win32.HT">
            <summary>
            Indicates the position of the cursor hot spot.
            </summary>
        </member>
        <member name="F:Win32.HT.ERROR">
            <summary>
            On the screen background or on a dividing line between windows (same as <see cref="F:Win32.HT.NOWHERE"/>, except that the DefWindowProc function produces a system beep to indicate an error).
            </summary>
        </member>
        <member name="F:Win32.HT.TRANSPARENT">
            <summary>
            In a window currently covered by another window in the same thread (the message will be sent to underlying windows in the same thread until one of them returns a code that is not <see cref="F:Win32.HT.TRANSPARENT"/>).
            </summary>
        </member>
        <member name="F:Win32.HT.NOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:Win32.HT.CLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:Win32.HT.CAPTION">
            <summary>
            In a title bar.
            </summary>
        </member>
        <member name="F:Win32.HT.SYSMENU">
            <summary>
            In a window menu or in a Close button in a child window.
            </summary>
        </member>
        <member name="F:Win32.HT.GROWBOX">
            <summary>
            In a size box (same as <see cref="F:Win32.HT.SIZE"/>).
            </summary>
        </member>
        <member name="F:Win32.HT.SIZE">
            <summary>
            In a size box (same as <see cref="F:Win32.HT.GROWBOX"/>).
            </summary>
        </member>
        <member name="F:Win32.HT.MENU">
            <summary>
            In a menu.
            </summary>
        </member>
        <member name="F:Win32.HT.HSCROLL">
            <summary>
            In a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Win32.HT.VSCROLL">
            <summary>
            In the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Win32.HT.MINBUTTON">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:Win32.HT.REDUCE">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:Win32.HT.MAXBUTTON">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:Win32.HT.ZOOM">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:Win32.HT.LEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Win32.HT.RIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Win32.HT.TOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="F:Win32.HT.TOPLEFT">
            <summary>
            In the upper-left corner of a window border.
            </summary>
        </member>
        <member name="F:Win32.HT.TOPRIGHT">
            <summary>
            In the upper-right corner of a window border.
            </summary>
        </member>
        <member name="F:Win32.HT.BOTTOM">
            <summary>
            In the lower-horizontal border of a resizable window (the user can click the mouse to resize the window vertically).
            </summary>
        </member>
        <member name="F:Win32.HT.BOTTOMLEFT">
            <summary>
            In the lower-left corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:Win32.HT.BOTTOMRIGHT">
            <summary>
            In the lower-right corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:Win32.HT.BORDER">
            <summary>
            In the border of a window that does not have a sizing border.
            </summary>
        </member>
        <member name="F:Win32.HT.CLOSE">
            <summary>
            In a Close button.
            </summary>
        </member>
        <member name="F:Win32.HT.HELP">
            <summary>
            In a Help button.
            </summary>
        </member>
        <member name="T:Win32.SWP">
            <summary>
            Flags for <see cref="M:Win32.Window.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Win32.SWP)"/>.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOSIZE">
            <summary>
            Retains the current size.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOMOVE">
            <summary>
            Retains the current position.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOZORDER">
            <summary>
            Retains the current Z order.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOREDRAW">
            <summary>
            Does not redraw changes.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOACTIVATE">
            <summary>
            Does not activate the window.
            </summary>
        </member>
        <member name="F:Win32.SWP.FRAMECHANGED">
            <summary>
            Applies new frame styles. <b>WM_NCCALCSIZE</b> message is send, even if the window's size is not being changed.
            </summary>
        </member>
        <member name="F:Win32.SWP.DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            Same as <see cref="F:Win32.SWP.FRAMECHANGED"/>.
            </summary>
        </member>
        <member name="F:Win32.SWP.SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:Win32.SWP.HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOREPOSITION">
            <summary>
            Same as <see cref="F:Win32.SWP.NOOWNERZORDER"/>.
            </summary>
        </member>
        <member name="F:Win32.SWP.NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the <b>WM_WINDOWPOSCHANGING</b> message.
            </summary>
        </member>
        <member name="F:Win32.SWP.DEFERERASE">
            <summary>
            Prevents generation of the <b>WM_SYNCPAINT</b> message.
            </summary>
        </member>
        <member name="F:Win32.SWP.ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues,
            the system posts the request to the thread that owns the window. This prevents the calling thread
            from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="T:Win32.Window">
            <summary>
            Class for managing windows (not the OS, just the windows).
            </summary>
        </member>
        <member name="M:Win32.Window.GetDC(System.IntPtr)">
            <summary>
            Retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.
            </summary>
            <param name="hWnd">The handle to the window. Set <see cref="F:System.IntPtr.Zero"/> to retrieve the device context of the screen.</param>
            <returns>If successful the handle to the device context, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.Window.GetDCEx(System.IntPtr,System.IntPtr,Win32.DCX)">
            <summary>
            Retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.
            </summary>
            <param name="hWnd">The handle to the window. Set <see cref="F:System.IntPtr.Zero"/> to retrieve the device context of the screen.</param>
            <param name="hrgnClip">A clipping region that may be combined with the visible region of the DC. If the value of flags is
            <see cref="F:Win32.DCX.INTERSECTRGN"/> or <see cref="F:Win32.DCX.EXCLUDERGN"/>, then the operating system assumes ownership of the region
            and will automatically delete it when it is no longer needed. In this case, the application should not use or delete the
            region after a successful call to <see cref="M:Win32.Window.GetDCEx(System.IntPtr,System.IntPtr,Win32.DCX)"/>.</param>
            <param name="flags">A <see cref="T:Win32.DCX"/>-bitmask specifying how the DC is created.</param>
            <returns>If successful the handle to the device context, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.Window.GetWindowDC(System.IntPtr)">
            <summary>
            Retrieves a handle to a device context (DC) for the entire window, including title bar, menus, and scroll bars, or of the primary monitor device.
            </summary>
            <param name="hWnd">The handle to the window. Set <see cref="F:System.IntPtr.Zero"/> to retrieve the device context of the primary monitor device.</param>
            <returns>If successful the handle to the device context, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.Window.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Releases a device context (DC).
            </summary>
            <param name="hWnd">The handle to the window whose DC is to be released.</param>
            <param name="hDC">The handle to the DC to be released.</param>
            <returns>1 (one) if the device context was released, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.Window.WindowFromDC(System.IntPtr)">
            <summary>
            Retrieves a handle of a window from a device context (DC).
            </summary>
            <param name="hDC">The handle to the device context.</param>
            <returns>If successful the handle to the window, otherwise 0 (zero) is returned.</returns>
        </member>
        <member name="M:Win32.Window.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Win32.SWP)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window.
            </summary>
            <param name="hWnd">The handle to the window.</param>
            <param name="hWndInsertAfter">The handle to the window to precede the positioned window in the Z order.
            Can also be one of <see cref="F:Win32.Window.TOP"/>, <see cref="F:Win32.Window.BOTTOM"/>, <see cref="F:Win32.Window.TOPMOST"/> and <see cref="F:Win32.Window.NOTOPMOST"/>.</param>
            <param name="X">The new position of the left side of the window, in client coordinates. </param>
            <param name="Y">The new position of the top of the window, in client coordinates. </param>
            <param name="cx">The new width of the window, in pixels. </param>
            <param name="cy">The new height of the window, in pixels. </param>
            <param name="uFlags">A <see cref="T:Win32.SWP"/> specifying window sizing and positioning flags.</param>
            <returns><b>true</b> if the function succeeds, otherwise <b>false</b>.</returns>
        </member>
        <member name="F:Win32.Window.BOTTOM">
            <summary>
            Places the window at the bottom of the Z order.
            </summary>
        </member>
        <member name="F:Win32.Window.TOP">
            <summary>
            Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:Win32.Window.TOPMOST">
            <summary>
            Places the window above all non-topmost windows.
            </summary>
        </member>
        <member name="F:Win32.Window.NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows).
            </summary>
        </member>
        <member name="T:Win32.WS">
            <summary>
            Window styles.
            </summary>
        </member>
        <member name="F:Win32.WS.OVERLAPPED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a
            border. Same as the <see cref="F:Win32.WS.TILED"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.MAXIMIZEBOX">
            <summary>
            The window has a maximize button. Cannot be combined with the <see cref="F:Win32.WS.EX.CONTEXTHELP"/>
            style. The <see cref="F:Win32.WS.SYSMENU"/> style must also be specified.
            </summary>
        </member>
        <member name="F:Win32.WS.MINIMIZEBOX">
            <summary>
            The window has a minimize button. Cannot be combined with the <see cref="F:Win32.WS.EX.CONTEXTHELP"/>
            style. The <see cref="F:Win32.WS.SYSMENU"/> style must also be specified.
            </summary>
        </member>
        <member name="F:Win32.WS.THICKFRAME">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Win32.WS.SIZEBOX"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.SYSMENU">
            <summary>
            The window has a window menu on its title bar. The <see cref="F:Win32.WS.CAPTION"/>
            style must also be specified.
            </summary>
        </member>
        <member name="F:Win32.WS.HSCROLL">
            <summary>
            The window has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Win32.WS.VSCROLL">
            <summary>
            The window has a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Win32.WS.DLGFRAME">
            <summary>
            The window has a border of a style typically used with dialog boxes. A
            window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:Win32.WS.BORDER">
            <summary>
            The window has a thin-line border.
            </summary>
        </member>
        <member name="F:Win32.WS.MAXIMIZE">
            <summary>
            The window is initially maximized.
            </summary>
        </member>
        <member name="F:Win32.WS.CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the
            parent window. This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Win32.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child
            window receives a <see cref="F:Win32.WM.PAINT"/> message, the <see cref="F:Win32.WS.CLIPSIBLINGS"/>
            style clips all other overlapping child windows out of the region of the child
            window to be updated. If <see cref="F:Win32.WS.CLIPSIBLINGS"/> is not specified and child
            windows overlap, it is possible, when drawing within the client area of a child
            window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Win32.WS.DISABLED">
            <summary>
            The window is initially disabled. A disabled window cannot receive input from the user.
            </summary>
        </member>
        <member name="F:Win32.WS.VISIBLE">
            <summary>
            The window is initially visible.
            </summary>
        </member>
        <member name="F:Win32.WS.MINIMIZE">
            <summary>
            The window is initially minimized. Same as the <see cref="F:Win32.WS.ICONIC"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.CHILD">
            <summary>
            The window is a child window. A window with this style cannot have a menu bar.
            This style cannot be used with the <see cref="F:Win32.WS.POPUP"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.POPUP">
            <summary>
            The windows is a pop-up window. This style cannot be used with the <see cref="F:Win32.WS.CHILD"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the <b>TAB</b> key.
            </summary>
        </member>
        <member name="F:Win32.WS.GROUP">
            <summary>
            The window is the first control of a group of controls.
            </summary>
        </member>
        <member name="F:Win32.WS.CAPTION">
            <summary>
            The window has a title bar (includes the <see cref="F:Win32.WS.BORDER"/> style).
            </summary>
        </member>
        <member name="F:Win32.WS.TILED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border. Same as the <see cref="F:Win32.WS.OVERLAPPED"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.ICONIC">
            <summary>
            The window is initially minimized. Same as the <see cref="F:Win32.WS.MINIMIZE"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.SIZEBOX">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Win32.WS.THICKFRAME"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Win32.WS.TILEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.POPUPWINDOW">
            <summary>
            The window is a pop-up window. The <see cref="F:Win32.WS.CAPTION"/> and <see cref="F:Win32.WS.POPUPWINDOW"/>
            styles must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:Win32.WS.CHILDWINDOW">
            <summary>
            Same as the <see cref="F:Win32.WS.CHILD"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.TILEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Win32.WS.OVERLAPPEDWINDOW"/> style.
            </summary>
        </member>
        <member name="T:Win32.WS.EX">
            <summary>
            Extended window styles.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.LEFT">
            <summary>
            The window has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties.
            This is the default.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.RIGHTSCROLLBAR">
            <summary>
            The vertical scroll bar (if present) is to the right of the client area.
            This is the default.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.DLGMODALFRAME">
            <summary>
            The window has a double border; the window can, optionally, be created
            with a title bar by specifying the <see cref="F:Win32.WS.CAPTION"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.h2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.NOPARENTNOTIFY">
            <summary>
            The child window created with this style does not send the <see cref="F:Win32.WM.PARENTNOTIFY"/>
            message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and
            should stay above them, even when the window is deactivated.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.ACCEPTFILES">
            <summary>
            The window accepts drag-drop files.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.TRANSPARENT">
            <summary>
            The window should not be painted until siblings beneath the window
            (that were created by the same thread) have been painted.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.MDICHILD">
            <summary>
            The window is a MDI child window.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.TOOLWINDOW">
            <summary>
            The window is intended to be used as a floating toolbar.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.WINDOWEDGE">
            <summary>
            The window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.CLIENTEDGE">
            <summary>
            The window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.CONTEXTHELP">
            <summary>
            The title bar of the window includes a question mark. When the user clicks the
            question mark, the cursor changes to a question mark with a pointer. If the user
            then clicks a child window, the child receives a <see cref="F:Win32.WM.HELP"/> message.
            <see cref="F:Win32.WS.EX.CONTEXTHELP"/> cannot be used with the <see cref="F:Win32.WS.MAXIMIZEBOX"/>
            or <see cref="F:Win32.WS.MINIMIZEBOX"/> styles.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.h800">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window
            class. This style has an effect only if the shell language is Hebrew, Arabic,
            or another language that supports reading-order alignment; otherwise, the
            style is ignored.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports
            reading-order alignment, the window text is displayed using right-to-left
            reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports
            reading order alignment, the vertical scroll bar (if present) is to the left
            of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.h8000">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.STATICEDGE">
            <summary>
            The window has a three-dimensional border style intended to be
            used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.LAYERED">
            <summary>
            The window is a layered window. This style cannot be used if the window
            has a class style of either <see cref="F:Win32.CS.OWNDC"/> or <see cref="F:Win32.CS.CLASSDC"/>.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.NOINHERITLAYOUT">
            <summary>
            The window does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface. This is for windows
            that do not have visible content or that use mechanisms other than
            surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.LAYOUTRTL">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports
            reading order alignment, the horizontal origin of the window is on the right
            edge. Increasing horizontal values advance to the left.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.h800000">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.h1000000">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.COMPOSITED">
            <summary>
            Paints all descendants of a window in bottom-to-top painting order using double-buffering.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.h4000000">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.NOACTIVATE">
            <summary>
            A top-level window created with this style does not become the foreground window
            when the user clicks it. The system does not bring this window to the foreground
            when the user minimizes or closes the foreground window.
            The window does not appear on the taskbar by default. To force the window to
            appear on the taskbar, use the <see cref="F:Win32.WS.EX.APPWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window.
            </summary>
        </member>
        <member name="F:Win32.WS.EX.PALETTEWINDOW">
            <summary>
            The window is palette window, which is a modeless dialog box that
            presents an array of commands.
            </summary>
        </member>
        <member name="T:Win32.WM">
            <summary>
            Windows message.
            </summary>
        </member>
        <member name="T:Win32.STANDARD_RIGHTS">
            <summary>
            Standard Access Rights. See <see cref="T:Win32.ACCESS_MASK"/> for more information.
            </summary>
        </member>
        <member name="F:Win32.STANDARD_RIGHTS.REQUIRED">
            <summary>
            See <see cref="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_REQUIRED"/>.
            </summary>
        </member>
        <member name="F:Win32.STANDARD_RIGHTS.READ">
            <summary>
            See <see cref="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_READ"/>.
            </summary>
        </member>
        <member name="F:Win32.STANDARD_RIGHTS.WRITE">
            <summary>
            See <see cref="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_WRITE"/>.
            </summary>
        </member>
        <member name="F:Win32.STANDARD_RIGHTS.EXECUTE">
            <summary>
            See <see cref="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_EXECUTE"/>.
            </summary>
        </member>
        <member name="F:Win32.STANDARD_RIGHTS.ALL">
            <summary>
            See <see cref="F:Win32.ACCESS_MASK.STANDARD_RIGHTS_ALL"/>.
            </summary>
        </member>
        <member name="T:Win32.GENERIC_MAPPING">
            <summary>
            Specifies an access mask defining all the generic access types to an object.
            </summary>
        </member>
        <member name="F:Win32.GENERIC_MAPPING.GenericRead">
            <summary>
            Specifies an access mask defining read access to an object.
            </summary>
        </member>
        <member name="F:Win32.GENERIC_MAPPING.GenericWrite">
            <summary>
            Specifies an access mask defining write access to an object.
            </summary>
        </member>
        <member name="F:Win32.GENERIC_MAPPING.GenericExecute">
            <summary>
            Specifies an access mask defining execute access to an object.
            </summary>
        </member>
        <member name="F:Win32.GENERIC_MAPPING.GenericAll">
            <summary>
            Specifies an access mask defining all possible types of access to an object.
            </summary>
        </member>
        <member name="T:Win32.SECURITY_ATTRIBUTES">
            <summary>
            Contains the security descriptor for an object and specifies whether the handle
            retrieved by specifying this structure is inheritable.
            </summary>
        </member>
        <member name="F:Win32.SECURITY_ATTRIBUTES.nLength">
            <summary>
            The size, in bytes, of this structure. Set this value to the size of the
            <see cref="T:Win32.SECURITY_ATTRIBUTES"/> structure.
            </summary>
        </member>
        <member name="F:Win32.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            A pointer to a <b>SECURITY_DESCRIPTOR</b> structure that controls access
            to the object. Default security descriptor is null (IntPtr.Zero).
            </summary>
        </member>
        <member name="F:Win32.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>
            A <b>bool</b> value that specifies whether the returned handle is
            inherited when a new process is created. If this member is <b>true</b>,
            the new process inherits the handle.
            </summary>
        </member>
        <member name="T:Win32.WinKernel">
            <summary>
            Class for miscellaneous kernel32.dll functions.
            </summary>
        </member>
        <member name="M:Win32.WinKernel.GetLastError">
            <summary>
            Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code.
            </summary>
            <remarks>This is for convenience only, you should use <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> in conjunction with <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError"/> set <b>true</b>.</remarks>
            <returns>The last-error code.</returns>
        </member>
        <member name="M:Win32.WinKernel.SetLastError(System.Int32)">
            <summary>
            Sets the last-error code for the calling thread.
            </summary>
        </member>
        <member name="M:Win32.WinKernel.SetLastError(System.UInt32)">
            <summary>
            Sets the last-error code for the calling thread.
            </summary>
        </member>
        <member name="M:Win32.WinKernel.QueryPerformanceCounter(System.Int64@)">
            <summary>
            Retrieves the current value of the performance counter, which is a high resolution (&lt;1µs) time stamp that can be used for time-interval measurements.
            </summary>
            <remarks>Use <see cref="M:Win32.WinKernel.QueryPerformanceFrequency(System.Int64@)"/> to query the frequency of the counter.</remarks>
            <param name="lpPerformanceCount">The variable that receives the current performance-counter value, in counts.</param>
            <returns><b>true</b> if successful; otherwise, <b>false</b>. Use <see cref="M:Win32.WinKernel.GetLastError"/> to get extended error information.</returns>
        </member>
        <member name="M:Win32.WinKernel.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            Retrieves the frequency of the performance counter. The frequency of the performance counter is fixed at system boot and is consistent across all processors. Therefore, the frequency need only be queried upon application initialization, and the result can be cached.
            </summary>
            <param name="lpFrequency">The variable that receives the current performance-counter frequency, in counts per second.</param>
            <returns><b>true</b> the installed hardware supports a high-resolution performance counter; otherwise, <b>false</b>. Use <see cref="M:Win32.WinKernel.GetLastError"/> to get extended error information.</returns>
        </member>
    </members>
</doc>
